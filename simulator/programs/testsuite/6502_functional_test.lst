AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    1
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

6114 lines read, no errors in pass 1.
                        ;
                        ; 6 5 0 2   F U N C T I O N A L   T E S T
                        ;
                        ; Copyright (C) 2012-2020  Klaus Dormann
                        ;
                        ; This program is free software: you can redistribute it and/or modify
                        ; it under the terms of the GNU General Public License as published by
                        ; the Free Software Foundation, either version 3 of the License, or
                        ; (at your option) any later version.
                        ;
                        ; This program is distributed in the hope that it will be useful,
                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of
                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        ; GNU General Public License for more details.
                        ;
                        ; You should have received a copy of the GNU General Public License
                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
                        
                        
                        ; This program is designed to test all opcodes of a 6502 emulator using all
                        ; addressing modes with focus on propper setting of the processor status
                        ; register bits.
                        ; 
                        ; version 05-jan-2020
                        ; contact info at http://2m5.de or email K@2m5.de
                        ;
                        ; assembled with AS65 written by Frank A. Kingswood
                        ; The assembler as65_142.zip can be obtained from my GitHub repository 
                        ; command line switches: -l -m -s2 -w -h0
                        ;                         |  |  |   |  no page headers in listing
                        ;                         |  |  |   wide listing (133 char/col)
                        ;                         |  |  write intel hex file instead of binary
                        ;                         |  expand macros in listing
                        ;                         generate pass2 listing
                        ;
                        ; No IO - should be run from a monitor with access to registers.
                        ; To run load intel hex image with a load command, than alter PC to 400 hex
                        ; (code_segment) and enter a go command.
                        ; Loop on program counter determines error or successful completion of test.
                        ; Check listing for relevant traps (jump/branch *).
                        ; Please note that in early tests some instructions will have to be used before
                        ; they are actually tested!
                        ;
                        ; RESET, NMI or IRQ should not occur and will be trapped if vectors are enabled.
                        ; Tests documented behavior of the original NMOS 6502 only! No unofficial
                        ; opcodes. Additional opcodes of newer versions of the CPU (65C02, 65816) will
                        ; not be tested. Decimal ops will only be tested with valid BCD operands and
                        ; N V Z flags will be ignored.
                        ;
                        ; Debugging hints:
                        ;     Most of the code is written sequentially. if you hit a trap, check the
                        ;   immediately preceeding code for the instruction to be tested. Results are
                        ;   tested first, flags are checked second by pushing them onto the stack and
                        ;   pulling them to the accumulator after the result was checked. The "real"
                        ;   flags are no longer valid for the tested instruction at this time!
                        ;     If the tested instruction was indexed, the relevant index (X or Y) must
                        ;   also be checked. Opposed to the flags, X and Y registers are still valid.
                        ;
                        ; versions:
                        ;   28-jul-2012  1st version distributed for testing
                        ;   29-jul-2012  fixed references to location 0, now #0
                        ;                added license - GPLv3
                        ;   30-jul-2012  added configuration options
                        ;   01-aug-2012  added trap macro to allow user to change error handling
                        ;   01-dec-2012  fixed trap in branch field must be a branch
                        ;   02-mar-2013  fixed PLA flags not tested
                        ;   19-jul-2013  allowed ROM vectors to be loaded when load_data_direct = 0
                        ;                added test sequence check to detect if tests jump their fence
                        ;   23-jul-2013  added RAM integrity check option
                        ;   16-aug-2013  added error report to standard output option
                        ;   13-dec-2014  added binary/decimal opcode table switch test
                        ;   14-dec-2014  improved relative address test
                        ;   23-aug-2015  added option to disable self modifying tests
                        ;   24-aug-2015  all self modifying immediate opcodes now execute in data RAM
                        ;                added small branch offset pretest
                        ;   21-oct-2015  added option to disable decimal mode ADC & SBC tests
                        ;   04-dec-2017  fixed BRK only tested with interrupts enabled
                        ;                added option to skip the remainder of a failing test
                        ;                in report.i65
                        ;   05-jan-2020  fixed shifts not testing zero result and flag when last 1-bit
                        ;                is shifted out
                        
                        ; C O N F I G U R A T I O N
                        
                        ;ROM_vectors writable (0=no, 1=yes)
                        ;if ROM vectors can not be used interrupts will not be trapped
                        ;as a consequence BRK can not be tested but will be emulated to test RTI
0001 =                  ROM_vectors = 1
                        
                        ;load_data_direct (0=move from code segment, 1=load directly)
                        ;loading directly is preferred but may not be supported by your platform
                        ;0 produces only consecutive object code, 1 is not suitable for a binary image
0001 =                  load_data_direct = 1
                        
                        ;I_flag behavior (0=force enabled, 1=force disabled, 2=prohibit change, 3=allow
                        ;change) 2 requires extra code and is not recommended. SEI & CLI can only be
                        ;tested if you allow changing the interrupt status (I_flag = 3)
0003 =                  I_flag = 3
                        
                        ;configure memory - try to stay away from memory used by the system
                        ;zero_page memory start address, $52 (82) consecutive Bytes required
                        ;                                add 2 if I_flag = 2
000a =                  zero_page = $a  
                        
                        ;data_segment memory start address, $7B (123) consecutive Bytes required
0200 =                  data_segment = $200  
                            if (data_segment & $ff) != 0
                                ERROR ERROR ERROR low byte of data_segment MUST be $00 !!
                            endif  
                        
                        ;code_segment memory start address, 13.1kB of consecutive space required
                        ;                                   add 2.5 kB if I_flag = 2
0400 =                  code_segment = $400  
                        
                        ;self modifying code may be disabled to allow running in ROM
                        ;0=part of the code is self modifying and must reside in RAM
                        ;1=tests disabled: branch range
0000 =                  disable_selfmod = 0
                        
                        ;report errors through I/O channel (0=use standard self trap loops, 1=include
                        ;report.i65 as I/O channel, add 3.5 kB)
0000 =                  report = 0
                        
                        ;RAM integrity test option. Checks for undesired RAM writes.
                        ;set lowest non RAM or RAM mirror address page (-1=disable, 0=64k, $40=16k)
                        ;leave disabled if a monitor, OS or background interrupt is allowed to alter RAM
ffff =                  ram_top = -1
                        
                        ;disable test decimal mode ADC & SBC, 0=enable, 1=disable,
                        ;2=disable including decimal flag in processor status
0002 =                  disable_decimal = 2
                        
                                noopt       ;do not take shortcuts
                        
                        ;macros for error & success traps to allow user modification
                        ;example:
                        ;trap    macro
                        ;        jsr my_error_handler
                        ;        endm
                        ;trap_eq macro
                        ;        bne skip\?
                        ;        trap           ;failed equal (zero)
                        ;skip\?
                        ;        endm
                        ;
                        ; my_error_handler should pop the calling address from the stack and report it.
                        ; putting larger portions of code (more than 3 bytes) inside the trap macro
                        ; may lead to branch range problems for some tests.
                            if report = 0
                        trap    macro
                                jmp *           ;failed anyway
                                endm
                        trap_eq macro
                                beq *           ;failed equal (zero)
                                endm
                        trap_ne macro
                                bne *           ;failed not equal (non zero)
                                endm
                        trap_cs macro
                                bcs *           ;failed carry set
                                endm
                        trap_cc macro
                                bcc *           ;failed carry clear
                                endm
                        trap_mi macro
                                bmi *           ;failed minus (bit 7 set)
                                endm
                        trap_pl macro
                                bpl *           ;failed plus (bit 7 clear)
                                endm
                        trap_vs macro
                                bvs *           ;failed overflow set
                                endm
                        trap_vc macro
                                bvc *           ;failed overflow clear
                                endm
                        ; please observe that during the test the stack gets invalidated
                        ; therefore a RTS inside the success macro is not possible
                        success macro
                                jmp *           ;test passed, no errors
                                endm
                            endif
                            if report = 1
                        trap    macro
                                jsr report_error
                                endm
                        trap_eq macro
                                bne skip\?
                                trap           ;failed equal (zero)
                        skip\?
                                endm
                        trap_ne macro
                                beq skip\?
                                trap            ;failed not equal (non zero)
                        skip\?
                                endm
                        trap_cs macro
                                bcc skip\?
                                trap            ;failed carry set
                        skip\?
                                endm
                        trap_cc macro
                                bcs skip\?
                                trap            ;failed carry clear
                        skip\?
                                endm
                        trap_mi macro
                                bpl skip\?
                                trap            ;failed minus (bit 7 set)
                        skip\?
                                endm
                        trap_pl macro
                                bmi skip\?
                                trap            ;failed plus (bit 7 clear)
                        skip\?
                                endm
                        trap_vs macro
                                bvc skip\?
                                trap            ;failed overflow set
                        skip\?
                                endm
                        trap_vc macro
                                bvs skip\?
                                trap            ;failed overflow clear
                        skip\?
                                endm
                        ; please observe that during the test the stack gets invalidated
                        ; therefore a RTS inside the success macro is not possible
                        success macro
                                jsr report_success
                                endm
                            endif
                        
                        
0001 =                  carry   equ %00000001   ;flag bits in status
0002 =                  zero    equ %00000010
0004 =                  intdis  equ %00000100
0008 =                  decmode equ %00001000
0010 =                  break   equ %00010000
0020 =                  reserv  equ %00100000
0040 =                  overfl  equ %01000000
0080 =                  minus   equ %10000000
                        
0001 =                  fc      equ carry
0002 =                  fz      equ zero
0003 =                  fzc     equ carry+zero
0040 =                  fv      equ overfl
0042 =                  fvz     equ overfl+zero
0080 =                  fn      equ minus
0081 =                  fnc     equ minus+carry
0082 =                  fnz     equ minus+zero
0083 =                  fnzc    equ minus+zero+carry
00c0 =                  fnv     equ minus+overfl
                        
0030 =                  fao     equ break+reserv    ;bits always on after PHP, BRK
0034 =                  fai     equ fao+intdis      ;+ forced interrupt disable
0038 =                  faod    equ fao+decmode     ;+ ignore decimal
003c =                  faid    equ fai+decmode     ;+ ignore decimal
00ff =                  m8      equ $ff             ;8 bit mask
00fb =                  m8i     equ $ff&~intdis     ;8 bit mask - interrupt disable
                        
                        ;macros to allow masking of status bits.
                        ;masking test of decimal bit
                        ;masking of interrupt enable/disable on load and compare
                        ;masking of always on bits after PHP or BRK (unused & break) on compare
                            if disable_decimal < 2
                                if I_flag = 0
                        load_flag   macro
                                    lda #\1&m8i         ;force enable interrupts (mask I)
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8i   ;I_flag is always enabled + always on bits
                                    endm
                        eor_flag    macro
                                    eor #(\1&m8i|fao)   ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 1
                        load_flag   macro
                                    lda #\1|intdis      ;force disable interrupts
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fai)&m8    ;I_flag is always disabled + always on bits
                                    endm
                        eor_flag    macro
                                    eor #(\1|fai)       ;invert expected flags + always on bits + I
                                    endm
                                endif
                                if I_flag = 2
                        load_flag   macro
                                    lda #\1
                                    ora flag_I_on       ;restore I-flag
                                    and flag_I_off
                                    endm
                        cmp_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    cmp #(\1|fao)&m8i   ;expected flags + always on bits, mask I
                                    endm
                        eor_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    eor #(\1&m8i|fao)   ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 3
                        load_flag   macro
                                    lda #\1             ;allow test to change I-flag (no mask)
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8    ;expected flags + always on bits
                                    endm
                        eor_flag    macro
                                    eor #\1|fao         ;invert expected flags + always on bits
                                    endm
                                endif
                            else
                                if I_flag = 0
                        load_flag   macro
                                    lda #\1&m8i         ;force enable interrupts (mask I)
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faod)&m8i  ;I_flag is always enabled + always on bits
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #(\1&m8i|faod)  ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 1
                        load_flag   macro
                                    lda #\1|intdis      ;force disable interrupts
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faid)&m8   ;I_flag is always disabled + always on bits
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #(\1|faid)      ;invert expected flags + always on bits + I
                                    endm
                                endif
                                if I_flag = 2
                        load_flag   macro
                                    lda #\1
                                    ora flag_I_on       ;restore I-flag
                                    and flag_I_off
                                    endm
                        cmp_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faod)&m8i  ;expected flags + always on bits, mask I
                                    endm
                        eor_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #(\1&m8i|faod)  ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 3
                        load_flag   macro
                                    lda #\1             ;allow test to change I-flag (no mask)
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faod)&m8   ;expected flags + always on bits
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #\1|faod        ;invert expected flags + always on bits
                                    endm
                                endif
                            endif
                        
                        ;macros to set (register|memory|zeropage) & status
                        set_stat    macro       ;setting flags in the processor status register
                                    load_flag \1
                                    pha         ;use stack to load status
                                    plp
                                    endm
                        
                        set_a       macro       ;precharging accu & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda #\1     ;precharge accu
                                    plp
                                    endm
                        
                        set_x       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldx #\1     ;precharge index x
                                    plp
                                    endm
                        
                        set_y       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldy #\1     ;precharge index y
                                    plp
                                    endm
                        
                        set_ax      macro       ;precharging indexed accu & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;precharge accu
                                    plp
                                    endm
                        
                        set_ay      macro       ;precharging indexed accu & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,y    ;precharge accu
                                    plp
                                    endm
                        
                        set_z       macro       ;precharging indexed zp & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to zeropage
                                    sta zpt
                                    plp
                                    endm
                        
                        set_zx      macro       ;precharging zp,x & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed zeropage
                                    sta zpt,x
                                    plp
                                    endm
                        
                        set_abs     macro       ;precharging indexed memory & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to memory
                                    sta abst
                                    plp
                                    endm
                        
                        set_absx    macro       ;precharging abs,x & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed memory
                                    sta abst,x
                                    plp
                                    endm
                        
                        ;macros to test (register|memory|zeropage) & status & (mask)
                        tst_stat    macro       ;testing flags in the processor status register
                                    php         ;save status
                                    pla         ;use stack to retrieve status
                                    pha
                                    cmp_flag \1
                                    trap_ne
                                    plp         ;restore status
                                    endm
                                    
                        tst_a       macro       ;testing result in accu & flags
                                    php         ;save flags
                                    cmp #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_x       macro       ;testing result in x index & flags
                                    php         ;save flags
                                    cpx #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_y       macro       ;testing result in y index & flags
                                    php         ;save flags
                                    cpy #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_ax      macro       ;indexed testing result in accu & flags
                                    php         ;save flags
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne     ;
                                    endm
                        
                        tst_ay      macro       ;indexed testing result in accu & flags
                                    php         ;save flags
                                    cmp \1,y    ;test result
                                    trap_ne     ;
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,y    ;test flags
                                    trap_ne
                                    endm
                                
                        tst_z       macro       ;indexed testing result in zp & flags
                                    php         ;save flags
                                    lda zpt
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_zx      macro       ;testing result in zp,x & flags
                                    php         ;save flags
                                    lda zpt,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_abs     macro       ;indexed testing result in memory & flags
                                    php         ;save flags
                                    lda abst
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_absx    macro       ;testing result in abs,x & flags
                                    php         ;save flags
                                    lda abst,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                                    
                        ; RAM integrity test
                        ;   verifies that none of the previous tests has altered RAM outside of the
                        ;   designated write areas.
                        ;   uses zpt word as indirect pointer, zpt+2 word as checksum
                                if ram_top > -1
                        check_ram   macro 
                                    cld
                                    lda #0
                                    sta zpt         ;set low byte of indirect pointer
                                    sta zpt+3       ;checksum high byte
                                  if disable_selfmod = 0
                                    sta range_adr   ;reset self modifying code
                                  endif
                                    clc
                                    ldx #zp_bss-zero_page ;zeropage - write test area
                        ccs3\?      adc zero_page,x
                                    bcc ccs2\?
                                    inc zpt+3       ;carry to high byte
                                    clc
                        ccs2\?      inx
                                    bne ccs3\?
                                    ldx #hi(abs1)   ;set high byte of indirect pointer
                                    stx zpt+1
                                    ldy #lo(abs1)   ;data after write & execute test area
                        ccs5\?      adc (zpt),y
                                    bcc ccs4\?
                                    inc zpt+3       ;carry to high byte
                                    clc
                        ccs4\?      iny
                                    bne ccs5\?
                                    inx             ;advance RAM high address
                                    stx zpt+1
                                    cpx #ram_top
                                    bne ccs5\?
                                    sta zpt+2       ;checksum low is
                                    cmp ram_chksm   ;checksum low expected
                                    trap_ne         ;checksum mismatch
                                    lda zpt+3       ;checksum high is
                                    cmp ram_chksm+1 ;checksum high expected
                                    trap_ne         ;checksum mismatch
                                    endm            
                                else
                        check_ram   macro
                                    ;RAM check disabled - RAM size not set
                                    endm
                                endif
                        
                        next_test   macro           ;make sure, tests don't jump the fence
                                    lda test_case   ;previous test
                                    cmp #test_num
                                    trap_ne         ;test is out of sequence
                        test_num = test_num + 1
                                    lda #test_num   ;*** next tests' number
                                    sta test_case
                                    ;check_ram       ;uncomment to find altered RAM after each test
                                    endm
                        
                            if load_data_direct = 1
                                data
                            else
                                bss                 ;uninitialized segment, copy of data at end of code!
                            endif
                        ;        org zero_page
0000 =                           org 0               ;edited to provide binaries loading from 0
0000 : 4c0004                    jmp $400
0003 : 00000000000000            ds  zero_page-3
                        ;break test interrupt save
000a : 00               irq_a   ds  1               ;a register
000b : 00               irq_x   ds  1               ;x register
                            if I_flag = 2
                        ;masking for I bit in status
                        flag_I_on   ds  1           ;or mask to load flags   
                        flag_I_off  ds  1           ;and mask to load flags
                            endif
000c :                  zpt                         ;6 bytes store/modify test area
                        ;add/subtract operand generation and result/flag prediction
000c : 00               adfc    ds  1               ;carry flag before op
000d : 00               ad1     ds  1               ;operand 1 - accumulator
000e : 00               ad2     ds  1               ;operand 2 - memory / immediate
000f : 00               adrl    ds  1               ;expected result bits 0-7
0010 : 00               adrh    ds  1               ;expected result bit 8 (carry)
0011 : 00               adrf    ds  1               ;expected flags NV0000ZC (only binary mode)
0012 : 00               sb2     ds  1               ;operand 2 complemented for subtract
0013 :                  zp_bss
0013 : 8001             zps     db  $80,1           ;additional shift pattern to test zero result & flag
0015 : c3824100         zp1     db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
0019 : 7f               zp7f    db  $7f             ;test pattern for compare  
                        ;logical zeropage operands
001a : 001f7180         zpOR    db  0,$1f,$71,$80   ;test pattern for OR
001e : 0fff7f80         zpAN    db  $0f,$ff,$7f,$80 ;test pattern for AND
0022 : ff0f8f8f         zpEO    db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
0026 : 1802             ind1    dw  abs1            ;indirect pointer to pattern in absolute memory
0028 : 1902                     dw  abs1+1
002a : 1a02                     dw  abs1+2
002c : 1b02                     dw  abs1+3
002e : 1c02                     dw  abs7f
0030 : 2001             inw1    dw  abs1-$f8        ;indirect pointer for wrap-test pattern
0032 : 0302             indt    dw  abst            ;indirect pointer to store area in absolute memory
0034 : 0402                     dw  abst+1
0036 : 0502                     dw  abst+2
0038 : 0602                     dw  abst+3
003a : 0b01             inwt    dw  abst-$f8        ;indirect pointer for wrap-test store
003c : 5f02             indAN   dw  absAN           ;indirect pointer to AND pattern in absolute memory
003e : 6002                     dw  absAN+1
0040 : 6102                     dw  absAN+2
0042 : 6202                     dw  absAN+3
0044 : 6302             indEO   dw  absEO           ;indirect pointer to EOR pattern in absolute memory
0046 : 6402                     dw  absEO+1
0048 : 6502                     dw  absEO+2
004a : 6602                     dw  absEO+3
004c : 5b02             indOR   dw  absOR           ;indirect pointer to OR pattern in absolute memory
004e : 5c02                     dw  absOR+1
0050 : 5d02                     dw  absOR+2
0052 : 5e02                     dw  absOR+3
                        ;add/subtract indirect pointers
0054 : 0302             adi2    dw  ada2            ;indirect pointer to operand 2 in absolute memory
0056 : 0402             sbi2    dw  sba2            ;indirect pointer to complemented operand 2 (SBC)
0058 : 0401             adiy2   dw  ada2-$ff        ;with offset for indirect indexed
005a : 0501             sbiy2   dw  sba2-$ff
005c :                  zp_bss_end
                           
0200 =                          org data_segment
0200 : 00               test_case   ds  1           ;current test number
0201 : 0000             ram_chksm   ds  2           ;checksum for RAM integrity test
                        ;add/subtract operand copy - abs tests write area
0203 :                  abst                        ;6 bytes store/modify test area
0203 : 00               ada2    ds  1               ;operand 2
0204 : 00               sba2    ds  1               ;operand 2 complemented for subtract
0205 : 00000000                 ds  4               ;fill remaining bytes
0209 :                  data_bss
                            if load_data_direct = 1
0209 : 2900             ex_andi and #0              ;execute immediate opcodes
020b : 60                       rts
020c : 4900             ex_eori eor #0              ;execute immediate opcodes
020e : 60                       rts
020f : 0900             ex_orai ora #0              ;execute immediate opcodes
0211 : 60                       rts
0212 : 6900             ex_adci adc #0              ;execute immediate opcodes
0214 : 60                       rts
0215 : e900             ex_sbci sbc #0              ;execute immediate opcodes
0217 : 60                       rts
                            else
                        ex_andi ds  3
                        ex_eori ds  3
                        ex_orai ds  3
                        ex_adci ds  3
                        ex_sbci ds  3
                            endif
                        ;zps    db  $80,1           ;additional shift patterns test zero result & flag
0218 : c3824100         abs1    db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
021c : 7f               abs7f   db  $7f             ;test pattern for compare
                        ;loads
021d : 80800002         fLDx    db  fn,fn,0,fz              ;expected flags for load
                        ;shifts
0221 :                  rASL                                ;expected result ASL & ROL -carry
0221 : 000286048200     rROL    db  0,2,$86,$04,$82,0
0227 : 010387058301     rROLc   db  1,3,$87,$05,$83,1       ;expected result ROL +carry
022d :                  rLSR                                ;expected result LSR & ROR -carry
022d : 400061412000     rROR    db  $40,0,$61,$41,$20,0
0233 : c080e1c1a080     rRORc   db  $c0,$80,$e1,$c1,$a0,$80 ;expected result ROR +carry
0239 :                  fASL                                ;expected flags for shifts
0239 : 030081018002     fROL    db  fzc,0,fnc,fc,fn,fz      ;no carry in
023f : 010081018000     fROLc   db  fc,0,fnc,fc,fn,0        ;carry in 
0245 :                  fLSR 
0245 : 000301000102     fROR    db  0,fzc,fc,0,fc,fz        ;no carry in
024b : 808181808180     fRORc   db  fn,fnc,fnc,fn,fnc,fn    ;carry in
                        ;increments (decrements)
0251 : 7f80ff0001       rINC    db  $7f,$80,$ff,0,1         ;expected result for INC/DEC
0256 : 0080800200       fINC    db  0,fn,fn,fz,0            ;expected flags for INC/DEC
                        ;logical memory operand
025b : 001f7180         absOR   db  0,$1f,$71,$80           ;test pattern for OR
025f : 0fff7f80         absAN   db  $0f,$ff,$7f,$80         ;test pattern for AND
0263 : ff0f8f8f         absEO   db  $ff,$0f,$8f,$8f         ;test pattern for EOR
                        ;logical accu operand
0267 : 00f11f00         absORa  db  0,$f1,$1f,0             ;test pattern for OR
026b : f0ffffff         absANa  db  $f0,$ff,$ff,$ff         ;test pattern for AND
026f : fff0f00f         absEOa  db  $ff,$f0,$f0,$0f         ;test pattern for EOR
                        ;logical results
0273 : 00ff7f80         absrlo  db  0,$ff,$7f,$80
0277 : 02800080         absflo  db  fz,fn,0,fn
027b :                  data_bss_end
                        
                        
                                code
0400 =                          org code_segment
0400 : d8               start   cld
0401 : a2ff                     ldx #$ff
0403 : 9a                       txs
0404 : a900                     lda #0          ;*** test 0 = initialize
0406 : 8d0002                   sta test_case
0000 =                  test_num = 0
                        
                        ;stop interrupts before initializing BSS
                            if I_flag = 1
                                sei
                            endif
                            
                        ;initialize I/O for report channel
                            if report = 1
                                jsr report_init
                            endif
                            
                        ;pretest small branch offset
0409 : a205                     ldx #5
040b : 4c3304                   jmp psb_test
040e :                  psb_bwok
040e : a005                     ldy #5
0410 : d008                     bne psb_forw
                                trap        ;branch should be taken
0412 : 4c1204          >        jmp *           ;failed anyway
                        
0415 : 88                       dey         ;forward landing zone
0416 : 88                       dey
0417 : 88                       dey
0418 : 88                       dey
0419 : 88                       dey
041a :                  psb_forw
041a : 88                       dey
041b : 88                       dey
041c : 88                       dey
041d : 88                       dey
041e : 88                       dey
041f : f017                     beq psb_fwok
                                trap        ;forward offset
0421 : 4c2104          >        jmp *           ;failed anyway
                        
                        
0424 : ca                       dex         ;backward landing zone
0425 : ca                       dex
0426 : ca                       dex
0427 : ca                       dex
0428 : ca                       dex
0429 :                  psb_back
0429 : ca                       dex
042a : ca                       dex
042b : ca                       dex
042c : ca                       dex
042d : ca                       dex
042e : f0de                     beq psb_bwok
                                trap        ;backward offset
0430 : 4c3004          >        jmp *           ;failed anyway
                        
0433 :                  psb_test
0433 : d0f4                     bne psb_back
                                trap        ;branch should be taken
0435 : 4c3504          >        jmp *           ;failed anyway
                        
0438 :                  psb_fwok
                                
                        ;initialize BSS segment
                            if load_data_direct != 1
                                ldx #zp_end-zp_init-1
                        ld_zp   lda zp_init,x
                                sta zp_bss,x
                                dex
                                bpl ld_zp
                                ldx #data_end-data_init-1
                        ld_data lda data_init,x
                                sta data_bss,x
                                dex
                                bpl ld_data
                              if ROM_vectors = 1
                                ldx #5
                        ld_vect lda vec_init,x
                                sta vec_bss,x
                                dex
                                bpl ld_vect
                              endif
                            endif
                        
                        ;retain status of interrupt flag
                            if I_flag = 2
                                php
                                pla
                                and #4          ;isolate flag
                                sta flag_I_on   ;or mask
                                eor #lo(~4)     ;reverse
                                sta flag_I_off  ;and mask
                            endif
                                
                        ;generate checksum for RAM integrity test
                            if ram_top > -1
                                lda #0 
                                sta zpt         ;set low byte of indirect pointer
                                sta ram_chksm+1 ;checksum high byte
                              if disable_selfmod = 0
                                sta range_adr   ;reset self modifying code
                              endif
                                clc
                                ldx #zp_bss-zero_page ;zeropage - write test area
                        gcs3    adc zero_page,x
                                bcc gcs2
                                inc ram_chksm+1 ;carry to high byte
                                clc
                        gcs2    inx
                                bne gcs3
                                ldx #hi(abs1)   ;set high byte of indirect pointer
                                stx zpt+1
                                ldy #lo(abs1)   ;data after write & execute test area
                        gcs5    adc (zpt),y
                                bcc gcs4
                                inc ram_chksm+1 ;carry to high byte
                                clc
                        gcs4    iny
                                bne gcs5
                                inx             ;advance RAM high address
                                stx zpt+1
                                cpx #ram_top
                                bne gcs5
                                sta ram_chksm   ;checksum complete
                            endif
                                next_test            
0438 : ad0002          >            lda test_case   ;previous test
043b : c900            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
043d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0001 =                 >test_num = test_num + 1
043f : a901            >            lda #test_num   ;*** next tests' number
0441 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                            if disable_selfmod = 0
                        ;testing relative addressing with BEQ
0444 : a0fe                     ldy #$fe        ;testing maximum range, not -1/-2 (invalid/self adr)
0446 :                  range_loop
0446 : 88                       dey             ;next relative address
0447 : 98                       tya
0448 : aa                       tax             ;precharge count to end of loop
0449 : 1008                     bpl range_fw    ;calculate relative address
044b : 18                       clc             ;avoid branch self or to relative address of branch
044c : 6902                     adc #2
044e : ea                       nop             ;offset landing zone - tolerate +/-5 offset to branch
044f : ea                       nop
0450 : ea                       nop
0451 : ea                       nop
0452 : ea                       nop
0453 :                  range_fw
0453 : ea                       nop
0454 : ea                       nop
0455 : ea                       nop
0456 : ea                       nop
0457 : ea                       nop
0458 : 497f                     eor #$7f        ;complement except sign
045a : 8de604                   sta range_adr   ;load into test target
045d : a900                     lda #0          ;should set zero flag in status register
045f : 4ce504                   jmp range_op
                                
0462 : ca                       dex             ; offset landing zone - backward branch too far
0463 : ca                       dex
0464 : ca                       dex
0465 : ca                       dex
0466 : ca                       dex
                                ;relative address target field with branch under test in the middle
0467 : ca                       dex             ;-128 - max backward
0468 : ca                       dex
0469 : ca                       dex
046a : ca                       dex
046b : ca                       dex
046c : ca                       dex
046d : ca                       dex
046e : ca                       dex
046f : ca                       dex             ;-120
0470 : ca                       dex
0471 : ca                       dex
0472 : ca                       dex
0473 : ca                       dex
0474 : ca                       dex
0475 : ca                       dex
0476 : ca                       dex
0477 : ca                       dex
0478 : ca                       dex
0479 : ca                       dex             ;-110
047a : ca                       dex
047b : ca                       dex
047c : ca                       dex
047d : ca                       dex
047e : ca                       dex
047f : ca                       dex
0480 : ca                       dex
0481 : ca                       dex
0482 : ca                       dex
0483 : ca                       dex             ;-100
0484 : ca                       dex
0485 : ca                       dex
0486 : ca                       dex
0487 : ca                       dex
0488 : ca                       dex
0489 : ca                       dex
048a : ca                       dex
048b : ca                       dex
048c : ca                       dex
048d : ca                       dex             ;-90
048e : ca                       dex
048f : ca                       dex
0490 : ca                       dex
0491 : ca                       dex
0492 : ca                       dex
0493 : ca                       dex
0494 : ca                       dex
0495 : ca                       dex
0496 : ca                       dex
0497 : ca                       dex             ;-80
0498 : ca                       dex
0499 : ca                       dex
049a : ca                       dex
049b : ca                       dex
049c : ca                       dex
049d : ca                       dex
049e : ca                       dex
049f : ca                       dex
04a0 : ca                       dex
04a1 : ca                       dex             ;-70
04a2 : ca                       dex
04a3 : ca                       dex
04a4 : ca                       dex
04a5 : ca                       dex
04a6 : ca                       dex
04a7 : ca                       dex
04a8 : ca                       dex
04a9 : ca                       dex
04aa : ca                       dex
04ab : ca                       dex             ;-60
04ac : ca                       dex
04ad : ca                       dex
04ae : ca                       dex
04af : ca                       dex
04b0 : ca                       dex
04b1 : ca                       dex
04b2 : ca                       dex
04b3 : ca                       dex
04b4 : ca                       dex
04b5 : ca                       dex             ;-50
04b6 : ca                       dex
04b7 : ca                       dex
04b8 : ca                       dex
04b9 : ca                       dex
04ba : ca                       dex
04bb : ca                       dex
04bc : ca                       dex
04bd : ca                       dex
04be : ca                       dex
04bf : ca                       dex             ;-40
04c0 : ca                       dex
04c1 : ca                       dex
04c2 : ca                       dex
04c3 : ca                       dex
04c4 : ca                       dex
04c5 : ca                       dex
04c6 : ca                       dex
04c7 : ca                       dex
04c8 : ca                       dex
04c9 : ca                       dex             ;-30
04ca : ca                       dex
04cb : ca                       dex
04cc : ca                       dex
04cd : ca                       dex
04ce : ca                       dex
04cf : ca                       dex
04d0 : ca                       dex
04d1 : ca                       dex
04d2 : ca                       dex
04d3 : ca                       dex             ;-20
04d4 : ca                       dex
04d5 : ca                       dex
04d6 : ca                       dex
04d7 : ca                       dex
04d8 : ca                       dex
04d9 : ca                       dex
04da : ca                       dex
04db : ca                       dex
04dc : ca                       dex
04dd : ca                       dex             ;-10
04de : ca                       dex
04df : ca                       dex
04e0 : ca                       dex
04e1 : ca                       dex
04e2 : ca                       dex
04e3 : ca                       dex
04e4 : ca                       dex             ;-3
04e5 :                  range_op                ;test target with zero flag=0, z=1 if previous dex
04e6 =                  range_adr   = *+1       ;modifiable relative address
04e5 : f03e                     beq *+64        ;+64 if called without modification
04e7 : ca                       dex             ;+0
04e8 : ca                       dex
04e9 : ca                       dex
04ea : ca                       dex
04eb : ca                       dex
04ec : ca                       dex
04ed : ca                       dex
04ee : ca                       dex
04ef : ca                       dex
04f0 : ca                       dex
04f1 : ca                       dex             ;+10
04f2 : ca                       dex
04f3 : ca                       dex
04f4 : ca                       dex
04f5 : ca                       dex
04f6 : ca                       dex
04f7 : ca                       dex
04f8 : ca                       dex
04f9 : ca                       dex
04fa : ca                       dex
04fb : ca                       dex             ;+20
04fc : ca                       dex
04fd : ca                       dex
04fe : ca                       dex
04ff : ca                       dex
0500 : ca                       dex
0501 : ca                       dex
0502 : ca                       dex
0503 : ca                       dex
0504 : ca                       dex
0505 : ca                       dex             ;+30
0506 : ca                       dex
0507 : ca                       dex
0508 : ca                       dex
0509 : ca                       dex
050a : ca                       dex
050b : ca                       dex
050c : ca                       dex
050d : ca                       dex
050e : ca                       dex
050f : ca                       dex             ;+40
0510 : ca                       dex
0511 : ca                       dex
0512 : ca                       dex
0513 : ca                       dex
0514 : ca                       dex
0515 : ca                       dex
0516 : ca                       dex
0517 : ca                       dex
0518 : ca                       dex
0519 : ca                       dex             ;+50
051a : ca                       dex
051b : ca                       dex
051c : ca                       dex
051d : ca                       dex
051e : ca                       dex
051f : ca                       dex
0520 : ca                       dex
0521 : ca                       dex
0522 : ca                       dex
0523 : ca                       dex             ;+60
0524 : ca                       dex
0525 : ca                       dex
0526 : ca                       dex
0527 : ca                       dex
0528 : ca                       dex
0529 : ca                       dex
052a : ca                       dex
052b : ca                       dex
052c : ca                       dex
052d : ca                       dex             ;+70
052e : ca                       dex
052f : ca                       dex
0530 : ca                       dex
0531 : ca                       dex
0532 : ca                       dex
0533 : ca                       dex
0534 : ca                       dex
0535 : ca                       dex
0536 : ca                       dex
0537 : ca                       dex             ;+80
0538 : ca                       dex
0539 : ca                       dex
053a : ca                       dex
053b : ca                       dex
053c : ca                       dex
053d : ca                       dex
053e : ca                       dex
053f : ca                       dex
0540 : ca                       dex
0541 : ca                       dex             ;+90
0542 : ca                       dex
0543 : ca                       dex
0544 : ca                       dex
0545 : ca                       dex
0546 : ca                       dex
0547 : ca                       dex
0548 : ca                       dex
0549 : ca                       dex
054a : ca                       dex
054b : ca                       dex             ;+100
054c : ca                       dex
054d : ca                       dex
054e : ca                       dex
054f : ca                       dex
0550 : ca                       dex
0551 : ca                       dex
0552 : ca                       dex
0553 : ca                       dex
0554 : ca                       dex
0555 : ca                       dex             ;+110
0556 : ca                       dex
0557 : ca                       dex
0558 : ca                       dex
0559 : ca                       dex
055a : ca                       dex
055b : ca                       dex
055c : ca                       dex
055d : ca                       dex
055e : ca                       dex
055f : ca                       dex             ;+120
0560 : ca                       dex
0561 : ca                       dex
0562 : ca                       dex
0563 : ca                       dex
0564 : ca                       dex
0565 : ca                       dex
0566 : ea                       nop             ;offset landing zone - forward branch too far
0567 : ea                       nop
0568 : ea                       nop
0569 : ea                       nop
056a : ea                       nop
056b : f008                     beq range_ok    ;+127 - max forward
                                trap            ; bad range
056d : 4c6d05          >        jmp *           ;failed anyway
                        
0570 : ea                       nop             ;offset landing zone - tolerate +/-5 offset to branch
0571 : ea                       nop
0572 : ea                       nop
0573 : ea                       nop
0574 : ea                       nop
0575 :                  range_ok
0575 : ea                       nop
0576 : ea                       nop
0577 : ea                       nop
0578 : ea                       nop
0579 : ea                       nop
057a : c000                     cpy #0
057c : f003                     beq range_end   
057e : 4c4604                   jmp range_loop
0581 :                  range_end               ;range test successful
                            endif
                                next_test
0581 : ad0002          >            lda test_case   ;previous test
0584 : c901            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0586 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0002 =                 >test_num = test_num + 1
0588 : a902            >            lda #test_num   ;*** next tests' number
058a : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ;partial test BNE & CMP, CPX, CPY immediate
058d : c001                     cpy #1          ;testing BNE true
058f : d003                     bne test_bne
                                trap 
0591 : 4c9105          >        jmp *           ;failed anyway
                        
0594 :                  test_bne
0594 : a900                     lda #0 
0596 : c900                     cmp #0          ;test compare immediate 
                                trap_ne
0598 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                trap_cc
059a : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_mi
059c : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
059e : c901                     cmp #1
                                trap_eq 
05a0 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_cs
05a2 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_pl
05a4 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
05a6 : aa                       tax 
05a7 : e000                     cpx #0          ;test compare x immediate
                                trap_ne
05a9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                trap_cc
05ab : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_mi
05ad : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
05af : e001                     cpx #1
                                trap_eq 
05b1 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_cs
05b3 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_pl
05b5 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
05b7 : a8                       tay 
05b8 : c000                     cpy #0          ;test compare y immediate
                                trap_ne
05ba : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                trap_cc
05bc : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_mi
05be : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
05c0 : c001                     cpy #1
                                trap_eq 
05c2 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_cs
05c4 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_pl
05c6 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                next_test
05c8 : ad0002          >            lda test_case   ;previous test
05cb : c902            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
05cd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0003 =                 >test_num = test_num + 1
05cf : a903            >            lda #test_num   ;*** next tests' number
05d1 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        ;testing stack operations PHA PHP PLA PLP
                                    
05d4 : a2ff                     ldx #$ff        ;initialize stack
05d6 : 9a                       txs
05d7 : a955                     lda #$55
05d9 : 48                       pha
05da : a9aa                     lda #$aa
05dc : 48                       pha
05dd : cdfe01                   cmp $1fe        ;on stack ?
                                trap_ne
05e0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
05e2 : ba                       tsx
05e3 : 8a                       txa             ;overwrite accu
05e4 : c9fd                     cmp #$fd        ;sp decremented?
                                trap_ne
05e6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
05e8 : 68                       pla
05e9 : c9aa                     cmp #$aa        ;successful retreived from stack?
                                trap_ne
05eb : d0fe            >        bne *           ;failed not equal (non zero)
                        
05ed : 68                       pla
05ee : c955                     cmp #$55
                                trap_ne
05f0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
05f2 : cdff01                   cmp $1ff        ;remains on stack?
                                trap_ne
05f5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
05f7 : ba                       tsx
05f8 : e0ff                     cpx #$ff        ;sp incremented?
                                trap_ne
05fa : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
05fc : ad0002          >            lda test_case   ;previous test
05ff : c903            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0601 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0004 =                 >test_num = test_num + 1
0603 : a904            >            lda #test_num   ;*** next tests' number
0605 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ;testing branch decisions BPL BMI BVC BVS BCC BCS BNE BEQ
                                set_stat $ff    ;all on
                       >            load_flag $ff    
0608 : a9ff            >            lda #$ff                 ;allow test to change I-flag (no mask)
                       >
060a : 48              >            pha         ;use stack to load status
060b : 28              >            plp
                        
060c : 101a                     bpl nbr1        ;branches should not be taken
060e : 501b                     bvc nbr2
0610 : 901c                     bcc nbr3
0612 : d01d                     bne nbr4
0614 : 3003                     bmi br1         ;branches should be taken
                                trap 
0616 : 4c1606          >        jmp *           ;failed anyway
                        
0619 : 7003             br1     bvs br2
                                trap 
061b : 4c1b06          >        jmp *           ;failed anyway
                        
061e : b003             br2     bcs br3
                                trap 
0620 : 4c2006          >        jmp *           ;failed anyway
                        
0623 : f00f             br3     beq br4
                                trap 
0625 : 4c2506          >        jmp *           ;failed anyway
                        
0628 :                  nbr1
                                trap            ;previous bpl taken 
0628 : 4c2806          >        jmp *           ;failed anyway
                        
062b :                  nbr2
                                trap            ;previous bvc taken
062b : 4c2b06          >        jmp *           ;failed anyway
                        
062e :                  nbr3
                                trap            ;previous bcc taken
062e : 4c2e06          >        jmp *           ;failed anyway
                        
0631 :                  nbr4
                                trap            ;previous bne taken
0631 : 4c3106          >        jmp *           ;failed anyway
                        
0634 : 08               br4     php
0635 : ba                       tsx
0636 : e0fe                     cpx #$fe        ;sp after php?
                                trap_ne
0638 : d0fe            >        bne *           ;failed not equal (non zero)
                        
063a : 68                       pla
                                cmp_flag $ff    ;returned all flags on?
063b : 0908            >            ora #decmode        ;ignore decimal mode bit
063d : c9ff            >            cmp #($ff    |faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
063f : d0fe            >        bne *           ;failed not equal (non zero)
                        
0641 : ba                       tsx
0642 : e0ff                     cpx #$ff        ;sp after php?
                                trap_ne
0644 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0      ;all off
                       >            load_flag 0      
0646 : a900            >            lda #0                   ;allow test to change I-flag (no mask)
                       >
0648 : 48              >            pha         ;use stack to load status
0649 : 28              >            plp
                        
064a : 301a                     bmi nbr11       ;branches should not be taken
064c : 701b                     bvs nbr12
064e : b01c                     bcs nbr13
0650 : f01d                     beq nbr14
0652 : 1003                     bpl br11        ;branches should be taken
                                trap 
0654 : 4c5406          >        jmp *           ;failed anyway
                        
0657 : 5003             br11    bvc br12
                                trap 
0659 : 4c5906          >        jmp *           ;failed anyway
                        
065c : 9003             br12    bcc br13
                                trap 
065e : 4c5e06          >        jmp *           ;failed anyway
                        
0661 : d00f             br13    bne br14
                                trap 
0663 : 4c6306          >        jmp *           ;failed anyway
                        
0666 :                  nbr11
                                trap            ;previous bmi taken 
0666 : 4c6606          >        jmp *           ;failed anyway
                        
0669 :                  nbr12
                                trap            ;previous bvs taken 
0669 : 4c6906          >        jmp *           ;failed anyway
                        
066c :                  nbr13
                                trap            ;previous bcs taken 
066c : 4c6c06          >        jmp *           ;failed anyway
                        
066f :                  nbr14
                                trap            ;previous beq taken 
066f : 4c6f06          >        jmp *           ;failed anyway
                        
0672 : 08               br14    php
0673 : 68                       pla
                                cmp_flag 0      ;flags off except break (pushed by sw) + reserved?
0674 : 0908            >            ora #decmode        ;ignore decimal mode bit
0676 : c938            >            cmp #(0      |faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0678 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                ;crosscheck flags
                                set_stat zero
                       >            load_flag zero
067a : a902            >            lda #zero             ;allow test to change I-flag (no mask)
                       >
067c : 48              >            pha         ;use stack to load status
067d : 28              >            plp
                        
067e : d002                     bne brzs1
0680 : f003                     beq brzs2
0682 :                  brzs1
                                trap            ;branch zero/non zero
0682 : 4c8206          >        jmp *           ;failed anyway
                        
0685 : b002             brzs2   bcs brzs3
0687 : 9003                     bcc brzs4
0689 :                  brzs3
                                trap            ;branch carry/no carry
0689 : 4c8906          >        jmp *           ;failed anyway
                        
068c : 3002             brzs4   bmi brzs5
068e : 1003                     bpl brzs6
0690 :                  brzs5
                                trap            ;branch minus/plus
0690 : 4c9006          >        jmp *           ;failed anyway
                        
0693 : 7002             brzs6   bvs brzs7
0695 : 5003                     bvc brzs8
0697 :                  brzs7
                                trap            ;branch overflow/no overflow
0697 : 4c9706          >        jmp *           ;failed anyway
                        
069a :                  brzs8
                                set_stat carry
                       >            load_flag carry
069a : a901            >            lda #carry             ;allow test to change I-flag (no mask)
                       >
069c : 48              >            pha         ;use stack to load status
069d : 28              >            plp
                        
069e : f002                     beq brcs1
06a0 : d003                     bne brcs2
06a2 :                  brcs1
                                trap            ;branch zero/non zero
06a2 : 4ca206          >        jmp *           ;failed anyway
                        
06a5 : 9002             brcs2   bcc brcs3
06a7 : b003                     bcs brcs4
06a9 :                  brcs3
                                trap            ;branch carry/no carry
06a9 : 4ca906          >        jmp *           ;failed anyway
                        
06ac : 3002             brcs4   bmi brcs5
06ae : 1003                     bpl brcs6
06b0 :                  brcs5
                                trap            ;branch minus/plus
06b0 : 4cb006          >        jmp *           ;failed anyway
                        
06b3 : 7002             brcs6   bvs brcs7
06b5 : 5003                     bvc brcs8
06b7 :                  brcs7
                                trap            ;branch overflow/no overflow
06b7 : 4cb706          >        jmp *           ;failed anyway
                        
                        
06ba :                  brcs8
                                set_stat minus
                       >            load_flag minus
06ba : a980            >            lda #minus             ;allow test to change I-flag (no mask)
                       >
06bc : 48              >            pha         ;use stack to load status
06bd : 28              >            plp
                        
06be : f002                     beq brmi1
06c0 : d003                     bne brmi2
06c2 :                  brmi1
                                trap            ;branch zero/non zero
06c2 : 4cc206          >        jmp *           ;failed anyway
                        
06c5 : b002             brmi2   bcs brmi3
06c7 : 9003                     bcc brmi4
06c9 :                  brmi3
                                trap            ;branch carry/no carry
06c9 : 4cc906          >        jmp *           ;failed anyway
                        
06cc : 1002             brmi4   bpl brmi5
06ce : 3003                     bmi brmi6
06d0 :                  brmi5
                                trap            ;branch minus/plus
06d0 : 4cd006          >        jmp *           ;failed anyway
                        
06d3 : 7002             brmi6   bvs brmi7
06d5 : 5003                     bvc brmi8
06d7 :                  brmi7
                                trap            ;branch overflow/no overflow
06d7 : 4cd706          >        jmp *           ;failed anyway
                        
06da :                  brmi8
                                set_stat overfl
                       >            load_flag overfl
06da : a940            >            lda #overfl             ;allow test to change I-flag (no mask)
                       >
06dc : 48              >            pha         ;use stack to load status
06dd : 28              >            plp
                        
06de : f002                     beq brvs1
06e0 : d003                     bne brvs2
06e2 :                  brvs1
                                trap            ;branch zero/non zero
06e2 : 4ce206          >        jmp *           ;failed anyway
                        
06e5 : b002             brvs2   bcs brvs3
06e7 : 9003                     bcc brvs4
06e9 :                  brvs3
                                trap            ;branch carry/no carry
06e9 : 4ce906          >        jmp *           ;failed anyway
                        
06ec : 3002             brvs4   bmi brvs5
06ee : 1003                     bpl brvs6
06f0 :                  brvs5
                                trap            ;branch minus/plus
06f0 : 4cf006          >        jmp *           ;failed anyway
                        
06f3 : 5002             brvs6   bvc brvs7
06f5 : 7003                     bvs brvs8
06f7 :                  brvs7
                                trap            ;branch overflow/no overflow
06f7 : 4cf706          >        jmp *           ;failed anyway
                        
06fa :                  brvs8
                                set_stat $ff-zero
                       >            load_flag $ff-zero
06fa : a9fd            >            lda #$ff-zero             ;allow test to change I-flag (no mask)
                       >
06fc : 48              >            pha         ;use stack to load status
06fd : 28              >            plp
                        
06fe : f002                     beq brzc1
0700 : d003                     bne brzc2
0702 :                  brzc1
                                trap            ;branch zero/non zero
0702 : 4c0207          >        jmp *           ;failed anyway
                        
0705 : 9002             brzc2   bcc brzc3
0707 : b003                     bcs brzc4
0709 :                  brzc3
                                trap            ;branch carry/no carry
0709 : 4c0907          >        jmp *           ;failed anyway
                        
070c : 1002             brzc4   bpl brzc5
070e : 3003                     bmi brzc6
0710 :                  brzc5
                                trap            ;branch minus/plus
0710 : 4c1007          >        jmp *           ;failed anyway
                        
0713 : 5002             brzc6   bvc brzc7
0715 : 7003                     bvs brzc8
0717 :                  brzc7
                                trap            ;branch overflow/no overflow
0717 : 4c1707          >        jmp *           ;failed anyway
                        
071a :                  brzc8
                                set_stat $ff-carry
                       >            load_flag $ff-carry
071a : a9fe            >            lda #$ff-carry             ;allow test to change I-flag (no mask)
                       >
071c : 48              >            pha         ;use stack to load status
071d : 28              >            plp
                        
071e : d002                     bne brcc1
0720 : f003                     beq brcc2
0722 :                  brcc1
                                trap            ;branch zero/non zero
0722 : 4c2207          >        jmp *           ;failed anyway
                        
0725 : b002             brcc2   bcs brcc3
0727 : 9003                     bcc brcc4
0729 :                  brcc3
                                trap            ;branch carry/no carry
0729 : 4c2907          >        jmp *           ;failed anyway
                        
072c : 1002             brcc4   bpl brcc5
072e : 3003                     bmi brcc6
0730 :                  brcc5
                                trap            ;branch minus/plus
0730 : 4c3007          >        jmp *           ;failed anyway
                        
0733 : 5002             brcc6   bvc brcc7
0735 : 7003                     bvs brcc8
0737 :                  brcc7
                                trap            ;branch overflow/no overflow
0737 : 4c3707          >        jmp *           ;failed anyway
                        
073a :                  brcc8
                                set_stat $ff-minus
                       >            load_flag $ff-minus
073a : a97f            >            lda #$ff-minus             ;allow test to change I-flag (no mask)
                       >
073c : 48              >            pha         ;use stack to load status
073d : 28              >            plp
                        
073e : d002                     bne brpl1
0740 : f003                     beq brpl2
0742 :                  brpl1
                                trap            ;branch zero/non zero
0742 : 4c4207          >        jmp *           ;failed anyway
                        
0745 : 9002             brpl2   bcc brpl3
0747 : b003                     bcs brpl4
0749 :                  brpl3
                                trap            ;branch carry/no carry
0749 : 4c4907          >        jmp *           ;failed anyway
                        
074c : 3002             brpl4   bmi brpl5
074e : 1003                     bpl brpl6
0750 :                  brpl5
                                trap            ;branch minus/plus
0750 : 4c5007          >        jmp *           ;failed anyway
                        
0753 : 5002             brpl6   bvc brpl7
0755 : 7003                     bvs brpl8
0757 :                  brpl7
                                trap            ;branch overflow/no overflow
0757 : 4c5707          >        jmp *           ;failed anyway
                        
075a :                  brpl8
                                set_stat $ff-overfl
                       >            load_flag $ff-overfl
075a : a9bf            >            lda #$ff-overfl             ;allow test to change I-flag (no mask)
                       >
075c : 48              >            pha         ;use stack to load status
075d : 28              >            plp
                        
075e : d002                     bne brvc1
0760 : f003                     beq brvc2
0762 :                  brvc1
                                trap            ;branch zero/non zero
0762 : 4c6207          >        jmp *           ;failed anyway
                        
0765 : 9002             brvc2   bcc brvc3
0767 : b003                     bcs brvc4
0769 :                  brvc3
                                trap            ;branch carry/no carry
0769 : 4c6907          >        jmp *           ;failed anyway
                        
076c : 1002             brvc4   bpl brvc5
076e : 3003                     bmi brvc6
0770 :                  brvc5
                                trap            ;branch minus/plus
0770 : 4c7007          >        jmp *           ;failed anyway
                        
0773 : 7002             brvc6   bvs brvc7
0775 : 5003                     bvc brvc8
0777 :                  brvc7
                                trap            ;branch overflow/no overflow
0777 : 4c7707          >        jmp *           ;failed anyway
                        
077a :                  brvc8
                                next_test
077a : ad0002          >            lda test_case   ;previous test
077d : c904            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
077f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0005 =                 >test_num = test_num + 1
0781 : a905            >            lda #test_num   ;*** next tests' number
0783 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; test PHA does not alter flags or accumulator but PLA does
0786 : a255                     ldx #$55        ;x & y protected
0788 : a0aa                     ldy #$aa
                                set_a 1,$ff     ;push
                       >            load_flag $ff     
078a : a9ff            >            lda #$ff                  ;allow test to change I-flag (no mask)
                       >
078c : 48              >            pha         ;use stack to load status
078d : a901            >            lda #1     ;precharge accu
078f : 28              >            plp
                        
0790 : 48                       pha
                                tst_a 1,$ff
0791 : 08              >            php         ;save flags
0792 : c901            >            cmp #1     ;test result
                       >            trap_ne
0794 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0796 : 68              >            pla         ;load status
0797 : 48              >            pha
                       >            cmp_flag $ff
0798 : 0908            >            ora #decmode        ;ignore decimal mode bit
079a : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
079c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
079e : 28              >            plp         ;restore status
                        
                                set_a 0,0
                       >            load_flag 0
079f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
07a1 : 48              >            pha         ;use stack to load status
07a2 : a900            >            lda #0     ;precharge accu
07a4 : 28              >            plp
                        
07a5 : 48                       pha
                                tst_a 0,0
07a6 : 08              >            php         ;save flags
07a7 : c900            >            cmp #0     ;test result
                       >            trap_ne
07a9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07ab : 68              >            pla         ;load status
07ac : 48              >            pha
                       >            cmp_flag 0
07ad : 0908            >            ora #decmode        ;ignore decimal mode bit
07af : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
07b1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07b3 : 28              >            plp         ;restore status
                        
                                set_a $ff,$ff
                       >            load_flag $ff
07b4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
07b6 : 48              >            pha         ;use stack to load status
07b7 : a9ff            >            lda #$ff     ;precharge accu
07b9 : 28              >            plp
                        
07ba : 48                       pha
                                tst_a $ff,$ff
07bb : 08              >            php         ;save flags
07bc : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
07be : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07c0 : 68              >            pla         ;load status
07c1 : 48              >            pha
                       >            cmp_flag $ff
07c2 : 0908            >            ora #decmode        ;ignore decimal mode bit
07c4 : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
07c6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07c8 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
07c9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
07cb : 48              >            pha         ;use stack to load status
07cc : a901            >            lda #1     ;precharge accu
07ce : 28              >            plp
                        
07cf : 48                       pha
                                tst_a 1,0
07d0 : 08              >            php         ;save flags
07d1 : c901            >            cmp #1     ;test result
                       >            trap_ne
07d3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07d5 : 68              >            pla         ;load status
07d6 : 48              >            pha
                       >            cmp_flag 0
07d7 : 0908            >            ora #decmode        ;ignore decimal mode bit
07d9 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
07db : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07dd : 28              >            plp         ;restore status
                        
                                set_a 0,$ff
                       >            load_flag $ff
07de : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
07e0 : 48              >            pha         ;use stack to load status
07e1 : a900            >            lda #0     ;precharge accu
07e3 : 28              >            plp
                        
07e4 : 48                       pha
                                tst_a 0,$ff
07e5 : 08              >            php         ;save flags
07e6 : c900            >            cmp #0     ;test result
                       >            trap_ne
07e8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07ea : 68              >            pla         ;load status
07eb : 48              >            pha
                       >            cmp_flag $ff
07ec : 0908            >            ora #decmode        ;ignore decimal mode bit
07ee : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
07f0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07f2 : 28              >            plp         ;restore status
                        
                                set_a $ff,0
                       >            load_flag 0
07f3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
07f5 : 48              >            pha         ;use stack to load status
07f6 : a9ff            >            lda #$ff     ;precharge accu
07f8 : 28              >            plp
                        
07f9 : 48                       pha
                                tst_a $ff,0
07fa : 08              >            php         ;save flags
07fb : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
07fd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07ff : 68              >            pla         ;load status
0800 : 48              >            pha
                       >            cmp_flag 0
0801 : 0908            >            ora #decmode        ;ignore decimal mode bit
0803 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0805 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0807 : 28              >            plp         ;restore status
                        
                                set_a 0,$ff     ;pull
                       >            load_flag $ff     
0808 : a9ff            >            lda #$ff                  ;allow test to change I-flag (no mask)
                       >
080a : 48              >            pha         ;use stack to load status
080b : a900            >            lda #0     ;precharge accu
080d : 28              >            plp
                        
080e : 68                       pla
                                tst_a $ff,$ff-zero
080f : 08              >            php         ;save flags
0810 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0812 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0814 : 68              >            pla         ;load status
0815 : 48              >            pha
                       >            cmp_flag $ff-zero
0816 : 0908            >            ora #decmode        ;ignore decimal mode bit
0818 : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
081a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
081c : 28              >            plp         ;restore status
                        
                                set_a $ff,0
                       >            load_flag 0
081d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
081f : 48              >            pha         ;use stack to load status
0820 : a9ff            >            lda #$ff     ;precharge accu
0822 : 28              >            plp
                        
0823 : 68                       pla
                                tst_a 0,zero
0824 : 08              >            php         ;save flags
0825 : c900            >            cmp #0     ;test result
                       >            trap_ne
0827 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0829 : 68              >            pla         ;load status
082a : 48              >            pha
                       >            cmp_flag zero
082b : 0908            >            ora #decmode        ;ignore decimal mode bit
082d : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
082f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0831 : 28              >            plp         ;restore status
                        
                                set_a $fe,$ff
                       >            load_flag $ff
0832 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0834 : 48              >            pha         ;use stack to load status
0835 : a9fe            >            lda #$fe     ;precharge accu
0837 : 28              >            plp
                        
0838 : 68                       pla
                                tst_a 1,$ff-zero-minus
0839 : 08              >            php         ;save flags
083a : c901            >            cmp #1     ;test result
                       >            trap_ne
083c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
083e : 68              >            pla         ;load status
083f : 48              >            pha
                       >            cmp_flag $ff-zero-minus
0840 : 0908            >            ora #decmode        ;ignore decimal mode bit
0842 : c97d            >            cmp #($ff-zero-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0844 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0846 : 28              >            plp         ;restore status
                        
                                set_a 0,0
                       >            load_flag 0
0847 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0849 : 48              >            pha         ;use stack to load status
084a : a900            >            lda #0     ;precharge accu
084c : 28              >            plp
                        
084d : 68                       pla
                                tst_a $ff,minus
084e : 08              >            php         ;save flags
084f : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0851 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0853 : 68              >            pla         ;load status
0854 : 48              >            pha
                       >            cmp_flag minus
0855 : 0908            >            ora #decmode        ;ignore decimal mode bit
0857 : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0859 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
085b : 28              >            plp         ;restore status
                        
                                set_a $ff,$ff
                       >            load_flag $ff
085c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
085e : 48              >            pha         ;use stack to load status
085f : a9ff            >            lda #$ff     ;precharge accu
0861 : 28              >            plp
                        
0862 : 68                       pla
                                tst_a 0,$ff-minus
0863 : 08              >            php         ;save flags
0864 : c900            >            cmp #0     ;test result
                       >            trap_ne
0866 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0868 : 68              >            pla         ;load status
0869 : 48              >            pha
                       >            cmp_flag $ff-minus
086a : 0908            >            ora #decmode        ;ignore decimal mode bit
086c : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
086e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0870 : 28              >            plp         ;restore status
                        
                                set_a $fe,0
                       >            load_flag 0
0871 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0873 : 48              >            pha         ;use stack to load status
0874 : a9fe            >            lda #$fe     ;precharge accu
0876 : 28              >            plp
                        
0877 : 68                       pla
                                tst_a 1,0
0878 : 08              >            php         ;save flags
0879 : c901            >            cmp #1     ;test result
                       >            trap_ne
087b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
087d : 68              >            pla         ;load status
087e : 48              >            pha
                       >            cmp_flag 0
087f : 0908            >            ora #decmode        ;ignore decimal mode bit
0881 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0883 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0885 : 28              >            plp         ;restore status
                        
0886 : e055                     cpx #$55        ;x & y unchanged?
                                trap_ne
0888 : d0fe            >        bne *           ;failed not equal (non zero)
                        
088a : c0aa                     cpy #$aa
                                trap_ne
088c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
088e : ad0002          >            lda test_case   ;previous test
0891 : c905            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0893 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0006 =                 >test_num = test_num + 1
0895 : a906            >            lda #test_num   ;*** next tests' number
0897 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                         
                        ; partial pretest EOR #
                                set_a $3c,0
                       >            load_flag 0
089a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
089c : 48              >            pha         ;use stack to load status
089d : a93c            >            lda #$3c     ;precharge accu
089f : 28              >            plp
                        
08a0 : 49c3                     eor #$c3
                                tst_a $ff,fn
08a2 : 08              >            php         ;save flags
08a3 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
08a5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
08a7 : 68              >            pla         ;load status
08a8 : 48              >            pha
                       >            cmp_flag fn
08a9 : 0908            >            ora #decmode        ;ignore decimal mode bit
08ab : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
08ad : d0fe            >        bne *           ;failed not equal (non zero)
                       >
08af : 28              >            plp         ;restore status
                        
                                set_a $c3,0
                       >            load_flag 0
08b0 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
08b2 : 48              >            pha         ;use stack to load status
08b3 : a9c3            >            lda #$c3     ;precharge accu
08b5 : 28              >            plp
                        
08b6 : 49c3                     eor #$c3
                                tst_a 0,fz
08b8 : 08              >            php         ;save flags
08b9 : c900            >            cmp #0     ;test result
                       >            trap_ne
08bb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
08bd : 68              >            pla         ;load status
08be : 48              >            pha
                       >            cmp_flag fz
08bf : 0908            >            ora #decmode        ;ignore decimal mode bit
08c1 : c93a            >            cmp #(fz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
08c3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
08c5 : 28              >            plp         ;restore status
                        
                                next_test
08c6 : ad0002          >            lda test_case   ;previous test
08c9 : c906            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
08cb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0007 =                 >test_num = test_num + 1
08cd : a907            >            lda #test_num   ;*** next tests' number
08cf : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; PC modifying instructions except branches (NOP, JMP, JSR, RTS, BRK, RTI)
                        ; testing NOP
08d2 : a224                     ldx #$24
08d4 : a042                     ldy #$42
                                set_a $18,0
                       >            load_flag 0
08d6 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
08d8 : 48              >            pha         ;use stack to load status
08d9 : a918            >            lda #$18     ;precharge accu
08db : 28              >            plp
                        
08dc : ea                       nop
                                tst_a $18,0
08dd : 08              >            php         ;save flags
08de : c918            >            cmp #$18     ;test result
                       >            trap_ne
08e0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
08e2 : 68              >            pla         ;load status
08e3 : 48              >            pha
                       >            cmp_flag 0
08e4 : 0908            >            ora #decmode        ;ignore decimal mode bit
08e6 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
08e8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
08ea : 28              >            plp         ;restore status
                        
08eb : e024                     cpx #$24
                                trap_ne
08ed : d0fe            >        bne *           ;failed not equal (non zero)
                        
08ef : c042                     cpy #$42
                                trap_ne
08f1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
08f3 : a2db                     ldx #$db
08f5 : a0bd                     ldy #$bd
                                set_a $e7,$ff
                       >            load_flag $ff
08f7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
08f9 : 48              >            pha         ;use stack to load status
08fa : a9e7            >            lda #$e7     ;precharge accu
08fc : 28              >            plp
                        
08fd : ea                       nop
                                tst_a $e7,$ff
08fe : 08              >            php         ;save flags
08ff : c9e7            >            cmp #$e7     ;test result
                       >            trap_ne
0901 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0903 : 68              >            pla         ;load status
0904 : 48              >            pha
                       >            cmp_flag $ff
0905 : 0908            >            ora #decmode        ;ignore decimal mode bit
0907 : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0909 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
090b : 28              >            plp         ;restore status
                        
090c : e0db                     cpx #$db
                                trap_ne
090e : d0fe            >        bne *           ;failed not equal (non zero)
                        
0910 : c0bd                     cpy #$bd
                                trap_ne
0912 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
0914 : ad0002          >            lda test_case   ;previous test
0917 : c907            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0919 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0008 =                 >test_num = test_num + 1
091b : a908            >            lda #test_num   ;*** next tests' number
091d : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; jump absolute
                                set_stat $0
                       >            load_flag $0
0920 : a900            >            lda #$0             ;allow test to change I-flag (no mask)
                       >
0922 : 48              >            pha         ;use stack to load status
0923 : 28              >            plp
                        
0924 : a946                     lda #'F'
0926 : a241                     ldx #'A'
0928 : a052                     ldy #'R'        ;N=0, V=0, Z=0, C=0
092a : 4cec37                   jmp test_far
092d : ea                       nop
092e : ea                       nop
                                trap_ne         ;runover protection
092f : d0fe            >        bne *           ;failed not equal (non zero)
                        
0931 : e8                       inx
0932 : e8                       inx
0933 :                  far_ret 
                                trap_eq         ;returned flags OK?
0933 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_pl
0935 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                trap_cc
0937 : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
0939 : 50fe            >        bvc *           ;failed overflow clear
                        
093b : c9ec                     cmp #('F'^$aa)  ;returned registers OK?
                                trap_ne
093d : d0fe            >        bne *           ;failed not equal (non zero)
                        
093f : e042                     cpx #('A'+1)
                                trap_ne
0941 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0943 : c04f                     cpy #('R'-3)
                                trap_ne
0945 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0947 : ca                       dex
0948 : c8                       iny
0949 : c8                       iny
094a : c8                       iny
094b : 49aa                     eor #$aa        ;N=0, V=1, Z=0, C=1
094d : 4c5609                   jmp test_near
0950 : ea                       nop
0951 : ea                       nop
                                trap_ne         ;runover protection
0952 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0954 : e8                       inx
0955 : e8                       inx
0956 :                  test_near
                                trap_eq         ;passed flags OK?
0956 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_mi
0958 : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_cc
095a : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
095c : 50fe            >        bvc *           ;failed overflow clear
                        
095e : c946                     cmp #'F'        ;passed registers OK?
                                trap_ne
0960 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0962 : e041                     cpx #'A'
                                trap_ne
0964 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0966 : c052                     cpy #'R'
                                trap_ne
0968 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
096a : ad0002          >            lda test_case   ;previous test
096d : c908            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
096f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0009 =                 >test_num = test_num + 1
0971 : a909            >            lda #test_num   ;*** next tests' number
0973 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; jump indirect
                                set_stat 0
                       >            load_flag 0
0976 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0978 : 48              >            pha         ;use stack to load status
0979 : 28              >            plp
                        
097a : a949                     lda #'I'
097c : a24e                     ldx #'N'
097e : a044                     ldy #'D'        ;N=0, V=0, Z=0, C=0
0980 : 6c1a38                   jmp (ptr_tst_ind)
0983 : ea                       nop
                                trap_ne         ;runover protection
0984 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0986 : 88                       dey
0987 : 88                       dey
0988 :                  ind_ret 
0988 : 08                       php             ;either SP or Y count will fail, if we do not hit
0989 : 88                       dey
098a : 88                       dey
098b : 88                       dey
098c : 28                       plp
                                trap_eq         ;returned flags OK?
098d : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_pl
098f : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                trap_cc
0991 : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
0993 : 50fe            >        bvc *           ;failed overflow clear
                        
0995 : c9e3                     cmp #('I'^$aa)  ;returned registers OK?
                                trap_ne
0997 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0999 : e04f                     cpx #('N'+1)
                                trap_ne
099b : d0fe            >        bne *           ;failed not equal (non zero)
                        
099d : c03e                     cpy #('D'-6)
                                trap_ne
099f : d0fe            >        bne *           ;failed not equal (non zero)
                        
09a1 : ba                       tsx             ;SP check
09a2 : e0ff                     cpx #$ff
                                trap_ne
09a4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
09a6 : ad0002          >            lda test_case   ;previous test
09a9 : c909            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
09ab : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000a =                 >test_num = test_num + 1
09ad : a90a            >            lda #test_num   ;*** next tests' number
09af : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; jump subroutine & return from subroutine
                                set_stat 0
                       >            load_flag 0
09b2 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
09b4 : 48              >            pha         ;use stack to load status
09b5 : 28              >            plp
                        
09b6 : a94a                     lda #'J'
09b8 : a253                     ldx #'S'
09ba : a052                     ldy #'R'        ;N=0, V=0, Z=0, C=0
09bc : 205938                   jsr test_jsr
09be =                  jsr_ret = *-1           ;last address of jsr = return address
09bf : 08                       php             ;either SP or Y count will fail, if we do not hit
09c0 : 88                       dey
09c1 : 88                       dey
09c2 : 88                       dey
09c3 : 28                       plp
                                trap_eq         ;returned flags OK?
09c4 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_pl
09c6 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                trap_cc
09c8 : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
09ca : 50fe            >        bvc *           ;failed overflow clear
                        
09cc : c9e0                     cmp #('J'^$aa)  ;returned registers OK?
                                trap_ne
09ce : d0fe            >        bne *           ;failed not equal (non zero)
                        
09d0 : e054                     cpx #('S'+1)
                                trap_ne
09d2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
09d4 : c04c                     cpy #('R'-6)
                                trap_ne
09d6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
09d8 : ba                       tsx             ;sp?
09d9 : e0ff                     cpx #$ff
                                trap_ne
09db : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
09dd : ad0002          >            lda test_case   ;previous test
09e0 : c90a            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
09e2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000b =                 >test_num = test_num + 1
09e4 : a90b            >            lda #test_num   ;*** next tests' number
09e6 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; break & return from interrupt
                            if ROM_vectors = 1
                                load_flag 0     ;with interrupts enabled if allowed!
09e9 : a900            >            lda #0                  ;allow test to change I-flag (no mask)
                        
09eb : 48                       pha
09ec : a942                     lda #'B'
09ee : a252                     ldx #'R'
09f0 : a04b                     ldy #'K'
09f2 : 28                       plp             ;N=0, V=0, Z=0, C=0
09f3 : 00                       brk
                            else
                                lda #hi brk_ret0 ;emulated break
                                pha
                                lda #lo brk_ret0
                                pha
                                load_flag fao    ;set break & unused on stack
                                pha
                                load_flag intdis ;during interrupt
                                pha
                                lda #'B'
                                ldx #'R'
                                ldy #'K'
                                plp             ;N=0, V=0, Z=0, C=0
                                jmp irq_trap
                            endif
09f4 : 88                       dey             ;should not be executed
09f5 :                  brk_ret0                ;address of break return
09f5 : 08                       php             ;either SP or Y count will fail, if we do not hit
09f6 : 88                       dey
09f7 : 88                       dey
09f8 : 88                       dey
09f9 : c9e8                     cmp #'B'^$aa    ;returned registers OK?
                                ;the IRQ vector was never executed if A & X stay unmodified
                                trap_ne
09fb : d0fe            >        bne *           ;failed not equal (non zero)
                        
09fd : e053                     cpx #'R'+1
                                trap_ne
09ff : d0fe            >        bne *           ;failed not equal (non zero)
                        
0a01 : c045                     cpy #'K'-6
                                trap_ne
0a03 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0a05 : 68                       pla             ;returned flags OK (unchanged)?
                                cmp_flag 0
0a06 : 0908            >            ora #decmode        ;ignore decimal mode bit
0a08 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0a0a : d0fe            >        bne *           ;failed not equal (non zero)
                        
0a0c : ba                       tsx             ;sp?
0a0d : e0ff                     cpx #$ff
                                trap_ne
0a0f : d0fe            >        bne *           ;failed not equal (non zero)
                        
                            if ROM_vectors = 1
                                load_flag $ff   ;with interrupts disabled if allowed!
0a11 : a9ff            >            lda #$ff                ;allow test to change I-flag (no mask)
                        
0a13 : 48                       pha
0a14 : a9bd                     lda #$ff-'B'
0a16 : a2ad                     ldx #$ff-'R'
0a18 : a0b4                     ldy #$ff-'K'
0a1a : 28                       plp             ;N=1, V=1, Z=1, C=1
0a1b : 00                       brk
                            else
                                lda #hi brk_ret1 ;emulated break
                                pha
                                lda #lo brk_ret1
                                pha
                                load_flag $ff
                                pha             ;set break & unused on stack
                                pha             ;actual flags
                                lda #$ff-'B'
                                ldx #$ff-'R'
                                ldy #$ff-'K'
                                plp             ;N=1, V=1, Z=1, C=1
                                jmp irq_trap
                            endif
0a1c : 88                       dey             ;should not be executed
0a1d :                  brk_ret1                ;address of break return
0a1d : 08                       php             ;either SP or Y count will fail, if we do not hit
0a1e : 88                       dey
0a1f : 88                       dey
0a20 : 88                       dey
0a21 : c917                     cmp #($ff-'B')^$aa  ;returned registers OK?
                                ;the IRQ vector was never executed if A & X stay unmodified
                                trap_ne
0a23 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0a25 : e0ae                     cpx #$ff-'R'+1
                                trap_ne
0a27 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0a29 : c0ae                     cpy #$ff-'K'-6
                                trap_ne
0a2b : d0fe            >        bne *           ;failed not equal (non zero)
                        
0a2d : 68                       pla             ;returned flags OK (unchanged)?
                                cmp_flag $ff
0a2e : 0908            >            ora #decmode        ;ignore decimal mode bit
0a30 : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0a32 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0a34 : ba                       tsx             ;sp?
0a35 : e0ff                     cpx #$ff
                                trap_ne
0a37 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
0a39 : ad0002          >            lda test_case   ;previous test
0a3c : c90b            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0a3e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000c =                 >test_num = test_num + 1
0a40 : a90c            >            lda #test_num   ;*** next tests' number
0a42 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                         
                        ; test set and clear flags CLC CLI CLD CLV SEC SEI SED
                                set_stat $ff
                       >            load_flag $ff
0a45 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0a47 : 48              >            pha         ;use stack to load status
0a48 : 28              >            plp
                        
0a49 : 18                       clc
                                tst_stat $ff-carry
0a4a : 08              >            php         ;save status
0a4b : 68              >            pla         ;use stack to retrieve status
0a4c : 48              >            pha
                       >            cmp_flag $ff-carry
0a4d : 0908            >            ora #decmode        ;ignore decimal mode bit
0a4f : c9fe            >            cmp #($ff-carry|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0a51 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a53 : 28              >            plp         ;restore status
                        
0a54 : 38                       sec
                                tst_stat $ff
0a55 : 08              >            php         ;save status
0a56 : 68              >            pla         ;use stack to retrieve status
0a57 : 48              >            pha
                       >            cmp_flag $ff
0a58 : 0908            >            ora #decmode        ;ignore decimal mode bit
0a5a : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0a5c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a5e : 28              >            plp         ;restore status
                        
                            if I_flag = 3
0a5f : 58                       cli
                                tst_stat $ff-intdis
0a60 : 08              >            php         ;save status
0a61 : 68              >            pla         ;use stack to retrieve status
0a62 : 48              >            pha
                       >            cmp_flag $ff-intdis
0a63 : 0908            >            ora #decmode        ;ignore decimal mode bit
0a65 : c9fb            >            cmp #($ff-intdis|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0a67 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a69 : 28              >            plp         ;restore status
                        
0a6a : 78                       sei
                                tst_stat $ff
0a6b : 08              >            php         ;save status
0a6c : 68              >            pla         ;use stack to retrieve status
0a6d : 48              >            pha
                       >            cmp_flag $ff
0a6e : 0908            >            ora #decmode        ;ignore decimal mode bit
0a70 : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0a72 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a74 : 28              >            plp         ;restore status
                        
                            endif
0a75 : d8                       cld
                                tst_stat $ff-decmode
0a76 : 08              >            php         ;save status
0a77 : 68              >            pla         ;use stack to retrieve status
0a78 : 48              >            pha
                       >            cmp_flag $ff-decmode
0a79 : 0908            >            ora #decmode        ;ignore decimal mode bit
0a7b : c9ff            >            cmp #($ff-decmode|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0a7d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a7f : 28              >            plp         ;restore status
                        
0a80 : f8                       sed
                                tst_stat $ff
0a81 : 08              >            php         ;save status
0a82 : 68              >            pla         ;use stack to retrieve status
0a83 : 48              >            pha
                       >            cmp_flag $ff
0a84 : 0908            >            ora #decmode        ;ignore decimal mode bit
0a86 : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0a88 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a8a : 28              >            plp         ;restore status
                        
0a8b : b8                       clv
                                tst_stat $ff-overfl
0a8c : 08              >            php         ;save status
0a8d : 68              >            pla         ;use stack to retrieve status
0a8e : 48              >            pha
                       >            cmp_flag $ff-overfl
0a8f : 0908            >            ora #decmode        ;ignore decimal mode bit
0a91 : c9bf            >            cmp #($ff-overfl|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0a93 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a95 : 28              >            plp         ;restore status
                        
                                set_stat 0
                       >            load_flag 0
0a96 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0a98 : 48              >            pha         ;use stack to load status
0a99 : 28              >            plp
                        
                                tst_stat 0
0a9a : 08              >            php         ;save status
0a9b : 68              >            pla         ;use stack to retrieve status
0a9c : 48              >            pha
                       >            cmp_flag 0
0a9d : 0908            >            ora #decmode        ;ignore decimal mode bit
0a9f : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0aa1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0aa3 : 28              >            plp         ;restore status
                        
0aa4 : 38                       sec
                                tst_stat carry
0aa5 : 08              >            php         ;save status
0aa6 : 68              >            pla         ;use stack to retrieve status
0aa7 : 48              >            pha
                       >            cmp_flag carry
0aa8 : 0908            >            ora #decmode        ;ignore decimal mode bit
0aaa : c939            >            cmp #(carry|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0aac : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0aae : 28              >            plp         ;restore status
                        
0aaf : 18                       clc
                                tst_stat 0  
0ab0 : 08              >            php         ;save status
0ab1 : 68              >            pla         ;use stack to retrieve status
0ab2 : 48              >            pha
                       >            cmp_flag 0  
0ab3 : 0908            >            ora #decmode        ;ignore decimal mode bit
0ab5 : c938            >            cmp #(0  |faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0ab7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0ab9 : 28              >            plp         ;restore status
                        
                            if I_flag = 3
0aba : 78                       sei
                                tst_stat intdis
0abb : 08              >            php         ;save status
0abc : 68              >            pla         ;use stack to retrieve status
0abd : 48              >            pha
                       >            cmp_flag intdis
0abe : 0908            >            ora #decmode        ;ignore decimal mode bit
0ac0 : c93c            >            cmp #(intdis|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0ac2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0ac4 : 28              >            plp         ;restore status
                        
0ac5 : 58                       cli
                                tst_stat 0
0ac6 : 08              >            php         ;save status
0ac7 : 68              >            pla         ;use stack to retrieve status
0ac8 : 48              >            pha
                       >            cmp_flag 0
0ac9 : 0908            >            ora #decmode        ;ignore decimal mode bit
0acb : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0acd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0acf : 28              >            plp         ;restore status
                        
                            endif  
0ad0 : f8                       sed
                                tst_stat decmode
0ad1 : 08              >            php         ;save status
0ad2 : 68              >            pla         ;use stack to retrieve status
0ad3 : 48              >            pha
                       >            cmp_flag decmode
0ad4 : 0908            >            ora #decmode        ;ignore decimal mode bit
0ad6 : c938            >            cmp #(decmode|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0ad8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0ada : 28              >            plp         ;restore status
                        
0adb : d8                       cld
                                tst_stat 0  
0adc : 08              >            php         ;save status
0add : 68              >            pla         ;use stack to retrieve status
0ade : 48              >            pha
                       >            cmp_flag 0  
0adf : 0908            >            ora #decmode        ;ignore decimal mode bit
0ae1 : c938            >            cmp #(0  |faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0ae3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0ae5 : 28              >            plp         ;restore status
                        
                                set_stat overfl
                       >            load_flag overfl
0ae6 : a940            >            lda #overfl             ;allow test to change I-flag (no mask)
                       >
0ae8 : 48              >            pha         ;use stack to load status
0ae9 : 28              >            plp
                        
                                tst_stat overfl
0aea : 08              >            php         ;save status
0aeb : 68              >            pla         ;use stack to retrieve status
0aec : 48              >            pha
                       >            cmp_flag overfl
0aed : 0908            >            ora #decmode        ;ignore decimal mode bit
0aef : c978            >            cmp #(overfl|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0af1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0af3 : 28              >            plp         ;restore status
                        
0af4 : b8                       clv
                                tst_stat 0
0af5 : 08              >            php         ;save status
0af6 : 68              >            pla         ;use stack to retrieve status
0af7 : 48              >            pha
                       >            cmp_flag 0
0af8 : 0908            >            ora #decmode        ;ignore decimal mode bit
0afa : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0afc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0afe : 28              >            plp         ;restore status
                        
                                next_test
0aff : ad0002          >            lda test_case   ;previous test
0b02 : c90c            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0b04 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000d =                 >test_num = test_num + 1
0b06 : a90d            >            lda #test_num   ;*** next tests' number
0b08 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        ; testing index register increment/decrement and transfer
                        ; INX INY DEX DEY TAX TXA TAY TYA 
0b0b : a2fe                     ldx #$fe
                                set_stat $ff
                       >            load_flag $ff
0b0d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0b0f : 48              >            pha         ;use stack to load status
0b10 : 28              >            plp
                        
0b11 : e8                       inx             ;ff
                                tst_x $ff,$ff-zero
0b12 : 08              >            php         ;save flags
0b13 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
0b15 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b17 : 68              >            pla         ;load status
0b18 : 48              >            pha
                       >            cmp_flag $ff-zero
0b19 : 0908            >            ora #decmode        ;ignore decimal mode bit
0b1b : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0b1d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b1f : 28              >            plp         ;restore status
                        
0b20 : e8                       inx             ;00
                                tst_x 0,$ff-minus
0b21 : 08              >            php         ;save flags
0b22 : e000            >            cpx #0     ;test result
                       >            trap_ne
0b24 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b26 : 68              >            pla         ;load status
0b27 : 48              >            pha
                       >            cmp_flag $ff-minus
0b28 : 0908            >            ora #decmode        ;ignore decimal mode bit
0b2a : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0b2c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b2e : 28              >            plp         ;restore status
                        
0b2f : e8                       inx             ;01
                                tst_x 1,$ff-minus-zero
0b30 : 08              >            php         ;save flags
0b31 : e001            >            cpx #1     ;test result
                       >            trap_ne
0b33 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b35 : 68              >            pla         ;load status
0b36 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
0b37 : 0908            >            ora #decmode        ;ignore decimal mode bit
0b39 : c97d            >            cmp #($ff-minus-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0b3b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b3d : 28              >            plp         ;restore status
                        
0b3e : ca                       dex             ;00
                                tst_x 0,$ff-minus
0b3f : 08              >            php         ;save flags
0b40 : e000            >            cpx #0     ;test result
                       >            trap_ne
0b42 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b44 : 68              >            pla         ;load status
0b45 : 48              >            pha
                       >            cmp_flag $ff-minus
0b46 : 0908            >            ora #decmode        ;ignore decimal mode bit
0b48 : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0b4a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b4c : 28              >            plp         ;restore status
                        
0b4d : ca                       dex             ;ff
                                tst_x $ff,$ff-zero
0b4e : 08              >            php         ;save flags
0b4f : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
0b51 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b53 : 68              >            pla         ;load status
0b54 : 48              >            pha
                       >            cmp_flag $ff-zero
0b55 : 0908            >            ora #decmode        ;ignore decimal mode bit
0b57 : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0b59 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b5b : 28              >            plp         ;restore status
                        
0b5c : ca                       dex             ;fe
                                set_stat 0
                       >            load_flag 0
0b5d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0b5f : 48              >            pha         ;use stack to load status
0b60 : 28              >            plp
                        
0b61 : e8                       inx             ;ff
                                tst_x $ff,minus
0b62 : 08              >            php         ;save flags
0b63 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
0b65 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b67 : 68              >            pla         ;load status
0b68 : 48              >            pha
                       >            cmp_flag minus
0b69 : 0908            >            ora #decmode        ;ignore decimal mode bit
0b6b : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0b6d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b6f : 28              >            plp         ;restore status
                        
0b70 : e8                       inx             ;00
                                tst_x 0,zero
0b71 : 08              >            php         ;save flags
0b72 : e000            >            cpx #0     ;test result
                       >            trap_ne
0b74 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b76 : 68              >            pla         ;load status
0b77 : 48              >            pha
                       >            cmp_flag zero
0b78 : 0908            >            ora #decmode        ;ignore decimal mode bit
0b7a : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0b7c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b7e : 28              >            plp         ;restore status
                        
0b7f : e8                       inx             ;01
                                tst_x 1,0
0b80 : 08              >            php         ;save flags
0b81 : e001            >            cpx #1     ;test result
                       >            trap_ne
0b83 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b85 : 68              >            pla         ;load status
0b86 : 48              >            pha
                       >            cmp_flag 0
0b87 : 0908            >            ora #decmode        ;ignore decimal mode bit
0b89 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0b8b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b8d : 28              >            plp         ;restore status
                        
0b8e : ca                       dex             ;00
                                tst_x 0,zero
0b8f : 08              >            php         ;save flags
0b90 : e000            >            cpx #0     ;test result
                       >            trap_ne
0b92 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b94 : 68              >            pla         ;load status
0b95 : 48              >            pha
                       >            cmp_flag zero
0b96 : 0908            >            ora #decmode        ;ignore decimal mode bit
0b98 : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0b9a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b9c : 28              >            plp         ;restore status
                        
0b9d : ca                       dex             ;ff
                                tst_x $ff,minus
0b9e : 08              >            php         ;save flags
0b9f : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
0ba1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0ba3 : 68              >            pla         ;load status
0ba4 : 48              >            pha
                       >            cmp_flag minus
0ba5 : 0908            >            ora #decmode        ;ignore decimal mode bit
0ba7 : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0ba9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0bab : 28              >            plp         ;restore status
                        
                        
0bac : a0fe                     ldy #$fe
                                set_stat $ff
                       >            load_flag $ff
0bae : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0bb0 : 48              >            pha         ;use stack to load status
0bb1 : 28              >            plp
                        
0bb2 : c8                       iny             ;ff
                                tst_y $ff,$ff-zero
0bb3 : 08              >            php         ;save flags
0bb4 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
0bb6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0bb8 : 68              >            pla         ;load status
0bb9 : 48              >            pha
                       >            cmp_flag $ff-zero
0bba : 0908            >            ora #decmode        ;ignore decimal mode bit
0bbc : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0bbe : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0bc0 : 28              >            plp         ;restore status
                        
0bc1 : c8                       iny             ;00
                                tst_y 0,$ff-minus
0bc2 : 08              >            php         ;save flags
0bc3 : c000            >            cpy #0     ;test result
                       >            trap_ne
0bc5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0bc7 : 68              >            pla         ;load status
0bc8 : 48              >            pha
                       >            cmp_flag $ff-minus
0bc9 : 0908            >            ora #decmode        ;ignore decimal mode bit
0bcb : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0bcd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0bcf : 28              >            plp         ;restore status
                        
0bd0 : c8                       iny             ;01
                                tst_y 1,$ff-minus-zero
0bd1 : 08              >            php         ;save flags
0bd2 : c001            >            cpy #1     ;test result
                       >            trap_ne
0bd4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0bd6 : 68              >            pla         ;load status
0bd7 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
0bd8 : 0908            >            ora #decmode        ;ignore decimal mode bit
0bda : c97d            >            cmp #($ff-minus-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0bdc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0bde : 28              >            plp         ;restore status
                        
0bdf : 88                       dey             ;00
                                tst_y 0,$ff-minus
0be0 : 08              >            php         ;save flags
0be1 : c000            >            cpy #0     ;test result
                       >            trap_ne
0be3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0be5 : 68              >            pla         ;load status
0be6 : 48              >            pha
                       >            cmp_flag $ff-minus
0be7 : 0908            >            ora #decmode        ;ignore decimal mode bit
0be9 : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0beb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0bed : 28              >            plp         ;restore status
                        
0bee : 88                       dey             ;ff
                                tst_y $ff,$ff-zero
0bef : 08              >            php         ;save flags
0bf0 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
0bf2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0bf4 : 68              >            pla         ;load status
0bf5 : 48              >            pha
                       >            cmp_flag $ff-zero
0bf6 : 0908            >            ora #decmode        ;ignore decimal mode bit
0bf8 : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0bfa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0bfc : 28              >            plp         ;restore status
                        
0bfd : 88                       dey             ;fe
                                set_stat 0
                       >            load_flag 0
0bfe : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0c00 : 48              >            pha         ;use stack to load status
0c01 : 28              >            plp
                        
0c02 : c8                       iny             ;ff
                                tst_y $ff,0+minus
0c03 : 08              >            php         ;save flags
0c04 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
0c06 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c08 : 68              >            pla         ;load status
0c09 : 48              >            pha
                       >            cmp_flag 0+minus
0c0a : 0908            >            ora #decmode        ;ignore decimal mode bit
0c0c : c9b8            >            cmp #(0+minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0c0e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c10 : 28              >            plp         ;restore status
                        
0c11 : c8                       iny             ;00
                                tst_y 0,zero
0c12 : 08              >            php         ;save flags
0c13 : c000            >            cpy #0     ;test result
                       >            trap_ne
0c15 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c17 : 68              >            pla         ;load status
0c18 : 48              >            pha
                       >            cmp_flag zero
0c19 : 0908            >            ora #decmode        ;ignore decimal mode bit
0c1b : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0c1d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c1f : 28              >            plp         ;restore status
                        
0c20 : c8                       iny             ;01
                                tst_y 1,0
0c21 : 08              >            php         ;save flags
0c22 : c001            >            cpy #1     ;test result
                       >            trap_ne
0c24 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c26 : 68              >            pla         ;load status
0c27 : 48              >            pha
                       >            cmp_flag 0
0c28 : 0908            >            ora #decmode        ;ignore decimal mode bit
0c2a : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0c2c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c2e : 28              >            plp         ;restore status
                        
0c2f : 88                       dey             ;00
                                tst_y 0,zero
0c30 : 08              >            php         ;save flags
0c31 : c000            >            cpy #0     ;test result
                       >            trap_ne
0c33 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c35 : 68              >            pla         ;load status
0c36 : 48              >            pha
                       >            cmp_flag zero
0c37 : 0908            >            ora #decmode        ;ignore decimal mode bit
0c39 : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0c3b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c3d : 28              >            plp         ;restore status
                        
0c3e : 88                       dey             ;ff
                                tst_y $ff,minus
0c3f : 08              >            php         ;save flags
0c40 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
0c42 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c44 : 68              >            pla         ;load status
0c45 : 48              >            pha
                       >            cmp_flag minus
0c46 : 0908            >            ora #decmode        ;ignore decimal mode bit
0c48 : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0c4a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c4c : 28              >            plp         ;restore status
                        
                                        
0c4d : a2ff                     ldx #$ff
                                set_stat $ff
                       >            load_flag $ff
0c4f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0c51 : 48              >            pha         ;use stack to load status
0c52 : 28              >            plp
                        
0c53 : 8a                       txa
                                tst_a $ff,$ff-zero
0c54 : 08              >            php         ;save flags
0c55 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0c57 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c59 : 68              >            pla         ;load status
0c5a : 48              >            pha
                       >            cmp_flag $ff-zero
0c5b : 0908            >            ora #decmode        ;ignore decimal mode bit
0c5d : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0c5f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c61 : 28              >            plp         ;restore status
                        
0c62 : 08                       php
0c63 : e8                       inx             ;00
0c64 : 28                       plp
0c65 : 8a                       txa
                                tst_a 0,$ff-minus
0c66 : 08              >            php         ;save flags
0c67 : c900            >            cmp #0     ;test result
                       >            trap_ne
0c69 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c6b : 68              >            pla         ;load status
0c6c : 48              >            pha
                       >            cmp_flag $ff-minus
0c6d : 0908            >            ora #decmode        ;ignore decimal mode bit
0c6f : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0c71 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c73 : 28              >            plp         ;restore status
                        
0c74 : 08                       php
0c75 : e8                       inx             ;01
0c76 : 28                       plp
0c77 : 8a                       txa
                                tst_a 1,$ff-minus-zero
0c78 : 08              >            php         ;save flags
0c79 : c901            >            cmp #1     ;test result
                       >            trap_ne
0c7b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c7d : 68              >            pla         ;load status
0c7e : 48              >            pha
                       >            cmp_flag $ff-minus-zero
0c7f : 0908            >            ora #decmode        ;ignore decimal mode bit
0c81 : c97d            >            cmp #($ff-minus-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0c83 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c85 : 28              >            plp         ;restore status
                        
                                set_stat 0
                       >            load_flag 0
0c86 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0c88 : 48              >            pha         ;use stack to load status
0c89 : 28              >            plp
                        
0c8a : 8a                       txa
                                tst_a 1,0
0c8b : 08              >            php         ;save flags
0c8c : c901            >            cmp #1     ;test result
                       >            trap_ne
0c8e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c90 : 68              >            pla         ;load status
0c91 : 48              >            pha
                       >            cmp_flag 0
0c92 : 0908            >            ora #decmode        ;ignore decimal mode bit
0c94 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0c96 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c98 : 28              >            plp         ;restore status
                        
0c99 : 08                       php
0c9a : ca                       dex             ;00
0c9b : 28                       plp
0c9c : 8a                       txa
                                tst_a 0,zero
0c9d : 08              >            php         ;save flags
0c9e : c900            >            cmp #0     ;test result
                       >            trap_ne
0ca0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0ca2 : 68              >            pla         ;load status
0ca3 : 48              >            pha
                       >            cmp_flag zero
0ca4 : 0908            >            ora #decmode        ;ignore decimal mode bit
0ca6 : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0ca8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0caa : 28              >            plp         ;restore status
                        
0cab : 08                       php
0cac : ca                       dex             ;ff
0cad : 28                       plp
0cae : 8a                       txa
                                tst_a $ff,minus
0caf : 08              >            php         ;save flags
0cb0 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0cb2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0cb4 : 68              >            pla         ;load status
0cb5 : 48              >            pha
                       >            cmp_flag minus
0cb6 : 0908            >            ora #decmode        ;ignore decimal mode bit
0cb8 : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0cba : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0cbc : 28              >            plp         ;restore status
                        
                                                
0cbd : a0ff                     ldy #$ff
                                set_stat $ff
                       >            load_flag $ff
0cbf : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0cc1 : 48              >            pha         ;use stack to load status
0cc2 : 28              >            plp
                        
0cc3 : 98                       tya
                                tst_a $ff,$ff-zero
0cc4 : 08              >            php         ;save flags
0cc5 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0cc7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0cc9 : 68              >            pla         ;load status
0cca : 48              >            pha
                       >            cmp_flag $ff-zero
0ccb : 0908            >            ora #decmode        ;ignore decimal mode bit
0ccd : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0ccf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0cd1 : 28              >            plp         ;restore status
                        
0cd2 : 08                       php
0cd3 : c8                       iny             ;00
0cd4 : 28                       plp
0cd5 : 98                       tya
                                tst_a 0,$ff-minus
0cd6 : 08              >            php         ;save flags
0cd7 : c900            >            cmp #0     ;test result
                       >            trap_ne
0cd9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0cdb : 68              >            pla         ;load status
0cdc : 48              >            pha
                       >            cmp_flag $ff-minus
0cdd : 0908            >            ora #decmode        ;ignore decimal mode bit
0cdf : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0ce1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0ce3 : 28              >            plp         ;restore status
                        
0ce4 : 08                       php
0ce5 : c8                       iny             ;01
0ce6 : 28                       plp
0ce7 : 98                       tya
                                tst_a 1,$ff-minus-zero
0ce8 : 08              >            php         ;save flags
0ce9 : c901            >            cmp #1     ;test result
                       >            trap_ne
0ceb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0ced : 68              >            pla         ;load status
0cee : 48              >            pha
                       >            cmp_flag $ff-minus-zero
0cef : 0908            >            ora #decmode        ;ignore decimal mode bit
0cf1 : c97d            >            cmp #($ff-minus-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0cf3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0cf5 : 28              >            plp         ;restore status
                        
                                set_stat 0
                       >            load_flag 0
0cf6 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0cf8 : 48              >            pha         ;use stack to load status
0cf9 : 28              >            plp
                        
0cfa : 98                       tya
                                tst_a 1,0
0cfb : 08              >            php         ;save flags
0cfc : c901            >            cmp #1     ;test result
                       >            trap_ne
0cfe : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d00 : 68              >            pla         ;load status
0d01 : 48              >            pha
                       >            cmp_flag 0
0d02 : 0908            >            ora #decmode        ;ignore decimal mode bit
0d04 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0d06 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d08 : 28              >            plp         ;restore status
                        
0d09 : 08                       php
0d0a : 88                       dey             ;00
0d0b : 28                       plp
0d0c : 98                       tya
                                tst_a 0,zero
0d0d : 08              >            php         ;save flags
0d0e : c900            >            cmp #0     ;test result
                       >            trap_ne
0d10 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d12 : 68              >            pla         ;load status
0d13 : 48              >            pha
                       >            cmp_flag zero
0d14 : 0908            >            ora #decmode        ;ignore decimal mode bit
0d16 : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0d18 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d1a : 28              >            plp         ;restore status
                        
0d1b : 08                       php
0d1c : 88                       dey             ;ff
0d1d : 28                       plp
0d1e : 98                       tya
                                tst_a $ff,minus
0d1f : 08              >            php         ;save flags
0d20 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0d22 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d24 : 68              >            pla         ;load status
0d25 : 48              >            pha
                       >            cmp_flag minus
0d26 : 0908            >            ora #decmode        ;ignore decimal mode bit
0d28 : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0d2a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d2c : 28              >            plp         ;restore status
                        
                        
                                load_flag $ff
0d2d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                        
0d2f : 48                       pha
0d30 : a2ff                     ldx #$ff        ;ff
0d32 : 8a                       txa
0d33 : 28                       plp             
0d34 : a8                       tay
                                tst_y $ff,$ff-zero
0d35 : 08              >            php         ;save flags
0d36 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
0d38 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d3a : 68              >            pla         ;load status
0d3b : 48              >            pha
                       >            cmp_flag $ff-zero
0d3c : 0908            >            ora #decmode        ;ignore decimal mode bit
0d3e : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0d40 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d42 : 28              >            plp         ;restore status
                        
0d43 : 08                       php
0d44 : e8                       inx             ;00
0d45 : 8a                       txa
0d46 : 28                       plp
0d47 : a8                       tay
                                tst_y 0,$ff-minus
0d48 : 08              >            php         ;save flags
0d49 : c000            >            cpy #0     ;test result
                       >            trap_ne
0d4b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d4d : 68              >            pla         ;load status
0d4e : 48              >            pha
                       >            cmp_flag $ff-minus
0d4f : 0908            >            ora #decmode        ;ignore decimal mode bit
0d51 : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0d53 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d55 : 28              >            plp         ;restore status
                        
0d56 : 08                       php
0d57 : e8                       inx             ;01
0d58 : 8a                       txa
0d59 : 28                       plp
0d5a : a8                       tay
                                tst_y 1,$ff-minus-zero
0d5b : 08              >            php         ;save flags
0d5c : c001            >            cpy #1     ;test result
                       >            trap_ne
0d5e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d60 : 68              >            pla         ;load status
0d61 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
0d62 : 0908            >            ora #decmode        ;ignore decimal mode bit
0d64 : c97d            >            cmp #($ff-minus-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0d66 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d68 : 28              >            plp         ;restore status
                        
                                load_flag 0
0d69 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                        
0d6b : 48                       pha
0d6c : a900                     lda #0
0d6e : 8a                       txa
0d6f : 28                       plp
0d70 : a8                       tay
                                tst_y 1,0
0d71 : 08              >            php         ;save flags
0d72 : c001            >            cpy #1     ;test result
                       >            trap_ne
0d74 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d76 : 68              >            pla         ;load status
0d77 : 48              >            pha
                       >            cmp_flag 0
0d78 : 0908            >            ora #decmode        ;ignore decimal mode bit
0d7a : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0d7c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d7e : 28              >            plp         ;restore status
                        
0d7f : 08                       php
0d80 : ca                       dex             ;00
0d81 : 8a                       txa
0d82 : 28                       plp
0d83 : a8                       tay
                                tst_y 0,zero
0d84 : 08              >            php         ;save flags
0d85 : c000            >            cpy #0     ;test result
                       >            trap_ne
0d87 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d89 : 68              >            pla         ;load status
0d8a : 48              >            pha
                       >            cmp_flag zero
0d8b : 0908            >            ora #decmode        ;ignore decimal mode bit
0d8d : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0d8f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d91 : 28              >            plp         ;restore status
                        
0d92 : 08                       php
0d93 : ca                       dex             ;ff
0d94 : 8a                       txa
0d95 : 28                       plp
0d96 : a8                       tay
                                tst_y $ff,minus
0d97 : 08              >            php         ;save flags
0d98 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
0d9a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d9c : 68              >            pla         ;load status
0d9d : 48              >            pha
                       >            cmp_flag minus
0d9e : 0908            >            ora #decmode        ;ignore decimal mode bit
0da0 : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0da2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0da4 : 28              >            plp         ;restore status
                        
                        
                        
                                load_flag $ff
0da5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                        
0da7 : 48                       pha
0da8 : a0ff                     ldy #$ff        ;ff
0daa : 98                       tya
0dab : 28                       plp
0dac : aa                       tax
                                tst_x $ff,$ff-zero
0dad : 08              >            php         ;save flags
0dae : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
0db0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0db2 : 68              >            pla         ;load status
0db3 : 48              >            pha
                       >            cmp_flag $ff-zero
0db4 : 0908            >            ora #decmode        ;ignore decimal mode bit
0db6 : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0db8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0dba : 28              >            plp         ;restore status
                        
0dbb : 08                       php
0dbc : c8                       iny             ;00
0dbd : 98                       tya
0dbe : 28                       plp
0dbf : aa                       tax
                                tst_x 0,$ff-minus
0dc0 : 08              >            php         ;save flags
0dc1 : e000            >            cpx #0     ;test result
                       >            trap_ne
0dc3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0dc5 : 68              >            pla         ;load status
0dc6 : 48              >            pha
                       >            cmp_flag $ff-minus
0dc7 : 0908            >            ora #decmode        ;ignore decimal mode bit
0dc9 : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0dcb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0dcd : 28              >            plp         ;restore status
                        
0dce : 08                       php
0dcf : c8                       iny             ;01
0dd0 : 98                       tya
0dd1 : 28                       plp
0dd2 : aa                       tax
                                tst_x 1,$ff-minus-zero
0dd3 : 08              >            php         ;save flags
0dd4 : e001            >            cpx #1     ;test result
                       >            trap_ne
0dd6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0dd8 : 68              >            pla         ;load status
0dd9 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
0dda : 0908            >            ora #decmode        ;ignore decimal mode bit
0ddc : c97d            >            cmp #($ff-minus-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0dde : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0de0 : 28              >            plp         ;restore status
                        
                                load_flag 0
0de1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                        
0de3 : 48                       pha
0de4 : a900                     lda #0          ;preset status
0de6 : 98                       tya
0de7 : 28                       plp
0de8 : aa                       tax
                                tst_x 1,0
0de9 : 08              >            php         ;save flags
0dea : e001            >            cpx #1     ;test result
                       >            trap_ne
0dec : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0dee : 68              >            pla         ;load status
0def : 48              >            pha
                       >            cmp_flag 0
0df0 : 0908            >            ora #decmode        ;ignore decimal mode bit
0df2 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0df4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0df6 : 28              >            plp         ;restore status
                        
0df7 : 08                       php
0df8 : 88                       dey             ;00
0df9 : 98                       tya
0dfa : 28                       plp
0dfb : aa                       tax
                                tst_x 0,zero
0dfc : 08              >            php         ;save flags
0dfd : e000            >            cpx #0     ;test result
                       >            trap_ne
0dff : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0e01 : 68              >            pla         ;load status
0e02 : 48              >            pha
                       >            cmp_flag zero
0e03 : 0908            >            ora #decmode        ;ignore decimal mode bit
0e05 : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0e07 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0e09 : 28              >            plp         ;restore status
                        
0e0a : 08                       php
0e0b : 88                       dey             ;ff
0e0c : 98                       tya
0e0d : 28                       plp
0e0e : aa                       tax
                                tst_x $ff,minus
0e0f : 08              >            php         ;save flags
0e10 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
0e12 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0e14 : 68              >            pla         ;load status
0e15 : 48              >            pha
                       >            cmp_flag minus
0e16 : 0908            >            ora #decmode        ;ignore decimal mode bit
0e18 : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0e1a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0e1c : 28              >            plp         ;restore status
                        
                                next_test
0e1d : ad0002          >            lda test_case   ;previous test
0e20 : c90d            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0e22 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000e =                 >test_num = test_num + 1
0e24 : a90e            >            lda #test_num   ;*** next tests' number
0e26 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                             
                        ;TSX sets NZ - TXS does not
                        ;  This section also tests for proper stack wrap around.
0e29 : a201                     ldx #1          ;01
                                set_stat $ff
                       >            load_flag $ff
0e2b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0e2d : 48              >            pha         ;use stack to load status
0e2e : 28              >            plp
                        
0e2f : 9a                       txs
0e30 : 08                       php
0e31 : ad0101                   lda $101
                                cmp_flag $ff
0e34 : 0908            >            ora #decmode        ;ignore decimal mode bit
0e36 : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0e38 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
0e3a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0e3c : 48              >            pha         ;use stack to load status
0e3d : 28              >            plp
                        
0e3e : 9a                       txs
0e3f : 08                       php
0e40 : ad0101                   lda $101
                                cmp_flag 0
0e43 : 0908            >            ora #decmode        ;ignore decimal mode bit
0e45 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0e47 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0e49 : ca                       dex             ;00
                                set_stat $ff
                       >            load_flag $ff
0e4a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0e4c : 48              >            pha         ;use stack to load status
0e4d : 28              >            plp
                        
0e4e : 9a                       txs
0e4f : 08                       php
0e50 : ad0001                   lda $100
                                cmp_flag $ff
0e53 : 0908            >            ora #decmode        ;ignore decimal mode bit
0e55 : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0e57 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
0e59 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0e5b : 48              >            pha         ;use stack to load status
0e5c : 28              >            plp
                        
0e5d : 9a                       txs
0e5e : 08                       php
0e5f : ad0001                   lda $100
                                cmp_flag 0
0e62 : 0908            >            ora #decmode        ;ignore decimal mode bit
0e64 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0e66 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0e68 : ca                       dex             ;ff
                                set_stat $ff
                       >            load_flag $ff
0e69 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0e6b : 48              >            pha         ;use stack to load status
0e6c : 28              >            plp
                        
0e6d : 9a                       txs
0e6e : 08                       php
0e6f : adff01                   lda $1ff
                                cmp_flag $ff
0e72 : 0908            >            ora #decmode        ;ignore decimal mode bit
0e74 : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0e76 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
0e78 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0e7a : 48              >            pha         ;use stack to load status
0e7b : 28              >            plp
                        
0e7c : 9a                       txs
0e7d : 08                       php
0e7e : adff01                   lda $1ff
                                cmp_flag 0
0e81 : 0908            >            ora #decmode        ;ignore decimal mode bit
0e83 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                        
                                
0e85 : a201                     ldx #1
0e87 : 9a                       txs             ;sp=01
                                set_stat $ff
                       >            load_flag $ff
0e88 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0e8a : 48              >            pha         ;use stack to load status
0e8b : 28              >            plp
                        
0e8c : ba                       tsx             ;clears Z, N
0e8d : 08                       php             ;sp=00
0e8e : e001                     cpx #1
                                trap_ne
0e90 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0e92 : ad0101                   lda $101
                                cmp_flag $ff-minus-zero
0e95 : 0908            >            ora #decmode        ;ignore decimal mode bit
0e97 : c97d            >            cmp #($ff-minus-zero|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0e99 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
0e9b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0e9d : 48              >            pha         ;use stack to load status
0e9e : 28              >            plp
                        
0e9f : ba                       tsx             ;clears N, sets Z
0ea0 : 08                       php             ;sp=ff
0ea1 : e000                     cpx #0
                                trap_ne
0ea3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0ea5 : ad0001                   lda $100
                                cmp_flag $ff-minus
0ea8 : 0908            >            ora #decmode        ;ignore decimal mode bit
0eaa : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0eac : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
0eae : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0eb0 : 48              >            pha         ;use stack to load status
0eb1 : 28              >            plp
                        
0eb2 : ba                       tsx             ;clears N, sets Z
0eb3 : 08                       php             ;sp=fe
0eb4 : e0ff                     cpx #$ff
                                trap_ne
0eb6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0eb8 : adff01                   lda $1ff
                                cmp_flag $ff-zero
0ebb : 0908            >            ora #decmode        ;ignore decimal mode bit
0ebd : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0ebf : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                
0ec1 : a201                     ldx #1
0ec3 : 9a                       txs             ;sp=01
                                set_stat 0
                       >            load_flag 0
0ec4 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0ec6 : 48              >            pha         ;use stack to load status
0ec7 : 28              >            plp
                        
0ec8 : ba                       tsx             ;clears Z, N
0ec9 : 08                       php             ;sp=00
0eca : e001                     cpx #1
                                trap_ne
0ecc : d0fe            >        bne *           ;failed not equal (non zero)
                        
0ece : ad0101                   lda $101
                                cmp_flag 0
0ed1 : 0908            >            ora #decmode        ;ignore decimal mode bit
0ed3 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0ed5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
0ed7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0ed9 : 48              >            pha         ;use stack to load status
0eda : 28              >            plp
                        
0edb : ba                       tsx             ;clears N, sets Z
0edc : 08                       php             ;sp=ff
0edd : e000                     cpx #0
                                trap_ne
0edf : d0fe            >        bne *           ;failed not equal (non zero)
                        
0ee1 : ad0001                   lda $100
                                cmp_flag zero
0ee4 : 0908            >            ora #decmode        ;ignore decimal mode bit
0ee6 : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0ee8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
0eea : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0eec : 48              >            pha         ;use stack to load status
0eed : 28              >            plp
                        
0eee : ba                       tsx             ;clears N, sets Z
0eef : 08                       php             ;sp=fe
0ef0 : e0ff                     cpx #$ff
                                trap_ne
0ef2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0ef4 : adff01                   lda $1ff
                                cmp_flag minus
0ef7 : 0908            >            ora #decmode        ;ignore decimal mode bit
0ef9 : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0efb : d0fe            >        bne *           ;failed not equal (non zero)
                        
0efd : 68                       pla             ;sp=ff
                                next_test
0efe : ad0002          >            lda test_case   ;previous test
0f01 : c90e            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0f03 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000f =                 >test_num = test_num + 1
0f05 : a90f            >            lda #test_num   ;*** next tests' number
0f07 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; testing index register load & store LDY LDX STY STX all addressing modes
                        ; LDX / STX - zp,y / abs,y
0f0a : a003                     ldy #3
0f0c :                  tldx    
                                set_stat 0
                       >            load_flag 0
0f0c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0f0e : 48              >            pha         ;use stack to load status
0f0f : 28              >            plp
                        
0f10 : b615                     ldx zp1,y
0f12 : 08                       php         ;test stores do not alter flags
0f13 : 8a                       txa
0f14 : 49c3                     eor #$c3
0f16 : 28                       plp
0f17 : 990302                   sta abst,y
0f1a : 08                       php         ;flags after load/store sequence
0f1b : 49c3                     eor #$c3
0f1d : d91802                   cmp abs1,y  ;test result
                                trap_ne
0f20 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0f22 : 68                       pla         ;load status
                                eor_flag 0
0f23 : 0908            >            ora #decmode        ;ignore decimal mode bit
0f25 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
0f27 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
0f2a : d0fe            >        bne *           ;failed not equal (non zero)
                        
0f2c : 88                       dey
0f2d : 10dd                     bpl tldx                  
                        
0f2f : a003                     ldy #3
0f31 :                  tldx1   
                                set_stat $ff
                       >            load_flag $ff
0f31 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0f33 : 48              >            pha         ;use stack to load status
0f34 : 28              >            plp
                        
0f35 : b615                     ldx zp1,y
0f37 : 08                       php         ;test stores do not alter flags
0f38 : 8a                       txa
0f39 : 49c3                     eor #$c3
0f3b : 28                       plp
0f3c : 990302                   sta abst,y
0f3f : 08                       php         ;flags after load/store sequence
0f40 : 49c3                     eor #$c3
0f42 : d91802                   cmp abs1,y  ;test result
                                trap_ne
0f45 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0f47 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
0f48 : 0908            >            ora #decmode        ;ignore decimal mode bit
0f4a : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
0f4c : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
0f4f : d0fe            >        bne *           ;failed not equal (non zero)
                        
0f51 : 88                       dey
0f52 : 10dd                     bpl tldx1                  
                        
0f54 : a003                     ldy #3
0f56 :                  tldx2   
                                set_stat 0
                       >            load_flag 0
0f56 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0f58 : 48              >            pha         ;use stack to load status
0f59 : 28              >            plp
                        
0f5a : be1802                   ldx abs1,y
0f5d : 08                       php         ;test stores do not alter flags
0f5e : 8a                       txa
0f5f : 49c3                     eor #$c3
0f61 : aa                       tax
0f62 : 28                       plp
0f63 : 960c                     stx zpt,y
0f65 : 08                       php         ;flags after load/store sequence
0f66 : 49c3                     eor #$c3
0f68 : d91500                   cmp zp1,y   ;test result
                                trap_ne
0f6b : d0fe            >        bne *           ;failed not equal (non zero)
                        
0f6d : 68                       pla         ;load status
                                eor_flag 0
0f6e : 0908            >            ora #decmode        ;ignore decimal mode bit
0f70 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
0f72 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
0f75 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0f77 : 88                       dey
0f78 : 10dc                     bpl tldx2                  
                        
0f7a : a003                     ldy #3
0f7c :                  tldx3   
                                set_stat $ff
                       >            load_flag $ff
0f7c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0f7e : 48              >            pha         ;use stack to load status
0f7f : 28              >            plp
                        
0f80 : be1802                   ldx abs1,y
0f83 : 08                       php         ;test stores do not alter flags
0f84 : 8a                       txa
0f85 : 49c3                     eor #$c3
0f87 : aa                       tax
0f88 : 28                       plp
0f89 : 960c                     stx zpt,y
0f8b : 08                       php         ;flags after load/store sequence
0f8c : 49c3                     eor #$c3
0f8e : d91500                   cmp zp1,y   ;test result
                                trap_ne
0f91 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0f93 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
0f94 : 0908            >            ora #decmode        ;ignore decimal mode bit
0f96 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
0f98 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
0f9b : d0fe            >        bne *           ;failed not equal (non zero)
                        
0f9d : 88                       dey
0f9e : 10dc                     bpl tldx3
                                
0fa0 : a003                     ldy #3      ;testing store result
0fa2 : a200                     ldx #0
0fa4 : b90c00           tstx    lda zpt,y
0fa7 : 49c3                     eor #$c3
0fa9 : d91500                   cmp zp1,y
                                trap_ne     ;store to zp data
0fac : d0fe            >        bne *           ;failed not equal (non zero)
                        
0fae : 960c                     stx zpt,y   ;clear                
0fb0 : b90302                   lda abst,y
0fb3 : 49c3                     eor #$c3
0fb5 : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
0fb8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0fba : 8a                       txa
0fbb : 990302                   sta abst,y  ;clear                
0fbe : 88                       dey
0fbf : 10e3                     bpl tstx
                                next_test
0fc1 : ad0002          >            lda test_case   ;previous test
0fc4 : c90f            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0fc6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0010 =                 >test_num = test_num + 1
0fc8 : a910            >            lda #test_num   ;*** next tests' number
0fca : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; indexed wraparound test (only zp should wrap)
0fcd : a0fd                     ldy #3+$fa
0fcf : b61b             tldx4   ldx zp1-$fa&$ff,y   ;wrap on indexed zp
0fd1 : 8a                       txa
0fd2 : 990901                   sta abst-$fa,y      ;no STX abs,y!
0fd5 : 88                       dey
0fd6 : c0fa                     cpy #$fa
0fd8 : b0f5                     bcs tldx4                  
0fda : a0fd                     ldy #3+$fa
0fdc : be1e01           tldx5   ldx abs1-$fa,y      ;no wrap on indexed abs
0fdf : 9612                     stx zpt-$fa&$ff,y
0fe1 : 88                       dey
0fe2 : c0fa                     cpy #$fa
0fe4 : b0f6                     bcs tldx5                  
0fe6 : a003                     ldy #3      ;testing wraparound result
0fe8 : a200                     ldx #0
0fea : b90c00           tstx1   lda zpt,y
0fed : d91500                   cmp zp1,y
                                trap_ne     ;store to zp data
0ff0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0ff2 : 960c                     stx zpt,y   ;clear                
0ff4 : b90302                   lda abst,y
0ff7 : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
0ffa : d0fe            >        bne *           ;failed not equal (non zero)
                        
0ffc : 8a                       txa
0ffd : 990302                   sta abst,y  ;clear                
1000 : 88                       dey
1001 : 10e7                     bpl tstx1
                                next_test
1003 : ad0002          >            lda test_case   ;previous test
1006 : c910            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1008 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0011 =                 >test_num = test_num + 1
100a : a911            >            lda #test_num   ;*** next tests' number
100c : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; LDY / STY - zp,x / abs,x
100f : a203                     ldx #3
1011 :                  tldy    
                                set_stat 0
                       >            load_flag 0
1011 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1013 : 48              >            pha         ;use stack to load status
1014 : 28              >            plp
                        
1015 : b415                     ldy zp1,x
1017 : 08                       php         ;test stores do not alter flags
1018 : 98                       tya
1019 : 49c3                     eor #$c3
101b : 28                       plp
101c : 9d0302                   sta abst,x
101f : 08                       php         ;flags after load/store sequence
1020 : 49c3                     eor #$c3
1022 : dd1802                   cmp abs1,x  ;test result
                                trap_ne
1025 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1027 : 68                       pla         ;load status
                                eor_flag 0
1028 : 0908            >            ora #decmode        ;ignore decimal mode bit
102a : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
102c : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
102f : d0fe            >        bne *           ;failed not equal (non zero)
                        
1031 : ca                       dex
1032 : 10dd                     bpl tldy                  
                        
1034 : a203                     ldx #3
1036 :                  tldy1   
                                set_stat $ff
                       >            load_flag $ff
1036 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1038 : 48              >            pha         ;use stack to load status
1039 : 28              >            plp
                        
103a : b415                     ldy zp1,x
103c : 08                       php         ;test stores do not alter flags
103d : 98                       tya
103e : 49c3                     eor #$c3
1040 : 28                       plp
1041 : 9d0302                   sta abst,x
1044 : 08                       php         ;flags after load/store sequence
1045 : 49c3                     eor #$c3
1047 : dd1802                   cmp abs1,x  ;test result
                                trap_ne
104a : d0fe            >        bne *           ;failed not equal (non zero)
                        
104c : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
104d : 0908            >            ora #decmode        ;ignore decimal mode bit
104f : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1051 : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
1054 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1056 : ca                       dex
1057 : 10dd                     bpl tldy1                  
                        
1059 : a203                     ldx #3
105b :                  tldy2   
                                set_stat 0
                       >            load_flag 0
105b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
105d : 48              >            pha         ;use stack to load status
105e : 28              >            plp
                        
105f : bc1802                   ldy abs1,x
1062 : 08                       php         ;test stores do not alter flags
1063 : 98                       tya
1064 : 49c3                     eor #$c3
1066 : a8                       tay
1067 : 28                       plp
1068 : 940c                     sty zpt,x
106a : 08                       php         ;flags after load/store sequence
106b : 49c3                     eor #$c3
106d : d515                     cmp zp1,x   ;test result
                                trap_ne
106f : d0fe            >        bne *           ;failed not equal (non zero)
                        
1071 : 68                       pla         ;load status
                                eor_flag 0
1072 : 0908            >            ora #decmode        ;ignore decimal mode bit
1074 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1076 : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
1079 : d0fe            >        bne *           ;failed not equal (non zero)
                        
107b : ca                       dex
107c : 10dd                     bpl tldy2                  
                        
107e : a203                     ldx #3
1080 :                  tldy3
                                set_stat $ff
                       >            load_flag $ff
1080 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1082 : 48              >            pha         ;use stack to load status
1083 : 28              >            plp
                        
1084 : bc1802                   ldy abs1,x
1087 : 08                       php         ;test stores do not alter flags
1088 : 98                       tya
1089 : 49c3                     eor #$c3
108b : a8                       tay
108c : 28                       plp
108d : 940c                     sty zpt,x
108f : 08                       php         ;flags after load/store sequence
1090 : 49c3                     eor #$c3
1092 : d515                     cmp zp1,x   ;test result
                                trap_ne
1094 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1096 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1097 : 0908            >            ora #decmode        ;ignore decimal mode bit
1099 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
109b : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
109e : d0fe            >        bne *           ;failed not equal (non zero)
                        
10a0 : ca                       dex
10a1 : 10dd                     bpl tldy3
                        
10a3 : a203                     ldx #3      ;testing store result
10a5 : a000                     ldy #0
10a7 : b50c             tsty    lda zpt,x
10a9 : 49c3                     eor #$c3
10ab : d515                     cmp zp1,x
                                trap_ne     ;store to zp,x data
10ad : d0fe            >        bne *           ;failed not equal (non zero)
                        
10af : 940c                     sty zpt,x   ;clear                
10b1 : bd0302                   lda abst,x
10b4 : 49c3                     eor #$c3
10b6 : dd1802                   cmp abs1,x
                                trap_ne     ;store to abs,x data
10b9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
10bb : 8a                       txa
10bc : 9d0302                   sta abst,x  ;clear                
10bf : ca                       dex
10c0 : 10e5                     bpl tsty
                                next_test
10c2 : ad0002          >            lda test_case   ;previous test
10c5 : c911            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
10c7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0012 =                 >test_num = test_num + 1
10c9 : a912            >            lda #test_num   ;*** next tests' number
10cb : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; indexed wraparound test (only zp should wrap)
10ce : a2fd                     ldx #3+$fa
10d0 : b41b             tldy4   ldy zp1-$fa&$ff,x   ;wrap on indexed zp
10d2 : 98                       tya
10d3 : 9d0901                   sta abst-$fa,x      ;no STX abs,x!
10d6 : ca                       dex
10d7 : e0fa                     cpx #$fa
10d9 : b0f5                     bcs tldy4                  
10db : a2fd                     ldx #3+$fa
10dd : bc1e01           tldy5   ldy abs1-$fa,x      ;no wrap on indexed abs
10e0 : 9412                     sty zpt-$fa&$ff,x
10e2 : ca                       dex
10e3 : e0fa                     cpx #$fa
10e5 : b0f6                     bcs tldy5                  
10e7 : a203                     ldx #3      ;testing wraparound result
10e9 : a000                     ldy #0
10eb : b50c             tsty1   lda zpt,x
10ed : d515                     cmp zp1,x
                                trap_ne     ;store to zp,x data
10ef : d0fe            >        bne *           ;failed not equal (non zero)
                        
10f1 : 940c                     sty zpt,x   ;clear                
10f3 : bd0302                   lda abst,x
10f6 : dd1802                   cmp abs1,x
                                trap_ne     ;store to abs,x data
10f9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
10fb : 8a                       txa
10fc : 9d0302                   sta abst,x  ;clear                
10ff : ca                       dex
1100 : 10e9                     bpl tsty1
                                next_test
1102 : ad0002          >            lda test_case   ;previous test
1105 : c912            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1107 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0013 =                 >test_num = test_num + 1
1109 : a913            >            lda #test_num   ;*** next tests' number
110b : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDX / STX - zp / abs / #
                                set_stat 0  
                       >            load_flag 0  
110e : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
1110 : 48              >            pha         ;use stack to load status
1111 : 28              >            plp
                        
1112 : a615                     ldx zp1
1114 : 08                       php         ;test stores do not alter flags
1115 : 8a                       txa
1116 : 49c3                     eor #$c3
1118 : aa                       tax
1119 : 28                       plp
111a : 8e0302                   stx abst
111d : 08                       php         ;flags after load/store sequence
111e : 49c3                     eor #$c3
1120 : aa                       tax
1121 : e0c3                     cpx #$c3    ;test result
                                trap_ne
1123 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1125 : 68                       pla         ;load status
                                eor_flag 0
1126 : 0908            >            ora #decmode        ;ignore decimal mode bit
1128 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
112a : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
112d : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
112f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1131 : 48              >            pha         ;use stack to load status
1132 : 28              >            plp
                        
1133 : a616                     ldx zp1+1
1135 : 08                       php         ;test stores do not alter flags
1136 : 8a                       txa
1137 : 49c3                     eor #$c3
1139 : aa                       tax
113a : 28                       plp
113b : 8e0402                   stx abst+1
113e : 08                       php         ;flags after load/store sequence
113f : 49c3                     eor #$c3
1141 : aa                       tax
1142 : e082                     cpx #$82    ;test result
                                trap_ne
1144 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1146 : 68                       pla         ;load status
                                eor_flag 0
1147 : 0908            >            ora #decmode        ;ignore decimal mode bit
1149 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
114b : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
114e : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1150 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1152 : 48              >            pha         ;use stack to load status
1153 : 28              >            plp
                        
1154 : a617                     ldx zp1+2
1156 : 08                       php         ;test stores do not alter flags
1157 : 8a                       txa
1158 : 49c3                     eor #$c3
115a : aa                       tax
115b : 28                       plp
115c : 8e0502                   stx abst+2
115f : 08                       php         ;flags after load/store sequence
1160 : 49c3                     eor #$c3
1162 : aa                       tax
1163 : e041                     cpx #$41    ;test result
                                trap_ne
1165 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1167 : 68                       pla         ;load status
                                eor_flag 0
1168 : 0908            >            ora #decmode        ;ignore decimal mode bit
116a : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
116c : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
116f : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1171 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1173 : 48              >            pha         ;use stack to load status
1174 : 28              >            plp
                        
1175 : a618                     ldx zp1+3
1177 : 08                       php         ;test stores do not alter flags
1178 : 8a                       txa
1179 : 49c3                     eor #$c3
117b : aa                       tax
117c : 28                       plp
117d : 8e0602                   stx abst+3
1180 : 08                       php         ;flags after load/store sequence
1181 : 49c3                     eor #$c3
1183 : aa                       tax
1184 : e000                     cpx #0      ;test result
                                trap_ne
1186 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1188 : 68                       pla         ;load status
                                eor_flag 0
1189 : 0908            >            ora #decmode        ;ignore decimal mode bit
118b : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
118d : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
1190 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
1192 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1194 : 48              >            pha         ;use stack to load status
1195 : 28              >            plp
                        
1196 : a615                     ldx zp1  
1198 : 08                       php         ;test stores do not alter flags
1199 : 8a                       txa
119a : 49c3                     eor #$c3
119c : aa                       tax
119d : 28                       plp
119e : 8e0302                   stx abst  
11a1 : 08                       php         ;flags after load/store sequence
11a2 : 49c3                     eor #$c3
11a4 : aa                       tax
11a5 : e0c3                     cpx #$c3    ;test result
                                trap_ne     ;
11a7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
11a9 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
11aa : 0908            >            ora #decmode        ;ignore decimal mode bit
11ac : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
11ae : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
11b1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
11b3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
11b5 : 48              >            pha         ;use stack to load status
11b6 : 28              >            plp
                        
11b7 : a616                     ldx zp1+1
11b9 : 08                       php         ;test stores do not alter flags
11ba : 8a                       txa
11bb : 49c3                     eor #$c3
11bd : aa                       tax
11be : 28                       plp
11bf : 8e0402                   stx abst+1
11c2 : 08                       php         ;flags after load/store sequence
11c3 : 49c3                     eor #$c3
11c5 : aa                       tax
11c6 : e082                     cpx #$82    ;test result
                                trap_ne
11c8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
11ca : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
11cb : 0908            >            ora #decmode        ;ignore decimal mode bit
11cd : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
11cf : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
11d2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
11d4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
11d6 : 48              >            pha         ;use stack to load status
11d7 : 28              >            plp
                        
11d8 : a617                     ldx zp1+2
11da : 08                       php         ;test stores do not alter flags
11db : 8a                       txa
11dc : 49c3                     eor #$c3
11de : aa                       tax
11df : 28                       plp
11e0 : 8e0502                   stx abst+2
11e3 : 08                       php         ;flags after load/store sequence
11e4 : 49c3                     eor #$c3
11e6 : aa                       tax
11e7 : e041                     cpx #$41    ;test result
                                trap_ne     ;
11e9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
11eb : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
11ec : 0908            >            ora #decmode        ;ignore decimal mode bit
11ee : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
11f0 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
11f3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
11f5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
11f7 : 48              >            pha         ;use stack to load status
11f8 : 28              >            plp
                        
11f9 : a618                     ldx zp1+3
11fb : 08                       php         ;test stores do not alter flags
11fc : 8a                       txa
11fd : 49c3                     eor #$c3
11ff : aa                       tax
1200 : 28                       plp
1201 : 8e0602                   stx abst+3
1204 : 08                       php         ;flags after load/store sequence
1205 : 49c3                     eor #$c3
1207 : aa                       tax
1208 : e000                     cpx #0      ;test result
                                trap_ne
120a : d0fe            >        bne *           ;failed not equal (non zero)
                        
120c : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
120d : 0908            >            ora #decmode        ;ignore decimal mode bit
120f : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1211 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
1214 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat 0
                       >            load_flag 0
1216 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1218 : 48              >            pha         ;use stack to load status
1219 : 28              >            plp
                        
121a : ae1802                   ldx abs1  
121d : 08                       php         ;test stores do not alter flags
121e : 8a                       txa
121f : 49c3                     eor #$c3
1221 : aa                       tax
1222 : 28                       plp
1223 : 860c                     stx zpt  
1225 : 08                       php         ;flags after load/store sequence
1226 : 49c3                     eor #$c3
1228 : c515                     cmp zp1     ;test result
                                trap_ne
122a : d0fe            >        bne *           ;failed not equal (non zero)
                        
122c : 68                       pla         ;load status
                                eor_flag 0
122d : 0908            >            ora #decmode        ;ignore decimal mode bit
122f : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1231 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1234 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1236 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1238 : 48              >            pha         ;use stack to load status
1239 : 28              >            plp
                        
123a : ae1902                   ldx abs1+1
123d : 08                       php         ;test stores do not alter flags
123e : 8a                       txa
123f : 49c3                     eor #$c3
1241 : aa                       tax
1242 : 28                       plp
1243 : 860d                     stx zpt+1
1245 : 08                       php         ;flags after load/store sequence
1246 : 49c3                     eor #$c3
1248 : c516                     cmp zp1+1   ;test result
                                trap_ne
124a : d0fe            >        bne *           ;failed not equal (non zero)
                        
124c : 68                       pla         ;load status
                                eor_flag 0
124d : 0908            >            ora #decmode        ;ignore decimal mode bit
124f : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1251 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1254 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1256 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1258 : 48              >            pha         ;use stack to load status
1259 : 28              >            plp
                        
125a : ae1a02                   ldx abs1+2
125d : 08                       php         ;test stores do not alter flags
125e : 8a                       txa
125f : 49c3                     eor #$c3
1261 : aa                       tax
1262 : 28                       plp
1263 : 860e                     stx zpt+2
1265 : 08                       php         ;flags after load/store sequence
1266 : 49c3                     eor #$c3
1268 : c517                     cmp zp1+2   ;test result
                                trap_ne
126a : d0fe            >        bne *           ;failed not equal (non zero)
                        
126c : 68                       pla         ;load status
                                eor_flag 0
126d : 0908            >            ora #decmode        ;ignore decimal mode bit
126f : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1271 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1274 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1276 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1278 : 48              >            pha         ;use stack to load status
1279 : 28              >            plp
                        
127a : ae1b02                   ldx abs1+3
127d : 08                       php         ;test stores do not alter flags
127e : 8a                       txa
127f : 49c3                     eor #$c3
1281 : aa                       tax
1282 : 28                       plp
1283 : 860f                     stx zpt+3
1285 : 08                       php         ;flags after load/store sequence
1286 : 49c3                     eor #$c3
1288 : c518                     cmp zp1+3   ;test result
                                trap_ne
128a : d0fe            >        bne *           ;failed not equal (non zero)
                        
128c : 68                       pla         ;load status
                                eor_flag 0
128d : 0908            >            ora #decmode        ;ignore decimal mode bit
128f : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1291 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
1294 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
1296 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1298 : 48              >            pha         ;use stack to load status
1299 : 28              >            plp
                        
129a : ae1802                   ldx abs1  
129d : 08                       php         ;test stores do not alter flags
129e : 8a                       txa
129f : 49c3                     eor #$c3
12a1 : aa                       tax
12a2 : 28                       plp
12a3 : 860c                     stx zpt  
12a5 : 08                       php         ;flags after load/store sequence
12a6 : 49c3                     eor #$c3
12a8 : aa                       tax
12a9 : e415                     cpx zp1     ;test result
                                trap_ne
12ab : d0fe            >        bne *           ;failed not equal (non zero)
                        
12ad : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
12ae : 0908            >            ora #decmode        ;ignore decimal mode bit
12b0 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
12b2 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
12b5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
12b7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
12b9 : 48              >            pha         ;use stack to load status
12ba : 28              >            plp
                        
12bb : ae1902                   ldx abs1+1
12be : 08                       php         ;test stores do not alter flags
12bf : 8a                       txa
12c0 : 49c3                     eor #$c3
12c2 : aa                       tax
12c3 : 28                       plp
12c4 : 860d                     stx zpt+1
12c6 : 08                       php         ;flags after load/store sequence
12c7 : 49c3                     eor #$c3
12c9 : aa                       tax
12ca : e416                     cpx zp1+1   ;test result
                                trap_ne
12cc : d0fe            >        bne *           ;failed not equal (non zero)
                        
12ce : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
12cf : 0908            >            ora #decmode        ;ignore decimal mode bit
12d1 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
12d3 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
12d6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
12d8 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
12da : 48              >            pha         ;use stack to load status
12db : 28              >            plp
                        
12dc : ae1a02                   ldx abs1+2
12df : 08                       php         ;test stores do not alter flags
12e0 : 8a                       txa
12e1 : 49c3                     eor #$c3
12e3 : aa                       tax
12e4 : 28                       plp
12e5 : 860e                     stx zpt+2
12e7 : 08                       php         ;flags after load/store sequence
12e8 : 49c3                     eor #$c3
12ea : aa                       tax
12eb : e417                     cpx zp1+2   ;test result
                                trap_ne
12ed : d0fe            >        bne *           ;failed not equal (non zero)
                        
12ef : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
12f0 : 0908            >            ora #decmode        ;ignore decimal mode bit
12f2 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
12f4 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
12f7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
12f9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
12fb : 48              >            pha         ;use stack to load status
12fc : 28              >            plp
                        
12fd : ae1b02                   ldx abs1+3
1300 : 08                       php         ;test stores do not alter flags
1301 : 8a                       txa
1302 : 49c3                     eor #$c3
1304 : aa                       tax
1305 : 28                       plp
1306 : 860f                     stx zpt+3
1308 : 08                       php         ;flags after load/store sequence
1309 : 49c3                     eor #$c3
130b : aa                       tax
130c : e418                     cpx zp1+3   ;test result
                                trap_ne
130e : d0fe            >        bne *           ;failed not equal (non zero)
                        
1310 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1311 : 0908            >            ora #decmode        ;ignore decimal mode bit
1313 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1315 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
1318 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat 0  
                       >            load_flag 0  
131a : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
131c : 48              >            pha         ;use stack to load status
131d : 28              >            plp
                        
131e : a2c3                     ldx #$c3
1320 : 08                       php
1321 : ec1802                   cpx abs1    ;test result
                                trap_ne
1324 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1326 : 68                       pla         ;load status
                                eor_flag 0
1327 : 0908            >            ora #decmode        ;ignore decimal mode bit
1329 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
132b : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
132e : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1330 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1332 : 48              >            pha         ;use stack to load status
1333 : 28              >            plp
                        
1334 : a282                     ldx #$82
1336 : 08                       php
1337 : ec1902                   cpx abs1+1  ;test result
                                trap_ne
133a : d0fe            >        bne *           ;failed not equal (non zero)
                        
133c : 68                       pla         ;load status
                                eor_flag 0
133d : 0908            >            ora #decmode        ;ignore decimal mode bit
133f : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1341 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1344 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1346 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1348 : 48              >            pha         ;use stack to load status
1349 : 28              >            plp
                        
134a : a241                     ldx #$41
134c : 08                       php
134d : ec1a02                   cpx abs1+2  ;test result
                                trap_ne
1350 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1352 : 68                       pla         ;load status
                                eor_flag 0
1353 : 0908            >            ora #decmode        ;ignore decimal mode bit
1355 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1357 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
135a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
135c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
135e : 48              >            pha         ;use stack to load status
135f : 28              >            plp
                        
1360 : a200                     ldx #0
1362 : 08                       php
1363 : ec1b02                   cpx abs1+3  ;test result
                                trap_ne
1366 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1368 : 68                       pla         ;load status
                                eor_flag 0
1369 : 0908            >            ora #decmode        ;ignore decimal mode bit
136b : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
136d : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
1370 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
1372 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1374 : 48              >            pha         ;use stack to load status
1375 : 28              >            plp
                        
1376 : a2c3                     ldx #$c3  
1378 : 08                       php
1379 : ec1802                   cpx abs1    ;test result
                                trap_ne
137c : d0fe            >        bne *           ;failed not equal (non zero)
                        
137e : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
137f : 0908            >            ora #decmode        ;ignore decimal mode bit
1381 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1383 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1386 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1388 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
138a : 48              >            pha         ;use stack to load status
138b : 28              >            plp
                        
138c : a282                     ldx #$82
138e : 08                       php
138f : ec1902                   cpx abs1+1  ;test result
                                trap_ne
1392 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1394 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1395 : 0908            >            ora #decmode        ;ignore decimal mode bit
1397 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1399 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
139c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
139e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
13a0 : 48              >            pha         ;use stack to load status
13a1 : 28              >            plp
                        
13a2 : a241                     ldx #$41
13a4 : 08                       php
13a5 : ec1a02                   cpx abs1+2  ;test result
                                trap_ne
13a8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
13aa : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
13ab : 0908            >            ora #decmode        ;ignore decimal mode bit
13ad : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
13af : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
13b2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
13b4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
13b6 : 48              >            pha         ;use stack to load status
13b7 : 28              >            plp
                        
13b8 : a200                     ldx #0
13ba : 08                       php
13bb : ec1b02                   cpx abs1+3  ;test result
                                trap_ne
13be : d0fe            >        bne *           ;failed not equal (non zero)
                        
13c0 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
13c1 : 0908            >            ora #decmode        ;ignore decimal mode bit
13c3 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
13c5 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
13c8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
13ca : a200                     ldx #0
13cc : a50c                     lda zpt  
13ce : 49c3                     eor #$c3
13d0 : c515                     cmp zp1  
                                trap_ne     ;store to zp data
13d2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
13d4 : 860c                     stx zpt     ;clear                
13d6 : ad0302                   lda abst  
13d9 : 49c3                     eor #$c3
13db : cd1802                   cmp abs1  
                                trap_ne     ;store to abs data
13de : d0fe            >        bne *           ;failed not equal (non zero)
                        
13e0 : 8e0302                   stx abst    ;clear                
13e3 : a50d                     lda zpt+1
13e5 : 49c3                     eor #$c3
13e7 : c516                     cmp zp1+1
                                trap_ne     ;store to zp data
13e9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
13eb : 860d                     stx zpt+1   ;clear                
13ed : ad0402                   lda abst+1
13f0 : 49c3                     eor #$c3
13f2 : cd1902                   cmp abs1+1
                                trap_ne     ;store to abs data
13f5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
13f7 : 8e0402                   stx abst+1  ;clear                
13fa : a50e                     lda zpt+2
13fc : 49c3                     eor #$c3
13fe : c517                     cmp zp1+2
                                trap_ne     ;store to zp data
1400 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1402 : 860e                     stx zpt+2   ;clear                
1404 : ad0502                   lda abst+2
1407 : 49c3                     eor #$c3
1409 : cd1a02                   cmp abs1+2
                                trap_ne     ;store to abs data
140c : d0fe            >        bne *           ;failed not equal (non zero)
                        
140e : 8e0502                   stx abst+2  ;clear                
1411 : a50f                     lda zpt+3
1413 : 49c3                     eor #$c3
1415 : c518                     cmp zp1+3
                                trap_ne     ;store to zp data
1417 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1419 : 860f                     stx zpt+3   ;clear                
141b : ad0602                   lda abst+3
141e : 49c3                     eor #$c3
1420 : cd1b02                   cmp abs1+3
                                trap_ne     ;store to abs data
1423 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1425 : 8e0602                   stx abst+3  ;clear                
                                next_test
1428 : ad0002          >            lda test_case   ;previous test
142b : c913            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
142d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0014 =                 >test_num = test_num + 1
142f : a914            >            lda #test_num   ;*** next tests' number
1431 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDY / STY - zp / abs / #
                                set_stat 0
                       >            load_flag 0
1434 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1436 : 48              >            pha         ;use stack to load status
1437 : 28              >            plp
                        
1438 : a415                     ldy zp1  
143a : 08                       php         ;test stores do not alter flags
143b : 98                       tya
143c : 49c3                     eor #$c3
143e : a8                       tay
143f : 28                       plp
1440 : 8c0302                   sty abst  
1443 : 08                       php         ;flags after load/store sequence
1444 : 49c3                     eor #$c3
1446 : a8                       tay
1447 : c0c3                     cpy #$c3    ;test result
                                trap_ne
1449 : d0fe            >        bne *           ;failed not equal (non zero)
                        
144b : 68                       pla         ;load status
                                eor_flag 0
144c : 0908            >            ora #decmode        ;ignore decimal mode bit
144e : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1450 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1453 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1455 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1457 : 48              >            pha         ;use stack to load status
1458 : 28              >            plp
                        
1459 : a416                     ldy zp1+1
145b : 08                       php         ;test stores do not alter flags
145c : 98                       tya
145d : 49c3                     eor #$c3
145f : a8                       tay
1460 : 28                       plp
1461 : 8c0402                   sty abst+1
1464 : 08                       php         ;flags after load/store sequence
1465 : 49c3                     eor #$c3
1467 : a8                       tay
1468 : c082                     cpy #$82    ;test result
                                trap_ne
146a : d0fe            >        bne *           ;failed not equal (non zero)
                        
146c : 68                       pla         ;load status
                                eor_flag 0
146d : 0908            >            ora #decmode        ;ignore decimal mode bit
146f : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1471 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1474 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1476 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1478 : 48              >            pha         ;use stack to load status
1479 : 28              >            plp
                        
147a : a417                     ldy zp1+2
147c : 08                       php         ;test stores do not alter flags
147d : 98                       tya
147e : 49c3                     eor #$c3
1480 : a8                       tay
1481 : 28                       plp
1482 : 8c0502                   sty abst+2
1485 : 08                       php         ;flags after load/store sequence
1486 : 49c3                     eor #$c3
1488 : a8                       tay
1489 : c041                     cpy #$41    ;test result
                                trap_ne
148b : d0fe            >        bne *           ;failed not equal (non zero)
                        
148d : 68                       pla         ;load status
                                eor_flag 0
148e : 0908            >            ora #decmode        ;ignore decimal mode bit
1490 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1492 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1495 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1497 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1499 : 48              >            pha         ;use stack to load status
149a : 28              >            plp
                        
149b : a418                     ldy zp1+3
149d : 08                       php         ;test stores do not alter flags
149e : 98                       tya
149f : 49c3                     eor #$c3
14a1 : a8                       tay
14a2 : 28                       plp
14a3 : 8c0602                   sty abst+3
14a6 : 08                       php         ;flags after load/store sequence
14a7 : 49c3                     eor #$c3
14a9 : a8                       tay
14aa : c000                     cpy #0      ;test result
                                trap_ne
14ac : d0fe            >        bne *           ;failed not equal (non zero)
                        
14ae : 68                       pla         ;load status
                                eor_flag 0
14af : 0908            >            ora #decmode        ;ignore decimal mode bit
14b1 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
14b3 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
14b6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
14b8 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
14ba : 48              >            pha         ;use stack to load status
14bb : 28              >            plp
                        
14bc : a415                     ldy zp1  
14be : 08                       php         ;test stores do not alter flags
14bf : 98                       tya
14c0 : 49c3                     eor #$c3
14c2 : a8                       tay
14c3 : 28                       plp
14c4 : 8c0302                   sty abst  
14c7 : 08                       php         ;flags after load/store sequence
14c8 : 49c3                     eor #$c3
14ca : a8                       tay
14cb : c0c3                     cpy #$c3    ;test result
                                trap_ne
14cd : d0fe            >        bne *           ;failed not equal (non zero)
                        
14cf : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
14d0 : 0908            >            ora #decmode        ;ignore decimal mode bit
14d2 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
14d4 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
14d7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
14d9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
14db : 48              >            pha         ;use stack to load status
14dc : 28              >            plp
                        
14dd : a416                     ldy zp1+1
14df : 08                       php         ;test stores do not alter flags
14e0 : 98                       tya
14e1 : 49c3                     eor #$c3
14e3 : a8                       tay
14e4 : 28                       plp
14e5 : 8c0402                   sty abst+1
14e8 : 08                       php         ;flags after load/store sequence
14e9 : 49c3                     eor #$c3
14eb : a8                       tay
14ec : c082                     cpy #$82   ;test result
                                trap_ne
14ee : d0fe            >        bne *           ;failed not equal (non zero)
                        
14f0 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
14f1 : 0908            >            ora #decmode        ;ignore decimal mode bit
14f3 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
14f5 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
14f8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
14fa : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
14fc : 48              >            pha         ;use stack to load status
14fd : 28              >            plp
                        
14fe : a417                     ldy zp1+2
1500 : 08                       php         ;test stores do not alter flags
1501 : 98                       tya
1502 : 49c3                     eor #$c3
1504 : a8                       tay
1505 : 28                       plp
1506 : 8c0502                   sty abst+2
1509 : 08                       php         ;flags after load/store sequence
150a : 49c3                     eor #$c3
150c : a8                       tay
150d : c041                     cpy #$41    ;test result
                                trap_ne
150f : d0fe            >        bne *           ;failed not equal (non zero)
                        
1511 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1512 : 0908            >            ora #decmode        ;ignore decimal mode bit
1514 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1516 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1519 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
151b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
151d : 48              >            pha         ;use stack to load status
151e : 28              >            plp
                        
151f : a418                     ldy zp1+3
1521 : 08                       php         ;test stores do not alter flags
1522 : 98                       tya
1523 : 49c3                     eor #$c3
1525 : a8                       tay
1526 : 28                       plp
1527 : 8c0602                   sty abst+3
152a : 08                       php         ;flags after load/store sequence
152b : 49c3                     eor #$c3
152d : a8                       tay
152e : c000                     cpy #0      ;test result
                                trap_ne
1530 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1532 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1533 : 0908            >            ora #decmode        ;ignore decimal mode bit
1535 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1537 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
153a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                
                                set_stat 0
                       >            load_flag 0
153c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
153e : 48              >            pha         ;use stack to load status
153f : 28              >            plp
                        
1540 : ac1802                   ldy abs1  
1543 : 08                       php         ;test stores do not alter flags
1544 : 98                       tya
1545 : 49c3                     eor #$c3
1547 : a8                       tay
1548 : 28                       plp
1549 : 840c                     sty zpt  
154b : 08                       php         ;flags after load/store sequence
154c : 49c3                     eor #$c3
154e : a8                       tay
154f : c415                     cpy zp1     ;test result
                                trap_ne
1551 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1553 : 68                       pla         ;load status
                                eor_flag 0
1554 : 0908            >            ora #decmode        ;ignore decimal mode bit
1556 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1558 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
155b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
155d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
155f : 48              >            pha         ;use stack to load status
1560 : 28              >            plp
                        
1561 : ac1902                   ldy abs1+1
1564 : 08                       php         ;test stores do not alter flags
1565 : 98                       tya
1566 : 49c3                     eor #$c3
1568 : a8                       tay
1569 : 28                       plp
156a : 840d                     sty zpt+1
156c : 08                       php         ;flags after load/store sequence
156d : 49c3                     eor #$c3
156f : a8                       tay
1570 : c416                     cpy zp1+1   ;test result
                                trap_ne
1572 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1574 : 68                       pla         ;load status
                                eor_flag 0
1575 : 0908            >            ora #decmode        ;ignore decimal mode bit
1577 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1579 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
157c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
157e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1580 : 48              >            pha         ;use stack to load status
1581 : 28              >            plp
                        
1582 : ac1a02                   ldy abs1+2
1585 : 08                       php         ;test stores do not alter flags
1586 : 98                       tya
1587 : 49c3                     eor #$c3
1589 : a8                       tay
158a : 28                       plp
158b : 840e                     sty zpt+2
158d : 08                       php         ;flags after load/store sequence
158e : 49c3                     eor #$c3
1590 : a8                       tay
1591 : c417                     cpy zp1+2   ;test result
                                trap_ne
1593 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1595 : 68                       pla         ;load status
                                eor_flag 0
1596 : 0908            >            ora #decmode        ;ignore decimal mode bit
1598 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
159a : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
159d : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
159f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
15a1 : 48              >            pha         ;use stack to load status
15a2 : 28              >            plp
                        
15a3 : ac1b02                   ldy abs1+3
15a6 : 08                       php         ;test stores do not alter flags
15a7 : 98                       tya
15a8 : 49c3                     eor #$c3
15aa : a8                       tay
15ab : 28                       plp
15ac : 840f                     sty zpt+3
15ae : 08                       php         ;flags after load/store sequence
15af : 49c3                     eor #$c3
15b1 : a8                       tay
15b2 : c418                     cpy zp1+3   ;test result
                                trap_ne
15b4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
15b6 : 68                       pla         ;load status
                                eor_flag 0
15b7 : 0908            >            ora #decmode        ;ignore decimal mode bit
15b9 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
15bb : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
15be : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
15c0 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
15c2 : 48              >            pha         ;use stack to load status
15c3 : 28              >            plp
                        
15c4 : ac1802                   ldy abs1  
15c7 : 08                       php         ;test stores do not alter flags
15c8 : 98                       tya
15c9 : 49c3                     eor #$c3
15cb : a8                       tay
15cc : 28                       plp
15cd : 840c                     sty zpt  
15cf : 08                       php         ;flags after load/store sequence
15d0 : 49c3                     eor #$c3
15d2 : a8                       tay
15d3 : c515                     cmp zp1     ;test result
                                trap_ne
15d5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
15d7 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
15d8 : 0908            >            ora #decmode        ;ignore decimal mode bit
15da : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
15dc : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
15df : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
15e1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
15e3 : 48              >            pha         ;use stack to load status
15e4 : 28              >            plp
                        
15e5 : ac1902                   ldy abs1+1
15e8 : 08                       php         ;test stores do not alter flags
15e9 : 98                       tya
15ea : 49c3                     eor #$c3
15ec : a8                       tay
15ed : 28                       plp
15ee : 840d                     sty zpt+1
15f0 : 08                       php         ;flags after load/store sequence
15f1 : 49c3                     eor #$c3
15f3 : a8                       tay
15f4 : c516                     cmp zp1+1   ;test result
                                trap_ne
15f6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
15f8 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
15f9 : 0908            >            ora #decmode        ;ignore decimal mode bit
15fb : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
15fd : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1600 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1602 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1604 : 48              >            pha         ;use stack to load status
1605 : 28              >            plp
                        
1606 : ac1a02                   ldy abs1+2
1609 : 08                       php         ;test stores do not alter flags
160a : 98                       tya
160b : 49c3                     eor #$c3
160d : a8                       tay
160e : 28                       plp
160f : 840e                     sty zpt+2
1611 : 08                       php         ;flags after load/store sequence
1612 : 49c3                     eor #$c3
1614 : a8                       tay
1615 : c517                     cmp zp1+2   ;test result
                                trap_ne
1617 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1619 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
161a : 0908            >            ora #decmode        ;ignore decimal mode bit
161c : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
161e : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1621 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1623 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1625 : 48              >            pha         ;use stack to load status
1626 : 28              >            plp
                        
1627 : ac1b02                   ldy abs1+3
162a : 08                       php         ;test stores do not alter flags
162b : 98                       tya
162c : 49c3                     eor #$c3
162e : a8                       tay
162f : 28                       plp
1630 : 840f                     sty zpt+3
1632 : 08                       php         ;flags after load/store sequence
1633 : 49c3                     eor #$c3
1635 : a8                       tay
1636 : c518                     cmp zp1+3   ;test result
                                trap_ne
1638 : d0fe            >        bne *           ;failed not equal (non zero)
                        
163a : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
163b : 0908            >            ora #decmode        ;ignore decimal mode bit
163d : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
163f : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
1642 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                        
                                set_stat 0
                       >            load_flag 0
1644 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1646 : 48              >            pha         ;use stack to load status
1647 : 28              >            plp
                        
1648 : a0c3                     ldy #$c3  
164a : 08                       php
164b : cc1802                   cpy abs1    ;test result
                                trap_ne
164e : d0fe            >        bne *           ;failed not equal (non zero)
                        
1650 : 68                       pla         ;load status
                                eor_flag 0
1651 : 0908            >            ora #decmode        ;ignore decimal mode bit
1653 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1655 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1658 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
165a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
165c : 48              >            pha         ;use stack to load status
165d : 28              >            plp
                        
165e : a082                     ldy #$82
1660 : 08                       php
1661 : cc1902                   cpy abs1+1  ;test result
                                trap_ne
1664 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1666 : 68                       pla         ;load status
                                eor_flag 0
1667 : 0908            >            ora #decmode        ;ignore decimal mode bit
1669 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
166b : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
166e : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1670 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1672 : 48              >            pha         ;use stack to load status
1673 : 28              >            plp
                        
1674 : a041                     ldy #$41
1676 : 08                       php
1677 : cc1a02                   cpy abs1+2  ;test result
                                trap_ne
167a : d0fe            >        bne *           ;failed not equal (non zero)
                        
167c : 68                       pla         ;load status
                                eor_flag 0
167d : 0908            >            ora #decmode        ;ignore decimal mode bit
167f : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1681 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1684 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1686 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1688 : 48              >            pha         ;use stack to load status
1689 : 28              >            plp
                        
168a : a000                     ldy #0
168c : 08                       php
168d : cc1b02                   cpy abs1+3  ;test result
                                trap_ne
1690 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1692 : 68                       pla         ;load status
                                eor_flag 0
1693 : 0908            >            ora #decmode        ;ignore decimal mode bit
1695 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1697 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
169a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
169c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
169e : 48              >            pha         ;use stack to load status
169f : 28              >            plp
                        
16a0 : a0c3                     ldy #$c3  
16a2 : 08                       php
16a3 : cc1802                   cpy abs1    ;test result
                                trap_ne
16a6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
16a8 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
16a9 : 0908            >            ora #decmode        ;ignore decimal mode bit
16ab : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
16ad : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
16b0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
16b2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
16b4 : 48              >            pha         ;use stack to load status
16b5 : 28              >            plp
                        
16b6 : a082                     ldy #$82
16b8 : 08                       php
16b9 : cc1902                   cpy abs1+1  ;test result
                                trap_ne
16bc : d0fe            >        bne *           ;failed not equal (non zero)
                        
16be : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
16bf : 0908            >            ora #decmode        ;ignore decimal mode bit
16c1 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
16c3 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
16c6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
16c8 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
16ca : 48              >            pha         ;use stack to load status
16cb : 28              >            plp
                        
16cc : a041                     ldy #$41
16ce : 08                       php
16cf : cc1a02                   cpy abs1+2   ;test result
                                trap_ne
16d2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
16d4 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
16d5 : 0908            >            ora #decmode        ;ignore decimal mode bit
16d7 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
16d9 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
16dc : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
16de : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
16e0 : 48              >            pha         ;use stack to load status
16e1 : 28              >            plp
                        
16e2 : a000                     ldy #0
16e4 : 08                       php
16e5 : cc1b02                   cpy abs1+3  ;test result
                                trap_ne
16e8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
16ea : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
16eb : 0908            >            ora #decmode        ;ignore decimal mode bit
16ed : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
16ef : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
16f2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                
16f4 : a000                     ldy #0
16f6 : a50c                     lda zpt  
16f8 : 49c3                     eor #$c3
16fa : c515                     cmp zp1  
                                trap_ne     ;store to zp   data
16fc : d0fe            >        bne *           ;failed not equal (non zero)
                        
16fe : 840c                     sty zpt     ;clear                
1700 : ad0302                   lda abst  
1703 : 49c3                     eor #$c3
1705 : cd1802                   cmp abs1  
                                trap_ne     ;store to abs   data
1708 : d0fe            >        bne *           ;failed not equal (non zero)
                        
170a : 8c0302                   sty abst    ;clear                
170d : a50d                     lda zpt+1
170f : 49c3                     eor #$c3
1711 : c516                     cmp zp1+1
                                trap_ne     ;store to zp+1 data
1713 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1715 : 840d                     sty zpt+1   ;clear                
1717 : ad0402                   lda abst+1
171a : 49c3                     eor #$c3
171c : cd1902                   cmp abs1+1
                                trap_ne     ;store to abs+1 data
171f : d0fe            >        bne *           ;failed not equal (non zero)
                        
1721 : 8c0402                   sty abst+1  ;clear                
1724 : a50e                     lda zpt+2
1726 : 49c3                     eor #$c3
1728 : c517                     cmp zp1+2
                                trap_ne     ;store to zp+2 data
172a : d0fe            >        bne *           ;failed not equal (non zero)
                        
172c : 840e                     sty zpt+2   ;clear                
172e : ad0502                   lda abst+2
1731 : 49c3                     eor #$c3
1733 : cd1a02                   cmp abs1+2
                                trap_ne     ;store to abs+2 data
1736 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1738 : 8c0502                   sty abst+2  ;clear                
173b : a50f                     lda zpt+3
173d : 49c3                     eor #$c3
173f : c518                     cmp zp1+3
                                trap_ne     ;store to zp+3 data
1741 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1743 : 840f                     sty zpt+3   ;clear                
1745 : ad0602                   lda abst+3
1748 : 49c3                     eor #$c3
174a : cd1b02                   cmp abs1+3
                                trap_ne     ;store to abs+3 data
174d : d0fe            >        bne *           ;failed not equal (non zero)
                        
174f : 8c0602                   sty abst+3  ;clear                
                                next_test
1752 : ad0002          >            lda test_case   ;previous test
1755 : c914            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1757 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0015 =                 >test_num = test_num + 1
1759 : a915            >            lda #test_num   ;*** next tests' number
175b : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing load / store accumulator LDA / STA all addressing modes
                        ; LDA / STA - zp,x / abs,x
175e : a203                     ldx #3
1760 :                  tldax    
                                set_stat 0
                       >            load_flag 0
1760 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1762 : 48              >            pha         ;use stack to load status
1763 : 28              >            plp
                        
1764 : b515                     lda zp1,x
1766 : 08                       php         ;test stores do not alter flags
1767 : 49c3                     eor #$c3
1769 : 28                       plp
176a : 9d0302                   sta abst,x
176d : 08                       php         ;flags after load/store sequence
176e : 49c3                     eor #$c3
1770 : dd1802                   cmp abs1,x  ;test result
                                trap_ne
1773 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1775 : 68                       pla         ;load status
                                eor_flag 0
1776 : 0908            >            ora #decmode        ;ignore decimal mode bit
1778 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
177a : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
177d : d0fe            >        bne *           ;failed not equal (non zero)
                        
177f : ca                       dex
1780 : 10de                     bpl tldax                  
                        
1782 : a203                     ldx #3
1784 :                  tldax1   
                                set_stat $ff
                       >            load_flag $ff
1784 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1786 : 48              >            pha         ;use stack to load status
1787 : 28              >            plp
                        
1788 : b515                     lda zp1,x
178a : 08                       php         ;test stores do not alter flags
178b : 49c3                     eor #$c3
178d : 28                       plp
178e : 9d0302                   sta abst,x
1791 : 08                       php         ;flags after load/store sequence
1792 : 49c3                     eor #$c3
1794 : dd1802                   cmp abs1,x   ;test result
                                trap_ne
1797 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1799 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
179a : 0908            >            ora #decmode        ;ignore decimal mode bit
179c : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
179e : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
17a1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
17a3 : ca                       dex
17a4 : 10de                     bpl tldax1                  
                        
17a6 : a203                     ldx #3
17a8 :                  tldax2   
                                set_stat 0
                       >            load_flag 0
17a8 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
17aa : 48              >            pha         ;use stack to load status
17ab : 28              >            plp
                        
17ac : bd1802                   lda abs1,x
17af : 08                       php         ;test stores do not alter flags
17b0 : 49c3                     eor #$c3
17b2 : 28                       plp
17b3 : 950c                     sta zpt,x
17b5 : 08                       php         ;flags after load/store sequence
17b6 : 49c3                     eor #$c3
17b8 : d515                     cmp zp1,x   ;test result
                                trap_ne
17ba : d0fe            >        bne *           ;failed not equal (non zero)
                        
17bc : 68                       pla         ;load status
                                eor_flag 0
17bd : 0908            >            ora #decmode        ;ignore decimal mode bit
17bf : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
17c1 : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
17c4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
17c6 : ca                       dex
17c7 : 10df                     bpl tldax2                  
                        
17c9 : a203                     ldx #3
17cb :                  tldax3
                                set_stat $ff
                       >            load_flag $ff
17cb : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
17cd : 48              >            pha         ;use stack to load status
17ce : 28              >            plp
                        
17cf : bd1802                   lda abs1,x
17d2 : 08                       php         ;test stores do not alter flags
17d3 : 49c3                     eor #$c3
17d5 : 28                       plp
17d6 : 950c                     sta zpt,x
17d8 : 08                       php         ;flags after load/store sequence
17d9 : 49c3                     eor #$c3
17db : d515                     cmp zp1,x   ;test result
                                trap_ne
17dd : d0fe            >        bne *           ;failed not equal (non zero)
                        
17df : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
17e0 : 0908            >            ora #decmode        ;ignore decimal mode bit
17e2 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
17e4 : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
17e7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
17e9 : ca                       dex
17ea : 10df                     bpl tldax3
                        
17ec : a203                     ldx #3      ;testing store result
17ee : a000                     ldy #0
17f0 : b50c             tstax   lda zpt,x
17f2 : 49c3                     eor #$c3
17f4 : d515                     cmp zp1,x
                                trap_ne     ;store to zp,x data
17f6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
17f8 : 940c                     sty zpt,x   ;clear                
17fa : bd0302                   lda abst,x
17fd : 49c3                     eor #$c3
17ff : dd1802                   cmp abs1,x
                                trap_ne     ;store to abs,x data
1802 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1804 : 8a                       txa
1805 : 9d0302                   sta abst,x  ;clear                
1808 : ca                       dex
1809 : 10e5                     bpl tstax
                                next_test
180b : ad0002          >            lda test_case   ;previous test
180e : c915            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1810 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0016 =                 >test_num = test_num + 1
1812 : a916            >            lda #test_num   ;*** next tests' number
1814 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDA / STA - (zp),y / abs,y / (zp,x)
1817 : a003                     ldy #3
1819 :                  tlday    
                                set_stat 0
                       >            load_flag 0
1819 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
181b : 48              >            pha         ;use stack to load status
181c : 28              >            plp
                        
181d : b126                     lda (ind1),y
181f : 08                       php         ;test stores do not alter flags
1820 : 49c3                     eor #$c3
1822 : 28                       plp
1823 : 990302                   sta abst,y
1826 : 08                       php         ;flags after load/store sequence
1827 : 49c3                     eor #$c3
1829 : d91802                   cmp abs1,y  ;test result
                                trap_ne
182c : d0fe            >        bne *           ;failed not equal (non zero)
                        
182e : 68                       pla         ;load status
                                eor_flag 0
182f : 0908            >            ora #decmode        ;ignore decimal mode bit
1831 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1833 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
1836 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1838 : 88                       dey
1839 : 10de                     bpl tlday                  
                        
183b : a003                     ldy #3
183d :                  tlday1   
                                set_stat $ff
                       >            load_flag $ff
183d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
183f : 48              >            pha         ;use stack to load status
1840 : 28              >            plp
                        
1841 : b126                     lda (ind1),y
1843 : 08                       php         ;test stores do not alter flags
1844 : 49c3                     eor #$c3
1846 : 28                       plp
1847 : 990302                   sta abst,y
184a : 08                       php         ;flags after load/store sequence
184b : 49c3                     eor #$c3
184d : d91802                   cmp abs1,y  ;test result
                                trap_ne
1850 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1852 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1853 : 0908            >            ora #decmode        ;ignore decimal mode bit
1855 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1857 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
185a : d0fe            >        bne *           ;failed not equal (non zero)
                        
185c : 88                       dey
185d : 10de                     bpl tlday1                  
                        
185f : a003                     ldy #3      ;testing store result
1861 : a200                     ldx #0
1863 : b90302           tstay   lda abst,y
1866 : 49c3                     eor #$c3
1868 : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
186b : d0fe            >        bne *           ;failed not equal (non zero)
                        
186d : 8a                       txa
186e : 990302                   sta abst,y  ;clear                
1871 : 88                       dey
1872 : 10ef                     bpl tstay
                        
1874 : a003                     ldy #3
1876 :                  tlday2   
                                set_stat 0
                       >            load_flag 0
1876 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1878 : 48              >            pha         ;use stack to load status
1879 : 28              >            plp
                        
187a : b91802                   lda abs1,y
187d : 08                       php         ;test stores do not alter flags
187e : 49c3                     eor #$c3
1880 : 28                       plp
1881 : 9132                     sta (indt),y
1883 : 08                       php         ;flags after load/store sequence
1884 : 49c3                     eor #$c3
1886 : d126                     cmp (ind1),y    ;test result
                                trap_ne
1888 : d0fe            >        bne *           ;failed not equal (non zero)
                        
188a : 68                       pla         ;load status
                                eor_flag 0
188b : 0908            >            ora #decmode        ;ignore decimal mode bit
188d : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
188f : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
1892 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1894 : 88                       dey
1895 : 10df                     bpl tlday2                  
                        
1897 : a003                     ldy #3
1899 :                  tlday3   
                                set_stat $ff
                       >            load_flag $ff
1899 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
189b : 48              >            pha         ;use stack to load status
189c : 28              >            plp
                        
189d : b91802                   lda abs1,y
18a0 : 08                       php         ;test stores do not alter flags
18a1 : 49c3                     eor #$c3
18a3 : 28                       plp
18a4 : 9132                     sta (indt),y
18a6 : 08                       php         ;flags after load/store sequence
18a7 : 49c3                     eor #$c3
18a9 : d126                     cmp (ind1),y   ;test result
                                trap_ne
18ab : d0fe            >        bne *           ;failed not equal (non zero)
                        
18ad : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
18ae : 0908            >            ora #decmode        ;ignore decimal mode bit
18b0 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
18b2 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
18b5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
18b7 : 88                       dey
18b8 : 10df                     bpl tlday3
                                
18ba : a003                     ldy #3      ;testing store result
18bc : a200                     ldx #0
18be : b90302           tstay1  lda abst,y
18c1 : 49c3                     eor #$c3
18c3 : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
18c6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
18c8 : 8a                       txa
18c9 : 990302                   sta abst,y  ;clear                
18cc : 88                       dey
18cd : 10ef                     bpl tstay1
                                
18cf : a206                     ldx #6
18d1 : a003                     ldy #3
18d3 :                  tldax4   
                                set_stat 0
                       >            load_flag 0
18d3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
18d5 : 48              >            pha         ;use stack to load status
18d6 : 28              >            plp
                        
18d7 : a126                     lda (ind1,x)
18d9 : 08                       php         ;test stores do not alter flags
18da : 49c3                     eor #$c3
18dc : 28                       plp
18dd : 8132                     sta (indt,x)
18df : 08                       php         ;flags after load/store sequence
18e0 : 49c3                     eor #$c3
18e2 : d91802                   cmp abs1,y  ;test result
                                trap_ne
18e5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
18e7 : 68                       pla         ;load status
                                eor_flag 0
18e8 : 0908            >            ora #decmode        ;ignore decimal mode bit
18ea : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
18ec : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
18ef : d0fe            >        bne *           ;failed not equal (non zero)
                        
18f1 : ca                       dex
18f2 : ca                       dex
18f3 : 88                       dey
18f4 : 10dd                     bpl tldax4                  
                        
18f6 : a206                     ldx #6
18f8 : a003                     ldy #3
18fa :                  tldax5
                                set_stat $ff
                       >            load_flag $ff
18fa : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
18fc : 48              >            pha         ;use stack to load status
18fd : 28              >            plp
                        
18fe : a126                     lda (ind1,x)
1900 : 08                       php         ;test stores do not alter flags
1901 : 49c3                     eor #$c3
1903 : 28                       plp
1904 : 8132                     sta (indt,x)
1906 : 08                       php         ;flags after load/store sequence
1907 : 49c3                     eor #$c3
1909 : d91802                   cmp abs1,y  ;test result
                                trap_ne
190c : d0fe            >        bne *           ;failed not equal (non zero)
                        
190e : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
190f : 0908            >            ora #decmode        ;ignore decimal mode bit
1911 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1913 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
1916 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1918 : ca                       dex
1919 : ca                       dex
191a : 88                       dey
191b : 10dd                     bpl tldax5
                        
191d : a003                     ldy #3      ;testing store result
191f : a200                     ldx #0
1921 : b90302           tstay2  lda abst,y
1924 : 49c3                     eor #$c3
1926 : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
1929 : d0fe            >        bne *           ;failed not equal (non zero)
                        
192b : 8a                       txa
192c : 990302                   sta abst,y  ;clear                
192f : 88                       dey
1930 : 10ef                     bpl tstay2
                                next_test
1932 : ad0002          >            lda test_case   ;previous test
1935 : c916            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1937 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0017 =                 >test_num = test_num + 1
1939 : a917            >            lda #test_num   ;*** next tests' number
193b : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; indexed wraparound test (only zp should wrap)
193e : a2fd                     ldx #3+$fa
1940 : b51b             tldax6  lda zp1-$fa&$ff,x   ;wrap on indexed zp
1942 : 9d0901                   sta abst-$fa,x      ;no STX abs,x!
1945 : ca                       dex
1946 : e0fa                     cpx #$fa
1948 : b0f6                     bcs tldax6                  
194a : a2fd                     ldx #3+$fa
194c : bd1e01           tldax7  lda abs1-$fa,x      ;no wrap on indexed abs
194f : 9512                     sta zpt-$fa&$ff,x
1951 : ca                       dex
1952 : e0fa                     cpx #$fa
1954 : b0f6                     bcs tldax7
                                                  
1956 : a203                     ldx #3      ;testing wraparound result
1958 : a000                     ldy #0
195a : b50c             tstax1  lda zpt,x
195c : d515                     cmp zp1,x
                                trap_ne     ;store to zp,x data
195e : d0fe            >        bne *           ;failed not equal (non zero)
                        
1960 : 940c                     sty zpt,x   ;clear                
1962 : bd0302                   lda abst,x
1965 : dd1802                   cmp abs1,x
                                trap_ne     ;store to abs,x data
1968 : d0fe            >        bne *           ;failed not equal (non zero)
                        
196a : 8a                       txa
196b : 9d0302                   sta abst,x  ;clear                
196e : ca                       dex
196f : 10e9                     bpl tstax1
                        
1971 : a0fb                     ldy #3+$f8
1973 : a2fe                     ldx #6+$f8
1975 : a12e             tlday4  lda (ind1-$f8&$ff,x) ;wrap on indexed zp indirect
1977 : 990b01                   sta abst-$f8,y
197a : ca                       dex
197b : ca                       dex
197c : 88                       dey
197d : c0f8                     cpy #$f8
197f : b0f4                     bcs tlday4
1981 : a003                     ldy #3      ;testing wraparound result
1983 : a200                     ldx #0
1985 : b90302           tstay4  lda abst,y
1988 : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
198b : d0fe            >        bne *           ;failed not equal (non zero)
                        
198d : 8a                       txa
198e : 990302                   sta abst,y  ;clear                
1991 : 88                       dey
1992 : 10f1                     bpl tstay4
                                
1994 : a0fb                     ldy #3+$f8
1996 : b92001           tlday5  lda abs1-$f8,y  ;no wrap on indexed abs
1999 : 913a                     sta (inwt),y
199b : 88                       dey
199c : c0f8                     cpy #$f8
199e : b0f6                     bcs tlday5                  
19a0 : a003                     ldy #3      ;testing wraparound result
19a2 : a200                     ldx #0
19a4 : b90302           tstay5  lda abst,y
19a7 : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
19aa : d0fe            >        bne *           ;failed not equal (non zero)
                        
19ac : 8a                       txa
19ad : 990302                   sta abst,y  ;clear                
19b0 : 88                       dey
19b1 : 10f1                     bpl tstay5
                        
19b3 : a0fb                     ldy #3+$f8
19b5 : a2fe                     ldx #6+$f8
19b7 : b130             tlday6  lda (inw1),y    ;no wrap on zp indirect indexed 
19b9 : 813a                     sta (indt-$f8&$ff,x)
19bb : ca                       dex
19bc : ca                       dex
19bd : 88                       dey
19be : c0f8                     cpy #$f8
19c0 : b0f5                     bcs tlday6
19c2 : a003                     ldy #3      ;testing wraparound result
19c4 : a200                     ldx #0
19c6 : b90302           tstay6  lda abst,y
19c9 : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
19cc : d0fe            >        bne *           ;failed not equal (non zero)
                        
19ce : 8a                       txa
19cf : 990302                   sta abst,y  ;clear                
19d2 : 88                       dey
19d3 : 10f1                     bpl tstay6
                                next_test
19d5 : ad0002          >            lda test_case   ;previous test
19d8 : c917            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
19da : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0018 =                 >test_num = test_num + 1
19dc : a918            >            lda #test_num   ;*** next tests' number
19de : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDA / STA - zp / abs / #
                                set_stat 0  
                       >            load_flag 0  
19e1 : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
19e3 : 48              >            pha         ;use stack to load status
19e4 : 28              >            plp
                        
19e5 : a515                     lda zp1
19e7 : 08                       php         ;test stores do not alter flags
19e8 : 49c3                     eor #$c3
19ea : 28                       plp
19eb : 8d0302                   sta abst
19ee : 08                       php         ;flags after load/store sequence
19ef : 49c3                     eor #$c3
19f1 : c9c3                     cmp #$c3    ;test result
                                trap_ne
19f3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
19f5 : 68                       pla         ;load status
                                eor_flag 0
19f6 : 0908            >            ora #decmode        ;ignore decimal mode bit
19f8 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
19fa : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
19fd : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
19ff : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1a01 : 48              >            pha         ;use stack to load status
1a02 : 28              >            plp
                        
1a03 : a516                     lda zp1+1
1a05 : 08                       php         ;test stores do not alter flags
1a06 : 49c3                     eor #$c3
1a08 : 28                       plp
1a09 : 8d0402                   sta abst+1
1a0c : 08                       php         ;flags after load/store sequence
1a0d : 49c3                     eor #$c3
1a0f : c982                     cmp #$82    ;test result
                                trap_ne
1a11 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1a13 : 68                       pla         ;load status
                                eor_flag 0
1a14 : 0908            >            ora #decmode        ;ignore decimal mode bit
1a16 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1a18 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1a1b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1a1d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1a1f : 48              >            pha         ;use stack to load status
1a20 : 28              >            plp
                        
1a21 : a517                     lda zp1+2
1a23 : 08                       php         ;test stores do not alter flags
1a24 : 49c3                     eor #$c3
1a26 : 28                       plp
1a27 : 8d0502                   sta abst+2
1a2a : 08                       php         ;flags after load/store sequence
1a2b : 49c3                     eor #$c3
1a2d : c941                     cmp #$41    ;test result
                                trap_ne
1a2f : d0fe            >        bne *           ;failed not equal (non zero)
                        
1a31 : 68                       pla         ;load status
                                eor_flag 0
1a32 : 0908            >            ora #decmode        ;ignore decimal mode bit
1a34 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1a36 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1a39 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1a3b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1a3d : 48              >            pha         ;use stack to load status
1a3e : 28              >            plp
                        
1a3f : a518                     lda zp1+3
1a41 : 08                       php         ;test stores do not alter flags
1a42 : 49c3                     eor #$c3
1a44 : 28                       plp
1a45 : 8d0602                   sta abst+3
1a48 : 08                       php         ;flags after load/store sequence
1a49 : 49c3                     eor #$c3
1a4b : c900                     cmp #0      ;test result
                                trap_ne
1a4d : d0fe            >        bne *           ;failed not equal (non zero)
                        
1a4f : 68                       pla         ;load status
                                eor_flag 0
1a50 : 0908            >            ora #decmode        ;ignore decimal mode bit
1a52 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1a54 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
1a57 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1a59 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1a5b : 48              >            pha         ;use stack to load status
1a5c : 28              >            plp
                        
1a5d : a515                     lda zp1  
1a5f : 08                       php         ;test stores do not alter flags
1a60 : 49c3                     eor #$c3
1a62 : 28                       plp
1a63 : 8d0302                   sta abst  
1a66 : 08                       php         ;flags after load/store sequence
1a67 : 49c3                     eor #$c3
1a69 : c9c3                     cmp #$c3    ;test result
                                trap_ne
1a6b : d0fe            >        bne *           ;failed not equal (non zero)
                        
1a6d : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1a6e : 0908            >            ora #decmode        ;ignore decimal mode bit
1a70 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1a72 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1a75 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1a77 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1a79 : 48              >            pha         ;use stack to load status
1a7a : 28              >            plp
                        
1a7b : a516                     lda zp1+1
1a7d : 08                       php         ;test stores do not alter flags
1a7e : 49c3                     eor #$c3
1a80 : 28                       plp
1a81 : 8d0402                   sta abst+1
1a84 : 08                       php         ;flags after load/store sequence
1a85 : 49c3                     eor #$c3
1a87 : c982                     cmp #$82    ;test result
                                trap_ne
1a89 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1a8b : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1a8c : 0908            >            ora #decmode        ;ignore decimal mode bit
1a8e : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1a90 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1a93 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1a95 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1a97 : 48              >            pha         ;use stack to load status
1a98 : 28              >            plp
                        
1a99 : a517                     lda zp1+2
1a9b : 08                       php         ;test stores do not alter flags
1a9c : 49c3                     eor #$c3
1a9e : 28                       plp
1a9f : 8d0502                   sta abst+2
1aa2 : 08                       php         ;flags after load/store sequence
1aa3 : 49c3                     eor #$c3
1aa5 : c941                     cmp #$41    ;test result
                                trap_ne
1aa7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1aa9 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1aaa : 0908            >            ora #decmode        ;ignore decimal mode bit
1aac : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1aae : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1ab1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1ab3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1ab5 : 48              >            pha         ;use stack to load status
1ab6 : 28              >            plp
                        
1ab7 : a518                     lda zp1+3
1ab9 : 08                       php         ;test stores do not alter flags
1aba : 49c3                     eor #$c3
1abc : 28                       plp
1abd : 8d0602                   sta abst+3
1ac0 : 08                       php         ;flags after load/store sequence
1ac1 : 49c3                     eor #$c3
1ac3 : c900                     cmp #0      ;test result
                                trap_ne
1ac5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1ac7 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1ac8 : 0908            >            ora #decmode        ;ignore decimal mode bit
1aca : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1acc : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
1acf : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1ad1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1ad3 : 48              >            pha         ;use stack to load status
1ad4 : 28              >            plp
                        
1ad5 : ad1802                   lda abs1  
1ad8 : 08                       php         ;test stores do not alter flags
1ad9 : 49c3                     eor #$c3
1adb : 28                       plp
1adc : 850c                     sta zpt  
1ade : 08                       php         ;flags after load/store sequence
1adf : 49c3                     eor #$c3
1ae1 : c515                     cmp zp1     ;test result
                                trap_ne
1ae3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1ae5 : 68                       pla         ;load status
                                eor_flag 0
1ae6 : 0908            >            ora #decmode        ;ignore decimal mode bit
1ae8 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1aea : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1aed : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1aef : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1af1 : 48              >            pha         ;use stack to load status
1af2 : 28              >            plp
                        
1af3 : ad1902                   lda abs1+1
1af6 : 08                       php         ;test stores do not alter flags
1af7 : 49c3                     eor #$c3
1af9 : 28                       plp
1afa : 850d                     sta zpt+1
1afc : 08                       php         ;flags after load/store sequence
1afd : 49c3                     eor #$c3
1aff : c516                     cmp zp1+1   ;test result
                                trap_ne
1b01 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b03 : 68                       pla         ;load status
                                eor_flag 0
1b04 : 0908            >            ora #decmode        ;ignore decimal mode bit
1b06 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1b08 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1b0b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1b0d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1b0f : 48              >            pha         ;use stack to load status
1b10 : 28              >            plp
                        
1b11 : ad1a02                   lda abs1+2
1b14 : 08                       php         ;test stores do not alter flags
1b15 : 49c3                     eor #$c3
1b17 : 28                       plp
1b18 : 850e                     sta zpt+2
1b1a : 08                       php         ;flags after load/store sequence
1b1b : 49c3                     eor #$c3
1b1d : c517                     cmp zp1+2   ;test result
                                trap_ne
1b1f : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b21 : 68                       pla         ;load status
                                eor_flag 0
1b22 : 0908            >            ora #decmode        ;ignore decimal mode bit
1b24 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1b26 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1b29 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1b2b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1b2d : 48              >            pha         ;use stack to load status
1b2e : 28              >            plp
                        
1b2f : ad1b02                   lda abs1+3
1b32 : 08                       php         ;test stores do not alter flags
1b33 : 49c3                     eor #$c3
1b35 : 28                       plp
1b36 : 850f                     sta zpt+3
1b38 : 08                       php         ;flags after load/store sequence
1b39 : 49c3                     eor #$c3
1b3b : c518                     cmp zp1+3   ;test result
                                trap_ne
1b3d : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b3f : 68                       pla         ;load status
                                eor_flag 0
1b40 : 0908            >            ora #decmode        ;ignore decimal mode bit
1b42 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1b44 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
1b47 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1b49 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1b4b : 48              >            pha         ;use stack to load status
1b4c : 28              >            plp
                        
1b4d : ad1802                   lda abs1  
1b50 : 08                       php         ;test stores do not alter flags
1b51 : 49c3                     eor #$c3
1b53 : 28                       plp
1b54 : 850c                     sta zpt  
1b56 : 08                       php         ;flags after load/store sequence
1b57 : 49c3                     eor #$c3
1b59 : c515                     cmp zp1     ;test result
                                trap_ne
1b5b : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b5d : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1b5e : 0908            >            ora #decmode        ;ignore decimal mode bit
1b60 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1b62 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1b65 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1b67 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1b69 : 48              >            pha         ;use stack to load status
1b6a : 28              >            plp
                        
1b6b : ad1902                   lda abs1+1
1b6e : 08                       php         ;test stores do not alter flags
1b6f : 49c3                     eor #$c3
1b71 : 28                       plp
1b72 : 850d                     sta zpt+1
1b74 : 08                       php         ;flags after load/store sequence
1b75 : 49c3                     eor #$c3
1b77 : c516                     cmp zp1+1   ;test result
                                trap_ne
1b79 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b7b : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1b7c : 0908            >            ora #decmode        ;ignore decimal mode bit
1b7e : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1b80 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1b83 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1b85 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1b87 : 48              >            pha         ;use stack to load status
1b88 : 28              >            plp
                        
1b89 : ad1a02                   lda abs1+2
1b8c : 08                       php         ;test stores do not alter flags
1b8d : 49c3                     eor #$c3
1b8f : 28                       plp
1b90 : 850e                     sta zpt+2
1b92 : 08                       php         ;flags after load/store sequence
1b93 : 49c3                     eor #$c3
1b95 : c517                     cmp zp1+2   ;test result
                                trap_ne
1b97 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b99 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1b9a : 0908            >            ora #decmode        ;ignore decimal mode bit
1b9c : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1b9e : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1ba1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1ba3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1ba5 : 48              >            pha         ;use stack to load status
1ba6 : 28              >            plp
                        
1ba7 : ad1b02                   lda abs1+3
1baa : 08                       php         ;test stores do not alter flags
1bab : 49c3                     eor #$c3
1bad : 28                       plp
1bae : 850f                     sta zpt+3
1bb0 : 08                       php         ;flags after load/store sequence
1bb1 : 49c3                     eor #$c3
1bb3 : c518                     cmp zp1+3   ;test result
                                trap_ne
1bb5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1bb7 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1bb8 : 0908            >            ora #decmode        ;ignore decimal mode bit
1bba : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1bbc : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
1bbf : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0  
                       >            load_flag 0  
1bc1 : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
1bc3 : 48              >            pha         ;use stack to load status
1bc4 : 28              >            plp
                        
1bc5 : a9c3                     lda #$c3
1bc7 : 08                       php
1bc8 : cd1802                   cmp abs1    ;test result
                                trap_ne
1bcb : d0fe            >        bne *           ;failed not equal (non zero)
                        
1bcd : 68                       pla         ;load status
                                eor_flag 0
1bce : 0908            >            ora #decmode        ;ignore decimal mode bit
1bd0 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1bd2 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1bd5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1bd7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1bd9 : 48              >            pha         ;use stack to load status
1bda : 28              >            plp
                        
1bdb : a982                     lda #$82
1bdd : 08                       php
1bde : cd1902                   cmp abs1+1  ;test result
                                trap_ne
1be1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1be3 : 68                       pla         ;load status
                                eor_flag 0
1be4 : 0908            >            ora #decmode        ;ignore decimal mode bit
1be6 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1be8 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1beb : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1bed : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1bef : 48              >            pha         ;use stack to load status
1bf0 : 28              >            plp
                        
1bf1 : a941                     lda #$41
1bf3 : 08                       php
1bf4 : cd1a02                   cmp abs1+2  ;test result
                                trap_ne
1bf7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1bf9 : 68                       pla         ;load status
                                eor_flag 0
1bfa : 0908            >            ora #decmode        ;ignore decimal mode bit
1bfc : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1bfe : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1c01 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1c03 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1c05 : 48              >            pha         ;use stack to load status
1c06 : 28              >            plp
                        
1c07 : a900                     lda #0
1c09 : 08                       php
1c0a : cd1b02                   cmp abs1+3  ;test result
                                trap_ne
1c0d : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c0f : 68                       pla         ;load status
                                eor_flag 0
1c10 : 0908            >            ora #decmode        ;ignore decimal mode bit
1c12 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1c14 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
1c17 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
1c19 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1c1b : 48              >            pha         ;use stack to load status
1c1c : 28              >            plp
                        
1c1d : a9c3                     lda #$c3  
1c1f : 08                       php
1c20 : cd1802                   cmp abs1    ;test result
                                trap_ne
1c23 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c25 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1c26 : 0908            >            ora #decmode        ;ignore decimal mode bit
1c28 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1c2a : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1c2d : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1c2f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1c31 : 48              >            pha         ;use stack to load status
1c32 : 28              >            plp
                        
1c33 : a982                     lda #$82
1c35 : 08                       php
1c36 : cd1902                   cmp abs1+1  ;test result
                                trap_ne
1c39 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c3b : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1c3c : 0908            >            ora #decmode        ;ignore decimal mode bit
1c3e : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1c40 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1c43 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1c45 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1c47 : 48              >            pha         ;use stack to load status
1c48 : 28              >            plp
                        
1c49 : a941                     lda #$41
1c4b : 08                       php
1c4c : cd1a02                   cmp abs1+2  ;test result
                                trap_ne
1c4f : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c51 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1c52 : 0908            >            ora #decmode        ;ignore decimal mode bit
1c54 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1c56 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1c59 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1c5b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1c5d : 48              >            pha         ;use stack to load status
1c5e : 28              >            plp
                        
1c5f : a900                     lda #0
1c61 : 08                       php
1c62 : cd1b02                   cmp abs1+3  ;test result
                                trap_ne
1c65 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c67 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1c68 : 0908            >            ora #decmode        ;ignore decimal mode bit
1c6a : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1c6c : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
1c6f : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
1c71 : a200                     ldx #0
1c73 : a50c                     lda zpt  
1c75 : 49c3                     eor #$c3
1c77 : c515                     cmp zp1  
                                trap_ne     ;store to zp data
1c79 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c7b : 860c                     stx zpt     ;clear                
1c7d : ad0302                   lda abst  
1c80 : 49c3                     eor #$c3
1c82 : cd1802                   cmp abs1  
                                trap_ne     ;store to abs data
1c85 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c87 : 8e0302                   stx abst    ;clear                
1c8a : a50d                     lda zpt+1
1c8c : 49c3                     eor #$c3
1c8e : c516                     cmp zp1+1
                                trap_ne     ;store to zp data
1c90 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c92 : 860d                     stx zpt+1   ;clear                
1c94 : ad0402                   lda abst+1
1c97 : 49c3                     eor #$c3
1c99 : cd1902                   cmp abs1+1
                                trap_ne     ;store to abs data
1c9c : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c9e : 8e0402                   stx abst+1  ;clear                
1ca1 : a50e                     lda zpt+2
1ca3 : 49c3                     eor #$c3
1ca5 : c517                     cmp zp1+2
                                trap_ne     ;store to zp data
1ca7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1ca9 : 860e                     stx zpt+2   ;clear                
1cab : ad0502                   lda abst+2
1cae : 49c3                     eor #$c3
1cb0 : cd1a02                   cmp abs1+2
                                trap_ne     ;store to abs data
1cb3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1cb5 : 8e0502                   stx abst+2  ;clear                
1cb8 : a50f                     lda zpt+3
1cba : 49c3                     eor #$c3
1cbc : c518                     cmp zp1+3
                                trap_ne     ;store to zp data
1cbe : d0fe            >        bne *           ;failed not equal (non zero)
                        
1cc0 : 860f                     stx zpt+3   ;clear                
1cc2 : ad0602                   lda abst+3
1cc5 : 49c3                     eor #$c3
1cc7 : cd1b02                   cmp abs1+3
                                trap_ne     ;store to abs data
1cca : d0fe            >        bne *           ;failed not equal (non zero)
                        
1ccc : 8e0602                   stx abst+3  ;clear                
                                next_test
1ccf : ad0002          >            lda test_case   ;previous test
1cd2 : c918            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1cd4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0019 =                 >test_num = test_num + 1
1cd6 : a919            >            lda #test_num   ;*** next tests' number
1cd8 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing bit test & compares BIT CPX CPY CMP all addressing modes
                        ; BIT - zp / abs
                                set_a $ff,0
                       >            load_flag 0
1cdb : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1cdd : 48              >            pha         ;use stack to load status
1cde : a9ff            >            lda #$ff     ;precharge accu
1ce0 : 28              >            plp
                        
1ce1 : 2418                     bit zp1+3   ;00 - should set Z / clear  NV
                                tst_a $ff,fz 
1ce3 : 08              >            php         ;save flags
1ce4 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
1ce6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1ce8 : 68              >            pla         ;load status
1ce9 : 48              >            pha
                       >            cmp_flag fz 
1cea : 0908            >            ora #decmode        ;ignore decimal mode bit
1cec : c93a            >            cmp #(fz |faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1cee : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1cf0 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
1cf1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1cf3 : 48              >            pha         ;use stack to load status
1cf4 : a901            >            lda #1     ;precharge accu
1cf6 : 28              >            plp
                        
1cf7 : 2417                     bit zp1+2   ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
1cf9 : 08              >            php         ;save flags
1cfa : c901            >            cmp #1     ;test result
                       >            trap_ne
1cfc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1cfe : 68              >            pla         ;load status
1cff : 48              >            pha
                       >            cmp_flag fv
1d00 : 0908            >            ora #decmode        ;ignore decimal mode bit
1d02 : c978            >            cmp #(fv|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1d04 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d06 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
1d07 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1d09 : 48              >            pha         ;use stack to load status
1d0a : a901            >            lda #1     ;precharge accu
1d0c : 28              >            plp
                        
1d0d : 2416                     bit zp1+1   ;82 - should set N (M7) & Z / clear V
                                tst_a 1,fnz
1d0f : 08              >            php         ;save flags
1d10 : c901            >            cmp #1     ;test result
                       >            trap_ne
1d12 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d14 : 68              >            pla         ;load status
1d15 : 48              >            pha
                       >            cmp_flag fnz
1d16 : 0908            >            ora #decmode        ;ignore decimal mode bit
1d18 : c9ba            >            cmp #(fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1d1a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d1c : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
1d1d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1d1f : 48              >            pha         ;use stack to load status
1d20 : a901            >            lda #1     ;precharge accu
1d22 : 28              >            plp
                        
1d23 : 2415                     bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,fnv
1d25 : 08              >            php         ;save flags
1d26 : c901            >            cmp #1     ;test result
                       >            trap_ne
1d28 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d2a : 68              >            pla         ;load status
1d2b : 48              >            pha
                       >            cmp_flag fnv
1d2c : 0908            >            ora #decmode        ;ignore decimal mode bit
1d2e : c9f8            >            cmp #(fnv|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1d30 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d32 : 28              >            plp         ;restore status
                        
                                
                                set_a $ff,$ff
                       >            load_flag $ff
1d33 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1d35 : 48              >            pha         ;use stack to load status
1d36 : a9ff            >            lda #$ff     ;precharge accu
1d38 : 28              >            plp
                        
1d39 : 2418                     bit zp1+3   ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv 
1d3b : 08              >            php         ;save flags
1d3c : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
1d3e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d40 : 68              >            pla         ;load status
1d41 : 48              >            pha
                       >            cmp_flag ~fnv 
1d42 : 0908            >            ora #decmode        ;ignore decimal mode bit
1d44 : c93f            >            cmp #(~fnv |faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1d46 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d48 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
1d49 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1d4b : 48              >            pha         ;use stack to load status
1d4c : a901            >            lda #1     ;precharge accu
1d4e : 28              >            plp
                        
1d4f : 2417                     bit zp1+2   ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
1d51 : 08              >            php         ;save flags
1d52 : c901            >            cmp #1     ;test result
                       >            trap_ne
1d54 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d56 : 68              >            pla         ;load status
1d57 : 48              >            pha
                       >            cmp_flag ~fnz
1d58 : 0908            >            ora #decmode        ;ignore decimal mode bit
1d5a : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1d5c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d5e : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
1d5f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1d61 : 48              >            pha         ;use stack to load status
1d62 : a901            >            lda #1     ;precharge accu
1d64 : 28              >            plp
                        
1d65 : 2416                     bit zp1+1   ;82 - should set N (M7) & Z / clear V
                                tst_a 1,~fv
1d67 : 08              >            php         ;save flags
1d68 : c901            >            cmp #1     ;test result
                       >            trap_ne
1d6a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d6c : 68              >            pla         ;load status
1d6d : 48              >            pha
                       >            cmp_flag ~fv
1d6e : 0908            >            ora #decmode        ;ignore decimal mode bit
1d70 : c9bf            >            cmp #(~fv|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1d72 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d74 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
1d75 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1d77 : 48              >            pha         ;use stack to load status
1d78 : a901            >            lda #1     ;precharge accu
1d7a : 28              >            plp
                        
1d7b : 2415                     bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,~fz
1d7d : 08              >            php         ;save flags
1d7e : c901            >            cmp #1     ;test result
                       >            trap_ne
1d80 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d82 : 68              >            pla         ;load status
1d83 : 48              >            pha
                       >            cmp_flag ~fz
1d84 : 0908            >            ora #decmode        ;ignore decimal mode bit
1d86 : c9fd            >            cmp #(~fz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1d88 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d8a : 28              >            plp         ;restore status
                        
                                
                                set_a $ff,0
                       >            load_flag 0
1d8b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1d8d : 48              >            pha         ;use stack to load status
1d8e : a9ff            >            lda #$ff     ;precharge accu
1d90 : 28              >            plp
                        
1d91 : 2c1b02                   bit abs1+3  ;00 - should set Z / clear  NV
                                tst_a $ff,fz 
1d94 : 08              >            php         ;save flags
1d95 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
1d97 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d99 : 68              >            pla         ;load status
1d9a : 48              >            pha
                       >            cmp_flag fz 
1d9b : 0908            >            ora #decmode        ;ignore decimal mode bit
1d9d : c93a            >            cmp #(fz |faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1d9f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1da1 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
1da2 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1da4 : 48              >            pha         ;use stack to load status
1da5 : a901            >            lda #1     ;precharge accu
1da7 : 28              >            plp
                        
1da8 : 2c1a02                   bit abs1+2  ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
1dab : 08              >            php         ;save flags
1dac : c901            >            cmp #1     ;test result
                       >            trap_ne
1dae : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1db0 : 68              >            pla         ;load status
1db1 : 48              >            pha
                       >            cmp_flag fv
1db2 : 0908            >            ora #decmode        ;ignore decimal mode bit
1db4 : c978            >            cmp #(fv|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1db6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1db8 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
1db9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1dbb : 48              >            pha         ;use stack to load status
1dbc : a901            >            lda #1     ;precharge accu
1dbe : 28              >            plp
                        
1dbf : 2c1902                   bit abs1+1  ;82 - should set N (M7) & Z / clear V
                                tst_a 1,fnz
1dc2 : 08              >            php         ;save flags
1dc3 : c901            >            cmp #1     ;test result
                       >            trap_ne
1dc5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1dc7 : 68              >            pla         ;load status
1dc8 : 48              >            pha
                       >            cmp_flag fnz
1dc9 : 0908            >            ora #decmode        ;ignore decimal mode bit
1dcb : c9ba            >            cmp #(fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1dcd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1dcf : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
1dd0 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1dd2 : 48              >            pha         ;use stack to load status
1dd3 : a901            >            lda #1     ;precharge accu
1dd5 : 28              >            plp
                        
1dd6 : 2c1802                   bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,fnv
1dd9 : 08              >            php         ;save flags
1dda : c901            >            cmp #1     ;test result
                       >            trap_ne
1ddc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1dde : 68              >            pla         ;load status
1ddf : 48              >            pha
                       >            cmp_flag fnv
1de0 : 0908            >            ora #decmode        ;ignore decimal mode bit
1de2 : c9f8            >            cmp #(fnv|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1de4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1de6 : 28              >            plp         ;restore status
                        
                                
                                set_a $ff,$ff
                       >            load_flag $ff
1de7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1de9 : 48              >            pha         ;use stack to load status
1dea : a9ff            >            lda #$ff     ;precharge accu
1dec : 28              >            plp
                        
1ded : 2c1b02                   bit abs1+3  ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv 
1df0 : 08              >            php         ;save flags
1df1 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
1df3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1df5 : 68              >            pla         ;load status
1df6 : 48              >            pha
                       >            cmp_flag ~fnv 
1df7 : 0908            >            ora #decmode        ;ignore decimal mode bit
1df9 : c93f            >            cmp #(~fnv |faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1dfb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1dfd : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
1dfe : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1e00 : 48              >            pha         ;use stack to load status
1e01 : a901            >            lda #1     ;precharge accu
1e03 : 28              >            plp
                        
1e04 : 2c1a02                   bit abs1+2  ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
1e07 : 08              >            php         ;save flags
1e08 : c901            >            cmp #1     ;test result
                       >            trap_ne
1e0a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e0c : 68              >            pla         ;load status
1e0d : 48              >            pha
                       >            cmp_flag ~fnz
1e0e : 0908            >            ora #decmode        ;ignore decimal mode bit
1e10 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1e12 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e14 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
1e15 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1e17 : 48              >            pha         ;use stack to load status
1e18 : a901            >            lda #1     ;precharge accu
1e1a : 28              >            plp
                        
1e1b : 2c1902                   bit abs1+1  ;82 - should set N (M7) & Z / clear V
                                tst_a 1,~fv
1e1e : 08              >            php         ;save flags
1e1f : c901            >            cmp #1     ;test result
                       >            trap_ne
1e21 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e23 : 68              >            pla         ;load status
1e24 : 48              >            pha
                       >            cmp_flag ~fv
1e25 : 0908            >            ora #decmode        ;ignore decimal mode bit
1e27 : c9bf            >            cmp #(~fv|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1e29 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e2b : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
1e2c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1e2e : 48              >            pha         ;use stack to load status
1e2f : a901            >            lda #1     ;precharge accu
1e31 : 28              >            plp
                        
1e32 : 2c1802                   bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,~fz
1e35 : 08              >            php         ;save flags
1e36 : c901            >            cmp #1     ;test result
                       >            trap_ne
1e38 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e3a : 68              >            pla         ;load status
1e3b : 48              >            pha
                       >            cmp_flag ~fz
1e3c : 0908            >            ora #decmode        ;ignore decimal mode bit
1e3e : c9fd            >            cmp #(~fz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1e40 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e42 : 28              >            plp         ;restore status
                        
                                next_test
1e43 : ad0002          >            lda test_case   ;previous test
1e46 : c919            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1e48 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001a =                 >test_num = test_num + 1
1e4a : a91a            >            lda #test_num   ;*** next tests' number
1e4c : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; CPX - zp / abs / #         
                                set_x $80,0
                       >            load_flag 0
1e4f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1e51 : 48              >            pha         ;use stack to load status
1e52 : a280            >            ldx #$80     ;precharge index x
1e54 : 28              >            plp
                        
1e55 : e419                     cpx zp7f
                                tst_stat fc
1e57 : 08              >            php         ;save status
1e58 : 68              >            pla         ;use stack to retrieve status
1e59 : 48              >            pha
                       >            cmp_flag fc
1e5a : 0908            >            ora #decmode        ;ignore decimal mode bit
1e5c : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1e5e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e60 : 28              >            plp         ;restore status
                        
1e61 : ca                       dex
1e62 : e419                     cpx zp7f
                                tst_stat fzc
1e64 : 08              >            php         ;save status
1e65 : 68              >            pla         ;use stack to retrieve status
1e66 : 48              >            pha
                       >            cmp_flag fzc
1e67 : 0908            >            ora #decmode        ;ignore decimal mode bit
1e69 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1e6b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e6d : 28              >            plp         ;restore status
                        
1e6e : ca                       dex
1e6f : e419                     cpx zp7f
                                tst_x $7e,fn
1e71 : 08              >            php         ;save flags
1e72 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
1e74 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e76 : 68              >            pla         ;load status
1e77 : 48              >            pha
                       >            cmp_flag fn
1e78 : 0908            >            ora #decmode        ;ignore decimal mode bit
1e7a : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1e7c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e7e : 28              >            plp         ;restore status
                        
                                set_x $80,$ff
                       >            load_flag $ff
1e7f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1e81 : 48              >            pha         ;use stack to load status
1e82 : a280            >            ldx #$80     ;precharge index x
1e84 : 28              >            plp
                        
1e85 : e419                     cpx zp7f
                                tst_stat ~fnz
1e87 : 08              >            php         ;save status
1e88 : 68              >            pla         ;use stack to retrieve status
1e89 : 48              >            pha
                       >            cmp_flag ~fnz
1e8a : 0908            >            ora #decmode        ;ignore decimal mode bit
1e8c : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1e8e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e90 : 28              >            plp         ;restore status
                        
1e91 : ca                       dex
1e92 : e419                     cpx zp7f
                                tst_stat ~fn
1e94 : 08              >            php         ;save status
1e95 : 68              >            pla         ;use stack to retrieve status
1e96 : 48              >            pha
                       >            cmp_flag ~fn
1e97 : 0908            >            ora #decmode        ;ignore decimal mode bit
1e99 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1e9b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e9d : 28              >            plp         ;restore status
                        
1e9e : ca                       dex
1e9f : e419                     cpx zp7f
                                tst_x $7e,~fzc
1ea1 : 08              >            php         ;save flags
1ea2 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
1ea4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1ea6 : 68              >            pla         ;load status
1ea7 : 48              >            pha
                       >            cmp_flag ~fzc
1ea8 : 0908            >            ora #decmode        ;ignore decimal mode bit
1eaa : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1eac : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1eae : 28              >            plp         ;restore status
                        
                        
                                set_x $80,0
                       >            load_flag 0
1eaf : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1eb1 : 48              >            pha         ;use stack to load status
1eb2 : a280            >            ldx #$80     ;precharge index x
1eb4 : 28              >            plp
                        
1eb5 : ec1c02                   cpx abs7f
                                tst_stat fc
1eb8 : 08              >            php         ;save status
1eb9 : 68              >            pla         ;use stack to retrieve status
1eba : 48              >            pha
                       >            cmp_flag fc
1ebb : 0908            >            ora #decmode        ;ignore decimal mode bit
1ebd : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1ebf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1ec1 : 28              >            plp         ;restore status
                        
1ec2 : ca                       dex
1ec3 : ec1c02                   cpx abs7f
                                tst_stat fzc
1ec6 : 08              >            php         ;save status
1ec7 : 68              >            pla         ;use stack to retrieve status
1ec8 : 48              >            pha
                       >            cmp_flag fzc
1ec9 : 0908            >            ora #decmode        ;ignore decimal mode bit
1ecb : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1ecd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1ecf : 28              >            plp         ;restore status
                        
1ed0 : ca                       dex
1ed1 : ec1c02                   cpx abs7f
                                tst_x $7e,fn
1ed4 : 08              >            php         ;save flags
1ed5 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
1ed7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1ed9 : 68              >            pla         ;load status
1eda : 48              >            pha
                       >            cmp_flag fn
1edb : 0908            >            ora #decmode        ;ignore decimal mode bit
1edd : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1edf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1ee1 : 28              >            plp         ;restore status
                        
                                set_x $80,$ff
                       >            load_flag $ff
1ee2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1ee4 : 48              >            pha         ;use stack to load status
1ee5 : a280            >            ldx #$80     ;precharge index x
1ee7 : 28              >            plp
                        
1ee8 : ec1c02                   cpx abs7f
                                tst_stat ~fnz
1eeb : 08              >            php         ;save status
1eec : 68              >            pla         ;use stack to retrieve status
1eed : 48              >            pha
                       >            cmp_flag ~fnz
1eee : 0908            >            ora #decmode        ;ignore decimal mode bit
1ef0 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1ef2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1ef4 : 28              >            plp         ;restore status
                        
1ef5 : ca                       dex
1ef6 : ec1c02                   cpx abs7f
                                tst_stat ~fn
1ef9 : 08              >            php         ;save status
1efa : 68              >            pla         ;use stack to retrieve status
1efb : 48              >            pha
                       >            cmp_flag ~fn
1efc : 0908            >            ora #decmode        ;ignore decimal mode bit
1efe : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1f00 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f02 : 28              >            plp         ;restore status
                        
1f03 : ca                       dex
1f04 : ec1c02                   cpx abs7f
                                tst_x $7e,~fzc
1f07 : 08              >            php         ;save flags
1f08 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
1f0a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f0c : 68              >            pla         ;load status
1f0d : 48              >            pha
                       >            cmp_flag ~fzc
1f0e : 0908            >            ora #decmode        ;ignore decimal mode bit
1f10 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1f12 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f14 : 28              >            plp         ;restore status
                        
                        
                                set_x $80,0
                       >            load_flag 0
1f15 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1f17 : 48              >            pha         ;use stack to load status
1f18 : a280            >            ldx #$80     ;precharge index x
1f1a : 28              >            plp
                        
1f1b : e07f                     cpx #$7f
                                tst_stat fc
1f1d : 08              >            php         ;save status
1f1e : 68              >            pla         ;use stack to retrieve status
1f1f : 48              >            pha
                       >            cmp_flag fc
1f20 : 0908            >            ora #decmode        ;ignore decimal mode bit
1f22 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1f24 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f26 : 28              >            plp         ;restore status
                        
1f27 : ca                       dex
1f28 : e07f                     cpx #$7f
                                tst_stat fzc
1f2a : 08              >            php         ;save status
1f2b : 68              >            pla         ;use stack to retrieve status
1f2c : 48              >            pha
                       >            cmp_flag fzc
1f2d : 0908            >            ora #decmode        ;ignore decimal mode bit
1f2f : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1f31 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f33 : 28              >            plp         ;restore status
                        
1f34 : ca                       dex
1f35 : e07f                     cpx #$7f
                                tst_x $7e,fn
1f37 : 08              >            php         ;save flags
1f38 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
1f3a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f3c : 68              >            pla         ;load status
1f3d : 48              >            pha
                       >            cmp_flag fn
1f3e : 0908            >            ora #decmode        ;ignore decimal mode bit
1f40 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1f42 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f44 : 28              >            plp         ;restore status
                        
                                set_x $80,$ff
                       >            load_flag $ff
1f45 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1f47 : 48              >            pha         ;use stack to load status
1f48 : a280            >            ldx #$80     ;precharge index x
1f4a : 28              >            plp
                        
1f4b : e07f                     cpx #$7f
                                tst_stat ~fnz
1f4d : 08              >            php         ;save status
1f4e : 68              >            pla         ;use stack to retrieve status
1f4f : 48              >            pha
                       >            cmp_flag ~fnz
1f50 : 0908            >            ora #decmode        ;ignore decimal mode bit
1f52 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1f54 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f56 : 28              >            plp         ;restore status
                        
1f57 : ca                       dex
1f58 : e07f                     cpx #$7f
                                tst_stat ~fn
1f5a : 08              >            php         ;save status
1f5b : 68              >            pla         ;use stack to retrieve status
1f5c : 48              >            pha
                       >            cmp_flag ~fn
1f5d : 0908            >            ora #decmode        ;ignore decimal mode bit
1f5f : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1f61 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f63 : 28              >            plp         ;restore status
                        
1f64 : ca                       dex
1f65 : e07f                     cpx #$7f
                                tst_x $7e,~fzc
1f67 : 08              >            php         ;save flags
1f68 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
1f6a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f6c : 68              >            pla         ;load status
1f6d : 48              >            pha
                       >            cmp_flag ~fzc
1f6e : 0908            >            ora #decmode        ;ignore decimal mode bit
1f70 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1f72 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f74 : 28              >            plp         ;restore status
                        
                                next_test
1f75 : ad0002          >            lda test_case   ;previous test
1f78 : c91a            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1f7a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001b =                 >test_num = test_num + 1
1f7c : a91b            >            lda #test_num   ;*** next tests' number
1f7e : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; CPY - zp / abs / #         
                                set_y $80,0
                       >            load_flag 0
1f81 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1f83 : 48              >            pha         ;use stack to load status
1f84 : a080            >            ldy #$80     ;precharge index y
1f86 : 28              >            plp
                        
1f87 : c419                     cpy zp7f
                                tst_stat fc
1f89 : 08              >            php         ;save status
1f8a : 68              >            pla         ;use stack to retrieve status
1f8b : 48              >            pha
                       >            cmp_flag fc
1f8c : 0908            >            ora #decmode        ;ignore decimal mode bit
1f8e : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1f90 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f92 : 28              >            plp         ;restore status
                        
1f93 : 88                       dey
1f94 : c419                     cpy zp7f
                                tst_stat fzc
1f96 : 08              >            php         ;save status
1f97 : 68              >            pla         ;use stack to retrieve status
1f98 : 48              >            pha
                       >            cmp_flag fzc
1f99 : 0908            >            ora #decmode        ;ignore decimal mode bit
1f9b : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1f9d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f9f : 28              >            plp         ;restore status
                        
1fa0 : 88                       dey
1fa1 : c419                     cpy zp7f
                                tst_y $7e,fn
1fa3 : 08              >            php         ;save flags
1fa4 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
1fa6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1fa8 : 68              >            pla         ;load status
1fa9 : 48              >            pha
                       >            cmp_flag fn
1faa : 0908            >            ora #decmode        ;ignore decimal mode bit
1fac : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1fae : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1fb0 : 28              >            plp         ;restore status
                        
                                set_y $80,$ff
                       >            load_flag $ff
1fb1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1fb3 : 48              >            pha         ;use stack to load status
1fb4 : a080            >            ldy #$80     ;precharge index y
1fb6 : 28              >            plp
                        
1fb7 : c419                     cpy zp7f
                                tst_stat ~fnz
1fb9 : 08              >            php         ;save status
1fba : 68              >            pla         ;use stack to retrieve status
1fbb : 48              >            pha
                       >            cmp_flag ~fnz
1fbc : 0908            >            ora #decmode        ;ignore decimal mode bit
1fbe : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1fc0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1fc2 : 28              >            plp         ;restore status
                        
1fc3 : 88                       dey
1fc4 : c419                     cpy zp7f
                                tst_stat ~fn
1fc6 : 08              >            php         ;save status
1fc7 : 68              >            pla         ;use stack to retrieve status
1fc8 : 48              >            pha
                       >            cmp_flag ~fn
1fc9 : 0908            >            ora #decmode        ;ignore decimal mode bit
1fcb : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1fcd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1fcf : 28              >            plp         ;restore status
                        
1fd0 : 88                       dey
1fd1 : c419                     cpy zp7f
                                tst_y $7e,~fzc
1fd3 : 08              >            php         ;save flags
1fd4 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
1fd6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1fd8 : 68              >            pla         ;load status
1fd9 : 48              >            pha
                       >            cmp_flag ~fzc
1fda : 0908            >            ora #decmode        ;ignore decimal mode bit
1fdc : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1fde : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1fe0 : 28              >            plp         ;restore status
                        
                        
                                set_y $80,0
                       >            load_flag 0
1fe1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1fe3 : 48              >            pha         ;use stack to load status
1fe4 : a080            >            ldy #$80     ;precharge index y
1fe6 : 28              >            plp
                        
1fe7 : cc1c02                   cpy abs7f
                                tst_stat fc
1fea : 08              >            php         ;save status
1feb : 68              >            pla         ;use stack to retrieve status
1fec : 48              >            pha
                       >            cmp_flag fc
1fed : 0908            >            ora #decmode        ;ignore decimal mode bit
1fef : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1ff1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1ff3 : 28              >            plp         ;restore status
                        
1ff4 : 88                       dey
1ff5 : cc1c02                   cpy abs7f
                                tst_stat fzc
1ff8 : 08              >            php         ;save status
1ff9 : 68              >            pla         ;use stack to retrieve status
1ffa : 48              >            pha
                       >            cmp_flag fzc
1ffb : 0908            >            ora #decmode        ;ignore decimal mode bit
1ffd : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1fff : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2001 : 28              >            plp         ;restore status
                        
2002 : 88                       dey
2003 : cc1c02                   cpy abs7f
                                tst_y $7e,fn
2006 : 08              >            php         ;save flags
2007 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
2009 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
200b : 68              >            pla         ;load status
200c : 48              >            pha
                       >            cmp_flag fn
200d : 0908            >            ora #decmode        ;ignore decimal mode bit
200f : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2011 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2013 : 28              >            plp         ;restore status
                        
                                set_y $80,$ff
                       >            load_flag $ff
2014 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2016 : 48              >            pha         ;use stack to load status
2017 : a080            >            ldy #$80     ;precharge index y
2019 : 28              >            plp
                        
201a : cc1c02                   cpy abs7f
                                tst_stat ~fnz
201d : 08              >            php         ;save status
201e : 68              >            pla         ;use stack to retrieve status
201f : 48              >            pha
                       >            cmp_flag ~fnz
2020 : 0908            >            ora #decmode        ;ignore decimal mode bit
2022 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2024 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2026 : 28              >            plp         ;restore status
                        
2027 : 88                       dey
2028 : cc1c02                   cpy abs7f
                                tst_stat ~fn
202b : 08              >            php         ;save status
202c : 68              >            pla         ;use stack to retrieve status
202d : 48              >            pha
                       >            cmp_flag ~fn
202e : 0908            >            ora #decmode        ;ignore decimal mode bit
2030 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2032 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2034 : 28              >            plp         ;restore status
                        
2035 : 88                       dey
2036 : cc1c02                   cpy abs7f
                                tst_y $7e,~fzc
2039 : 08              >            php         ;save flags
203a : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
203c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
203e : 68              >            pla         ;load status
203f : 48              >            pha
                       >            cmp_flag ~fzc
2040 : 0908            >            ora #decmode        ;ignore decimal mode bit
2042 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2044 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2046 : 28              >            plp         ;restore status
                        
                        
                                set_y $80,0
                       >            load_flag 0
2047 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2049 : 48              >            pha         ;use stack to load status
204a : a080            >            ldy #$80     ;precharge index y
204c : 28              >            plp
                        
204d : c07f                     cpy #$7f
                                tst_stat fc
204f : 08              >            php         ;save status
2050 : 68              >            pla         ;use stack to retrieve status
2051 : 48              >            pha
                       >            cmp_flag fc
2052 : 0908            >            ora #decmode        ;ignore decimal mode bit
2054 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2056 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2058 : 28              >            plp         ;restore status
                        
2059 : 88                       dey
205a : c07f                     cpy #$7f
                                tst_stat fzc
205c : 08              >            php         ;save status
205d : 68              >            pla         ;use stack to retrieve status
205e : 48              >            pha
                       >            cmp_flag fzc
205f : 0908            >            ora #decmode        ;ignore decimal mode bit
2061 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2063 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2065 : 28              >            plp         ;restore status
                        
2066 : 88                       dey
2067 : c07f                     cpy #$7f
                                tst_y $7e,fn
2069 : 08              >            php         ;save flags
206a : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
206c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
206e : 68              >            pla         ;load status
206f : 48              >            pha
                       >            cmp_flag fn
2070 : 0908            >            ora #decmode        ;ignore decimal mode bit
2072 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2074 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2076 : 28              >            plp         ;restore status
                        
                                set_y $80,$ff
                       >            load_flag $ff
2077 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2079 : 48              >            pha         ;use stack to load status
207a : a080            >            ldy #$80     ;precharge index y
207c : 28              >            plp
                        
207d : c07f                     cpy #$7f
                                tst_stat ~fnz
207f : 08              >            php         ;save status
2080 : 68              >            pla         ;use stack to retrieve status
2081 : 48              >            pha
                       >            cmp_flag ~fnz
2082 : 0908            >            ora #decmode        ;ignore decimal mode bit
2084 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2086 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2088 : 28              >            plp         ;restore status
                        
2089 : 88                       dey
208a : c07f                     cpy #$7f
                                tst_stat ~fn
208c : 08              >            php         ;save status
208d : 68              >            pla         ;use stack to retrieve status
208e : 48              >            pha
                       >            cmp_flag ~fn
208f : 0908            >            ora #decmode        ;ignore decimal mode bit
2091 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2093 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2095 : 28              >            plp         ;restore status
                        
2096 : 88                       dey
2097 : c07f                     cpy #$7f
                                tst_y $7e,~fzc
2099 : 08              >            php         ;save flags
209a : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
209c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
209e : 68              >            pla         ;load status
209f : 48              >            pha
                       >            cmp_flag ~fzc
20a0 : 0908            >            ora #decmode        ;ignore decimal mode bit
20a2 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
20a4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
20a6 : 28              >            plp         ;restore status
                        
                                next_test
20a7 : ad0002          >            lda test_case   ;previous test
20aa : c91b            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
20ac : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001c =                 >test_num = test_num + 1
20ae : a91c            >            lda #test_num   ;*** next tests' number
20b0 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; CMP - zp / abs / #         
                                set_a $80,0
                       >            load_flag 0
20b3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
20b5 : 48              >            pha         ;use stack to load status
20b6 : a980            >            lda #$80     ;precharge accu
20b8 : 28              >            plp
                        
20b9 : c519                     cmp zp7f
                                tst_a $80,fc
20bb : 08              >            php         ;save flags
20bc : c980            >            cmp #$80     ;test result
                       >            trap_ne
20be : d0fe            >        bne *           ;failed not equal (non zero)
                       >
20c0 : 68              >            pla         ;load status
20c1 : 48              >            pha
                       >            cmp_flag fc
20c2 : 0908            >            ora #decmode        ;ignore decimal mode bit
20c4 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
20c6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
20c8 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
20c9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
20cb : 48              >            pha         ;use stack to load status
20cc : a97f            >            lda #$7f     ;precharge accu
20ce : 28              >            plp
                        
20cf : c519                     cmp zp7f
                                tst_a $7f,fzc
20d1 : 08              >            php         ;save flags
20d2 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
20d4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
20d6 : 68              >            pla         ;load status
20d7 : 48              >            pha
                       >            cmp_flag fzc
20d8 : 0908            >            ora #decmode        ;ignore decimal mode bit
20da : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
20dc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
20de : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
20df : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
20e1 : 48              >            pha         ;use stack to load status
20e2 : a97e            >            lda #$7e     ;precharge accu
20e4 : 28              >            plp
                        
20e5 : c519                     cmp zp7f
                                tst_a $7e,fn
20e7 : 08              >            php         ;save flags
20e8 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
20ea : d0fe            >        bne *           ;failed not equal (non zero)
                       >
20ec : 68              >            pla         ;load status
20ed : 48              >            pha
                       >            cmp_flag fn
20ee : 0908            >            ora #decmode        ;ignore decimal mode bit
20f0 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
20f2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
20f4 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
20f5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
20f7 : 48              >            pha         ;use stack to load status
20f8 : a980            >            lda #$80     ;precharge accu
20fa : 28              >            plp
                        
20fb : c519                     cmp zp7f
                                tst_a $80,~fnz
20fd : 08              >            php         ;save flags
20fe : c980            >            cmp #$80     ;test result
                       >            trap_ne
2100 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2102 : 68              >            pla         ;load status
2103 : 48              >            pha
                       >            cmp_flag ~fnz
2104 : 0908            >            ora #decmode        ;ignore decimal mode bit
2106 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2108 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
210a : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
210b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
210d : 48              >            pha         ;use stack to load status
210e : a97f            >            lda #$7f     ;precharge accu
2110 : 28              >            plp
                        
2111 : c519                     cmp zp7f
                                tst_a $7f,~fn
2113 : 08              >            php         ;save flags
2114 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2116 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2118 : 68              >            pla         ;load status
2119 : 48              >            pha
                       >            cmp_flag ~fn
211a : 0908            >            ora #decmode        ;ignore decimal mode bit
211c : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
211e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2120 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
2121 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2123 : 48              >            pha         ;use stack to load status
2124 : a97e            >            lda #$7e     ;precharge accu
2126 : 28              >            plp
                        
2127 : c519                     cmp zp7f
                                tst_a $7e,~fzc
2129 : 08              >            php         ;save flags
212a : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
212c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
212e : 68              >            pla         ;load status
212f : 48              >            pha
                       >            cmp_flag ~fzc
2130 : 0908            >            ora #decmode        ;ignore decimal mode bit
2132 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2134 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2136 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
2137 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2139 : 48              >            pha         ;use stack to load status
213a : a980            >            lda #$80     ;precharge accu
213c : 28              >            plp
                        
213d : cd1c02                   cmp abs7f
                                tst_a $80,fc
2140 : 08              >            php         ;save flags
2141 : c980            >            cmp #$80     ;test result
                       >            trap_ne
2143 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2145 : 68              >            pla         ;load status
2146 : 48              >            pha
                       >            cmp_flag fc
2147 : 0908            >            ora #decmode        ;ignore decimal mode bit
2149 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
214b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
214d : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
214e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2150 : 48              >            pha         ;use stack to load status
2151 : a97f            >            lda #$7f     ;precharge accu
2153 : 28              >            plp
                        
2154 : cd1c02                   cmp abs7f
                                tst_a $7f,fzc
2157 : 08              >            php         ;save flags
2158 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
215a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
215c : 68              >            pla         ;load status
215d : 48              >            pha
                       >            cmp_flag fzc
215e : 0908            >            ora #decmode        ;ignore decimal mode bit
2160 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2162 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2164 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
2165 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2167 : 48              >            pha         ;use stack to load status
2168 : a97e            >            lda #$7e     ;precharge accu
216a : 28              >            plp
                        
216b : cd1c02                   cmp abs7f
                                tst_a $7e,fn
216e : 08              >            php         ;save flags
216f : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2171 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2173 : 68              >            pla         ;load status
2174 : 48              >            pha
                       >            cmp_flag fn
2175 : 0908            >            ora #decmode        ;ignore decimal mode bit
2177 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2179 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
217b : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
217c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
217e : 48              >            pha         ;use stack to load status
217f : a980            >            lda #$80     ;precharge accu
2181 : 28              >            plp
                        
2182 : cd1c02                   cmp abs7f
                                tst_a $80,~fnz
2185 : 08              >            php         ;save flags
2186 : c980            >            cmp #$80     ;test result
                       >            trap_ne
2188 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
218a : 68              >            pla         ;load status
218b : 48              >            pha
                       >            cmp_flag ~fnz
218c : 0908            >            ora #decmode        ;ignore decimal mode bit
218e : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2190 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2192 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
2193 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2195 : 48              >            pha         ;use stack to load status
2196 : a97f            >            lda #$7f     ;precharge accu
2198 : 28              >            plp
                        
2199 : cd1c02                   cmp abs7f
                                tst_a $7f,~fn
219c : 08              >            php         ;save flags
219d : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
219f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
21a1 : 68              >            pla         ;load status
21a2 : 48              >            pha
                       >            cmp_flag ~fn
21a3 : 0908            >            ora #decmode        ;ignore decimal mode bit
21a5 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
21a7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
21a9 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
21aa : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
21ac : 48              >            pha         ;use stack to load status
21ad : a97e            >            lda #$7e     ;precharge accu
21af : 28              >            plp
                        
21b0 : cd1c02                   cmp abs7f
                                tst_a $7e,~fzc
21b3 : 08              >            php         ;save flags
21b4 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
21b6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
21b8 : 68              >            pla         ;load status
21b9 : 48              >            pha
                       >            cmp_flag ~fzc
21ba : 0908            >            ora #decmode        ;ignore decimal mode bit
21bc : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
21be : d0fe            >        bne *           ;failed not equal (non zero)
                       >
21c0 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
21c1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
21c3 : 48              >            pha         ;use stack to load status
21c4 : a980            >            lda #$80     ;precharge accu
21c6 : 28              >            plp
                        
21c7 : c97f                     cmp #$7f
                                tst_a $80,fc
21c9 : 08              >            php         ;save flags
21ca : c980            >            cmp #$80     ;test result
                       >            trap_ne
21cc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
21ce : 68              >            pla         ;load status
21cf : 48              >            pha
                       >            cmp_flag fc
21d0 : 0908            >            ora #decmode        ;ignore decimal mode bit
21d2 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
21d4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
21d6 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
21d7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
21d9 : 48              >            pha         ;use stack to load status
21da : a97f            >            lda #$7f     ;precharge accu
21dc : 28              >            plp
                        
21dd : c97f                     cmp #$7f
                                tst_a $7f,fzc
21df : 08              >            php         ;save flags
21e0 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
21e2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
21e4 : 68              >            pla         ;load status
21e5 : 48              >            pha
                       >            cmp_flag fzc
21e6 : 0908            >            ora #decmode        ;ignore decimal mode bit
21e8 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
21ea : d0fe            >        bne *           ;failed not equal (non zero)
                       >
21ec : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
21ed : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
21ef : 48              >            pha         ;use stack to load status
21f0 : a97e            >            lda #$7e     ;precharge accu
21f2 : 28              >            plp
                        
21f3 : c97f                     cmp #$7f
                                tst_a $7e,fn
21f5 : 08              >            php         ;save flags
21f6 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
21f8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
21fa : 68              >            pla         ;load status
21fb : 48              >            pha
                       >            cmp_flag fn
21fc : 0908            >            ora #decmode        ;ignore decimal mode bit
21fe : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2200 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2202 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
2203 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2205 : 48              >            pha         ;use stack to load status
2206 : a980            >            lda #$80     ;precharge accu
2208 : 28              >            plp
                        
2209 : c97f                     cmp #$7f
                                tst_a $80,~fnz
220b : 08              >            php         ;save flags
220c : c980            >            cmp #$80     ;test result
                       >            trap_ne
220e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2210 : 68              >            pla         ;load status
2211 : 48              >            pha
                       >            cmp_flag ~fnz
2212 : 0908            >            ora #decmode        ;ignore decimal mode bit
2214 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2216 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2218 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
2219 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
221b : 48              >            pha         ;use stack to load status
221c : a97f            >            lda #$7f     ;precharge accu
221e : 28              >            plp
                        
221f : c97f                     cmp #$7f
                                tst_a $7f,~fn
2221 : 08              >            php         ;save flags
2222 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2224 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2226 : 68              >            pla         ;load status
2227 : 48              >            pha
                       >            cmp_flag ~fn
2228 : 0908            >            ora #decmode        ;ignore decimal mode bit
222a : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
222c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
222e : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
222f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2231 : 48              >            pha         ;use stack to load status
2232 : a97e            >            lda #$7e     ;precharge accu
2234 : 28              >            plp
                        
2235 : c97f                     cmp #$7f
                                tst_a $7e,~fzc
2237 : 08              >            php         ;save flags
2238 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
223a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
223c : 68              >            pla         ;load status
223d : 48              >            pha
                       >            cmp_flag ~fzc
223e : 0908            >            ora #decmode        ;ignore decimal mode bit
2240 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2242 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2244 : 28              >            plp         ;restore status
                        
                        
2245 : a204                     ldx #4          ;with indexing by X
                                set_a $80,0
                       >            load_flag 0
2247 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2249 : 48              >            pha         ;use stack to load status
224a : a980            >            lda #$80     ;precharge accu
224c : 28              >            plp
                        
224d : d515                     cmp zp1,x
                                tst_a $80,fc
224f : 08              >            php         ;save flags
2250 : c980            >            cmp #$80     ;test result
                       >            trap_ne
2252 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2254 : 68              >            pla         ;load status
2255 : 48              >            pha
                       >            cmp_flag fc
2256 : 0908            >            ora #decmode        ;ignore decimal mode bit
2258 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
225a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
225c : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
225d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
225f : 48              >            pha         ;use stack to load status
2260 : a97f            >            lda #$7f     ;precharge accu
2262 : 28              >            plp
                        
2263 : d515                     cmp zp1,x
                                tst_a $7f,fzc
2265 : 08              >            php         ;save flags
2266 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2268 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
226a : 68              >            pla         ;load status
226b : 48              >            pha
                       >            cmp_flag fzc
226c : 0908            >            ora #decmode        ;ignore decimal mode bit
226e : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2270 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2272 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
2273 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2275 : 48              >            pha         ;use stack to load status
2276 : a97e            >            lda #$7e     ;precharge accu
2278 : 28              >            plp
                        
2279 : d515                     cmp zp1,x
                                tst_a $7e,fn
227b : 08              >            php         ;save flags
227c : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
227e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2280 : 68              >            pla         ;load status
2281 : 48              >            pha
                       >            cmp_flag fn
2282 : 0908            >            ora #decmode        ;ignore decimal mode bit
2284 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2286 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2288 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
2289 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
228b : 48              >            pha         ;use stack to load status
228c : a980            >            lda #$80     ;precharge accu
228e : 28              >            plp
                        
228f : d515                     cmp zp1,x
                                tst_a $80,~fnz
2291 : 08              >            php         ;save flags
2292 : c980            >            cmp #$80     ;test result
                       >            trap_ne
2294 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2296 : 68              >            pla         ;load status
2297 : 48              >            pha
                       >            cmp_flag ~fnz
2298 : 0908            >            ora #decmode        ;ignore decimal mode bit
229a : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
229c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
229e : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
229f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
22a1 : 48              >            pha         ;use stack to load status
22a2 : a97f            >            lda #$7f     ;precharge accu
22a4 : 28              >            plp
                        
22a5 : d515                     cmp zp1,x
                                tst_a $7f,~fn
22a7 : 08              >            php         ;save flags
22a8 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
22aa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
22ac : 68              >            pla         ;load status
22ad : 48              >            pha
                       >            cmp_flag ~fn
22ae : 0908            >            ora #decmode        ;ignore decimal mode bit
22b0 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
22b2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
22b4 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
22b5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
22b7 : 48              >            pha         ;use stack to load status
22b8 : a97e            >            lda #$7e     ;precharge accu
22ba : 28              >            plp
                        
22bb : d515                     cmp zp1,x
                                tst_a $7e,~fzc
22bd : 08              >            php         ;save flags
22be : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
22c0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
22c2 : 68              >            pla         ;load status
22c3 : 48              >            pha
                       >            cmp_flag ~fzc
22c4 : 0908            >            ora #decmode        ;ignore decimal mode bit
22c6 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
22c8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
22ca : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
22cb : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
22cd : 48              >            pha         ;use stack to load status
22ce : a980            >            lda #$80     ;precharge accu
22d0 : 28              >            plp
                        
22d1 : dd1802                   cmp abs1,x
                                tst_a $80,fc
22d4 : 08              >            php         ;save flags
22d5 : c980            >            cmp #$80     ;test result
                       >            trap_ne
22d7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
22d9 : 68              >            pla         ;load status
22da : 48              >            pha
                       >            cmp_flag fc
22db : 0908            >            ora #decmode        ;ignore decimal mode bit
22dd : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
22df : d0fe            >        bne *           ;failed not equal (non zero)
                       >
22e1 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
22e2 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
22e4 : 48              >            pha         ;use stack to load status
22e5 : a97f            >            lda #$7f     ;precharge accu
22e7 : 28              >            plp
                        
22e8 : dd1802                   cmp abs1,x
                                tst_a $7f,fzc
22eb : 08              >            php         ;save flags
22ec : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
22ee : d0fe            >        bne *           ;failed not equal (non zero)
                       >
22f0 : 68              >            pla         ;load status
22f1 : 48              >            pha
                       >            cmp_flag fzc
22f2 : 0908            >            ora #decmode        ;ignore decimal mode bit
22f4 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
22f6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
22f8 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
22f9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
22fb : 48              >            pha         ;use stack to load status
22fc : a97e            >            lda #$7e     ;precharge accu
22fe : 28              >            plp
                        
22ff : dd1802                   cmp abs1,x
                                tst_a $7e,fn
2302 : 08              >            php         ;save flags
2303 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2305 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2307 : 68              >            pla         ;load status
2308 : 48              >            pha
                       >            cmp_flag fn
2309 : 0908            >            ora #decmode        ;ignore decimal mode bit
230b : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
230d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
230f : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
2310 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2312 : 48              >            pha         ;use stack to load status
2313 : a980            >            lda #$80     ;precharge accu
2315 : 28              >            plp
                        
2316 : dd1802                   cmp abs1,x
                                tst_a $80,~fnz
2319 : 08              >            php         ;save flags
231a : c980            >            cmp #$80     ;test result
                       >            trap_ne
231c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
231e : 68              >            pla         ;load status
231f : 48              >            pha
                       >            cmp_flag ~fnz
2320 : 0908            >            ora #decmode        ;ignore decimal mode bit
2322 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2324 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2326 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
2327 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2329 : 48              >            pha         ;use stack to load status
232a : a97f            >            lda #$7f     ;precharge accu
232c : 28              >            plp
                        
232d : dd1802                   cmp abs1,x
                                tst_a $7f,~fn
2330 : 08              >            php         ;save flags
2331 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2333 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2335 : 68              >            pla         ;load status
2336 : 48              >            pha
                       >            cmp_flag ~fn
2337 : 0908            >            ora #decmode        ;ignore decimal mode bit
2339 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
233b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
233d : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
233e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2340 : 48              >            pha         ;use stack to load status
2341 : a97e            >            lda #$7e     ;precharge accu
2343 : 28              >            plp
                        
2344 : dd1802                   cmp abs1,x
                                tst_a $7e,~fzc
2347 : 08              >            php         ;save flags
2348 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
234a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
234c : 68              >            pla         ;load status
234d : 48              >            pha
                       >            cmp_flag ~fzc
234e : 0908            >            ora #decmode        ;ignore decimal mode bit
2350 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2352 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2354 : 28              >            plp         ;restore status
                        
                        
2355 : a004                     ldy #4          ;with indexing by Y
2357 : a208                     ldx #8          ;with indexed indirect
                                set_a $80,0
                       >            load_flag 0
2359 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
235b : 48              >            pha         ;use stack to load status
235c : a980            >            lda #$80     ;precharge accu
235e : 28              >            plp
                        
235f : d91802                   cmp abs1,y
                                tst_a $80,fc
2362 : 08              >            php         ;save flags
2363 : c980            >            cmp #$80     ;test result
                       >            trap_ne
2365 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2367 : 68              >            pla         ;load status
2368 : 48              >            pha
                       >            cmp_flag fc
2369 : 0908            >            ora #decmode        ;ignore decimal mode bit
236b : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
236d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
236f : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
2370 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2372 : 48              >            pha         ;use stack to load status
2373 : a97f            >            lda #$7f     ;precharge accu
2375 : 28              >            plp
                        
2376 : d91802                   cmp abs1,y
                                tst_a $7f,fzc
2379 : 08              >            php         ;save flags
237a : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
237c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
237e : 68              >            pla         ;load status
237f : 48              >            pha
                       >            cmp_flag fzc
2380 : 0908            >            ora #decmode        ;ignore decimal mode bit
2382 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2384 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2386 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
2387 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2389 : 48              >            pha         ;use stack to load status
238a : a97e            >            lda #$7e     ;precharge accu
238c : 28              >            plp
                        
238d : d91802                   cmp abs1,y
                                tst_a $7e,fn
2390 : 08              >            php         ;save flags
2391 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2393 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2395 : 68              >            pla         ;load status
2396 : 48              >            pha
                       >            cmp_flag fn
2397 : 0908            >            ora #decmode        ;ignore decimal mode bit
2399 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
239b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
239d : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
239e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
23a0 : 48              >            pha         ;use stack to load status
23a1 : a980            >            lda #$80     ;precharge accu
23a3 : 28              >            plp
                        
23a4 : d91802                   cmp abs1,y
                                tst_a $80,~fnz
23a7 : 08              >            php         ;save flags
23a8 : c980            >            cmp #$80     ;test result
                       >            trap_ne
23aa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
23ac : 68              >            pla         ;load status
23ad : 48              >            pha
                       >            cmp_flag ~fnz
23ae : 0908            >            ora #decmode        ;ignore decimal mode bit
23b0 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
23b2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
23b4 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
23b5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
23b7 : 48              >            pha         ;use stack to load status
23b8 : a97f            >            lda #$7f     ;precharge accu
23ba : 28              >            plp
                        
23bb : d91802                   cmp abs1,y
                                tst_a $7f,~fn
23be : 08              >            php         ;save flags
23bf : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
23c1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
23c3 : 68              >            pla         ;load status
23c4 : 48              >            pha
                       >            cmp_flag ~fn
23c5 : 0908            >            ora #decmode        ;ignore decimal mode bit
23c7 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
23c9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
23cb : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
23cc : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
23ce : 48              >            pha         ;use stack to load status
23cf : a97e            >            lda #$7e     ;precharge accu
23d1 : 28              >            plp
                        
23d2 : d91802                   cmp abs1,y
                                tst_a $7e,~fzc
23d5 : 08              >            php         ;save flags
23d6 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
23d8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
23da : 68              >            pla         ;load status
23db : 48              >            pha
                       >            cmp_flag ~fzc
23dc : 0908            >            ora #decmode        ;ignore decimal mode bit
23de : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
23e0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
23e2 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
23e3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
23e5 : 48              >            pha         ;use stack to load status
23e6 : a980            >            lda #$80     ;precharge accu
23e8 : 28              >            plp
                        
23e9 : c126                     cmp (ind1,x)
                                tst_a $80,fc
23eb : 08              >            php         ;save flags
23ec : c980            >            cmp #$80     ;test result
                       >            trap_ne
23ee : d0fe            >        bne *           ;failed not equal (non zero)
                       >
23f0 : 68              >            pla         ;load status
23f1 : 48              >            pha
                       >            cmp_flag fc
23f2 : 0908            >            ora #decmode        ;ignore decimal mode bit
23f4 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
23f6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
23f8 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
23f9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
23fb : 48              >            pha         ;use stack to load status
23fc : a97f            >            lda #$7f     ;precharge accu
23fe : 28              >            plp
                        
23ff : c126                     cmp (ind1,x)
                                tst_a $7f,fzc
2401 : 08              >            php         ;save flags
2402 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2404 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2406 : 68              >            pla         ;load status
2407 : 48              >            pha
                       >            cmp_flag fzc
2408 : 0908            >            ora #decmode        ;ignore decimal mode bit
240a : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
240c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
240e : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
240f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2411 : 48              >            pha         ;use stack to load status
2412 : a97e            >            lda #$7e     ;precharge accu
2414 : 28              >            plp
                        
2415 : c126                     cmp (ind1,x)
                                tst_a $7e,fn
2417 : 08              >            php         ;save flags
2418 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
241a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
241c : 68              >            pla         ;load status
241d : 48              >            pha
                       >            cmp_flag fn
241e : 0908            >            ora #decmode        ;ignore decimal mode bit
2420 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2422 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2424 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
2425 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2427 : 48              >            pha         ;use stack to load status
2428 : a980            >            lda #$80     ;precharge accu
242a : 28              >            plp
                        
242b : c126                     cmp (ind1,x)
                                tst_a $80,~fnz
242d : 08              >            php         ;save flags
242e : c980            >            cmp #$80     ;test result
                       >            trap_ne
2430 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2432 : 68              >            pla         ;load status
2433 : 48              >            pha
                       >            cmp_flag ~fnz
2434 : 0908            >            ora #decmode        ;ignore decimal mode bit
2436 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2438 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
243a : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
243b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
243d : 48              >            pha         ;use stack to load status
243e : a97f            >            lda #$7f     ;precharge accu
2440 : 28              >            plp
                        
2441 : c126                     cmp (ind1,x)
                                tst_a $7f,~fn
2443 : 08              >            php         ;save flags
2444 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2446 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2448 : 68              >            pla         ;load status
2449 : 48              >            pha
                       >            cmp_flag ~fn
244a : 0908            >            ora #decmode        ;ignore decimal mode bit
244c : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
244e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2450 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
2451 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2453 : 48              >            pha         ;use stack to load status
2454 : a97e            >            lda #$7e     ;precharge accu
2456 : 28              >            plp
                        
2457 : c126                     cmp (ind1,x)
                                tst_a $7e,~fzc
2459 : 08              >            php         ;save flags
245a : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
245c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
245e : 68              >            pla         ;load status
245f : 48              >            pha
                       >            cmp_flag ~fzc
2460 : 0908            >            ora #decmode        ;ignore decimal mode bit
2462 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2464 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2466 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
2467 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2469 : 48              >            pha         ;use stack to load status
246a : a980            >            lda #$80     ;precharge accu
246c : 28              >            plp
                        
246d : d126                     cmp (ind1),y
                                tst_a $80,fc
246f : 08              >            php         ;save flags
2470 : c980            >            cmp #$80     ;test result
                       >            trap_ne
2472 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2474 : 68              >            pla         ;load status
2475 : 48              >            pha
                       >            cmp_flag fc
2476 : 0908            >            ora #decmode        ;ignore decimal mode bit
2478 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
247a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
247c : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
247d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
247f : 48              >            pha         ;use stack to load status
2480 : a97f            >            lda #$7f     ;precharge accu
2482 : 28              >            plp
                        
2483 : d126                     cmp (ind1),y
                                tst_a $7f,fzc
2485 : 08              >            php         ;save flags
2486 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2488 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
248a : 68              >            pla         ;load status
248b : 48              >            pha
                       >            cmp_flag fzc
248c : 0908            >            ora #decmode        ;ignore decimal mode bit
248e : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2490 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2492 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
2493 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2495 : 48              >            pha         ;use stack to load status
2496 : a97e            >            lda #$7e     ;precharge accu
2498 : 28              >            plp
                        
2499 : d126                     cmp (ind1),y
                                tst_a $7e,fn
249b : 08              >            php         ;save flags
249c : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
249e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
24a0 : 68              >            pla         ;load status
24a1 : 48              >            pha
                       >            cmp_flag fn
24a2 : 0908            >            ora #decmode        ;ignore decimal mode bit
24a4 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
24a6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
24a8 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
24a9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
24ab : 48              >            pha         ;use stack to load status
24ac : a980            >            lda #$80     ;precharge accu
24ae : 28              >            plp
                        
24af : d126                     cmp (ind1),y
                                tst_a $80,~fnz
24b1 : 08              >            php         ;save flags
24b2 : c980            >            cmp #$80     ;test result
                       >            trap_ne
24b4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
24b6 : 68              >            pla         ;load status
24b7 : 48              >            pha
                       >            cmp_flag ~fnz
24b8 : 0908            >            ora #decmode        ;ignore decimal mode bit
24ba : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
24bc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
24be : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
24bf : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
24c1 : 48              >            pha         ;use stack to load status
24c2 : a97f            >            lda #$7f     ;precharge accu
24c4 : 28              >            plp
                        
24c5 : d126                     cmp (ind1),y
                                tst_a $7f,~fn
24c7 : 08              >            php         ;save flags
24c8 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
24ca : d0fe            >        bne *           ;failed not equal (non zero)
                       >
24cc : 68              >            pla         ;load status
24cd : 48              >            pha
                       >            cmp_flag ~fn
24ce : 0908            >            ora #decmode        ;ignore decimal mode bit
24d0 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
24d2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
24d4 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
24d5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
24d7 : 48              >            pha         ;use stack to load status
24d8 : a97e            >            lda #$7e     ;precharge accu
24da : 28              >            plp
                        
24db : d126                     cmp (ind1),y
                                tst_a $7e,~fzc
24dd : 08              >            php         ;save flags
24de : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
24e0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
24e2 : 68              >            pla         ;load status
24e3 : 48              >            pha
                       >            cmp_flag ~fzc
24e4 : 0908            >            ora #decmode        ;ignore decimal mode bit
24e6 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
24e8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
24ea : 28              >            plp         ;restore status
                        
                                next_test
24eb : ad0002          >            lda test_case   ;previous test
24ee : c91c            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
24f0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001d =                 >test_num = test_num + 1
24f2 : a91d            >            lda #test_num   ;*** next tests' number
24f4 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing shifts - ASL LSR ROL ROR all addressing modes
                        ; shifts - accumulator
24f7 : a205                     ldx #5
24f9 :                  tasl
                                set_ax zps,0
                       >            load_flag 0
24f9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
24fb : 48              >            pha         ;use stack to load status
24fc : b513            >            lda zps,x    ;precharge accu
24fe : 28              >            plp
                        
24ff : 0a                       asl a
                                tst_ax rASL,fASL,0
2500 : 08              >            php         ;save flags
2501 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
2504 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2506 : 68              >            pla         ;load status
                       >            eor_flag 0
2507 : 0908            >            ora #decmode        ;ignore decimal mode bit
2509 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
250b : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne     ;
250e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2510 : ca                       dex
2511 : 10e6                     bpl tasl
2513 : a205                     ldx #5
2515 :                  tasl1
                                set_ax zps,$ff
                       >            load_flag $ff
2515 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2517 : 48              >            pha         ;use stack to load status
2518 : b513            >            lda zps,x    ;precharge accu
251a : 28              >            plp
                        
251b : 0a                       asl a
                                tst_ax rASL,fASL,$ff-fnzc
251c : 08              >            php         ;save flags
251d : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
2520 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2522 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2523 : 0908            >            ora #decmode        ;ignore decimal mode bit
2525 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2527 : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne     ;
252a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
252c : ca                       dex
252d : 10e6                     bpl tasl1
                        
252f : a205                     ldx #5
2531 :                  tlsr
                                set_ax zps,0
                       >            load_flag 0
2531 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2533 : 48              >            pha         ;use stack to load status
2534 : b513            >            lda zps,x    ;precharge accu
2536 : 28              >            plp
                        
2537 : 4a                       lsr a
                                tst_ax rLSR,fLSR,0
2538 : 08              >            php         ;save flags
2539 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
253c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
253e : 68              >            pla         ;load status
                       >            eor_flag 0
253f : 0908            >            ora #decmode        ;ignore decimal mode bit
2541 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2543 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne     ;
2546 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2548 : ca                       dex
2549 : 10e6                     bpl tlsr
254b : a205                     ldx #5
254d :                  tlsr1
                                set_ax zps,$ff
                       >            load_flag $ff
254d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
254f : 48              >            pha         ;use stack to load status
2550 : b513            >            lda zps,x    ;precharge accu
2552 : 28              >            plp
                        
2553 : 4a                       lsr a
                                tst_ax rLSR,fLSR,$ff-fnzc
2554 : 08              >            php         ;save flags
2555 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
2558 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
255a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
255b : 0908            >            ora #decmode        ;ignore decimal mode bit
255d : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
255f : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne     ;
2562 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2564 : ca                       dex
2565 : 10e6                     bpl tlsr1
                        
2567 : a205                     ldx #5
2569 :                  trol
                                set_ax zps,0
                       >            load_flag 0
2569 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
256b : 48              >            pha         ;use stack to load status
256c : b513            >            lda zps,x    ;precharge accu
256e : 28              >            plp
                        
256f : 2a                       rol a
                                tst_ax rROL,fROL,0
2570 : 08              >            php         ;save flags
2571 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
2574 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2576 : 68              >            pla         ;load status
                       >            eor_flag 0
2577 : 0908            >            ora #decmode        ;ignore decimal mode bit
2579 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
257b : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne     ;
257e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2580 : ca                       dex
2581 : 10e6                     bpl trol
2583 : a205                     ldx #5
2585 :                  trol1
                                set_ax zps,$ff-fc
                       >            load_flag $ff-fc
2585 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2587 : 48              >            pha         ;use stack to load status
2588 : b513            >            lda zps,x    ;precharge accu
258a : 28              >            plp
                        
258b : 2a                       rol a
                                tst_ax rROL,fROL,$ff-fnzc
258c : 08              >            php         ;save flags
258d : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
2590 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2592 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2593 : 0908            >            ora #decmode        ;ignore decimal mode bit
2595 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2597 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne     ;
259a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
259c : ca                       dex
259d : 10e6                     bpl trol1
                        
259f : a205                     ldx #5
25a1 :                  trolc
                                set_ax zps,fc
                       >            load_flag fc
25a1 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
25a3 : 48              >            pha         ;use stack to load status
25a4 : b513            >            lda zps,x    ;precharge accu
25a6 : 28              >            plp
                        
25a7 : 2a                       rol a
                                tst_ax rROLc,fROLc,0
25a8 : 08              >            php         ;save flags
25a9 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
25ac : d0fe            >        bne *           ;failed not equal (non zero)
                       >
25ae : 68              >            pla         ;load status
                       >            eor_flag 0
25af : 0908            >            ora #decmode        ;ignore decimal mode bit
25b1 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
25b3 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne     ;
25b6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
25b8 : ca                       dex
25b9 : 10e6                     bpl trolc
25bb : a205                     ldx #5
25bd :                  trolc1
                                set_ax zps,$ff
                       >            load_flag $ff
25bd : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
25bf : 48              >            pha         ;use stack to load status
25c0 : b513            >            lda zps,x    ;precharge accu
25c2 : 28              >            plp
                        
25c3 : 2a                       rol a
                                tst_ax rROLc,fROLc,$ff-fnzc
25c4 : 08              >            php         ;save flags
25c5 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
25c8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
25ca : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
25cb : 0908            >            ora #decmode        ;ignore decimal mode bit
25cd : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
25cf : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne     ;
25d2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
25d4 : ca                       dex
25d5 : 10e6                     bpl trolc1
                        
25d7 : a205                     ldx #5
25d9 :                  tror
                                set_ax zps,0
                       >            load_flag 0
25d9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
25db : 48              >            pha         ;use stack to load status
25dc : b513            >            lda zps,x    ;precharge accu
25de : 28              >            plp
                        
25df : 6a                       ror a
                                tst_ax rROR,fROR,0
25e0 : 08              >            php         ;save flags
25e1 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
25e4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
25e6 : 68              >            pla         ;load status
                       >            eor_flag 0
25e7 : 0908            >            ora #decmode        ;ignore decimal mode bit
25e9 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
25eb : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne     ;
25ee : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
25f0 : ca                       dex
25f1 : 10e6                     bpl tror
25f3 : a205                     ldx #5
25f5 :                  tror1
                                set_ax zps,$ff-fc
                       >            load_flag $ff-fc
25f5 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
25f7 : 48              >            pha         ;use stack to load status
25f8 : b513            >            lda zps,x    ;precharge accu
25fa : 28              >            plp
                        
25fb : 6a                       ror a
                                tst_ax rROR,fROR,$ff-fnzc
25fc : 08              >            php         ;save flags
25fd : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
2600 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2602 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2603 : 0908            >            ora #decmode        ;ignore decimal mode bit
2605 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2607 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne     ;
260a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
260c : ca                       dex
260d : 10e6                     bpl tror1
                        
260f : a205                     ldx #5
2611 :                  trorc
                                set_ax zps,fc
                       >            load_flag fc
2611 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
2613 : 48              >            pha         ;use stack to load status
2614 : b513            >            lda zps,x    ;precharge accu
2616 : 28              >            plp
                        
2617 : 6a                       ror a
                                tst_ax rRORc,fRORc,0
2618 : 08              >            php         ;save flags
2619 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
261c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
261e : 68              >            pla         ;load status
                       >            eor_flag 0
261f : 0908            >            ora #decmode        ;ignore decimal mode bit
2621 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2623 : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne     ;
2626 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2628 : ca                       dex
2629 : 10e6                     bpl trorc
262b : a205                     ldx #5
262d :                  trorc1
                                set_ax zps,$ff
                       >            load_flag $ff
262d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
262f : 48              >            pha         ;use stack to load status
2630 : b513            >            lda zps,x    ;precharge accu
2632 : 28              >            plp
                        
2633 : 6a                       ror a
                                tst_ax rRORc,fRORc,$ff-fnzc
2634 : 08              >            php         ;save flags
2635 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
2638 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
263a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
263b : 0908            >            ora #decmode        ;ignore decimal mode bit
263d : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
263f : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne     ;
2642 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2644 : ca                       dex
2645 : 10e6                     bpl trorc1
                                next_test
2647 : ad0002          >            lda test_case   ;previous test
264a : c91d            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
264c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001e =                 >test_num = test_num + 1
264e : a91e            >            lda #test_num   ;*** next tests' number
2650 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; shifts - zeropage
2653 : a205                     ldx #5
2655 :                  tasl2
                                set_z zps,0
                       >            load_flag 0
2655 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2657 : 48              >            pha         ;use stack to load status
2658 : b513            >            lda zps,x    ;load to zeropage
265a : 850c            >            sta zpt
265c : 28              >            plp
                        
265d : 060c                     asl zpt
                                tst_z rASL,fASL,0
265f : 08              >            php         ;save flags
2660 : a50c            >            lda zpt
2662 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
2665 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2667 : 68              >            pla         ;load status
                       >            eor_flag 0
2668 : 0908            >            ora #decmode        ;ignore decimal mode bit
266a : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
266c : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
266f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2671 : ca                       dex
2672 : 10e1                     bpl tasl2
2674 : a205                     ldx #5
2676 :                  tasl3
                                set_z zps,$ff
                       >            load_flag $ff
2676 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2678 : 48              >            pha         ;use stack to load status
2679 : b513            >            lda zps,x    ;load to zeropage
267b : 850c            >            sta zpt
267d : 28              >            plp
                        
267e : 060c                     asl zpt
                                tst_z rASL,fASL,$ff-fnzc
2680 : 08              >            php         ;save flags
2681 : a50c            >            lda zpt
2683 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
2686 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2688 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2689 : 0908            >            ora #decmode        ;ignore decimal mode bit
268b : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
268d : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
2690 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2692 : ca                       dex
2693 : 10e1                     bpl tasl3
                        
2695 : a205                     ldx #5
2697 :                  tlsr2
                                set_z zps,0
                       >            load_flag 0
2697 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2699 : 48              >            pha         ;use stack to load status
269a : b513            >            lda zps,x    ;load to zeropage
269c : 850c            >            sta zpt
269e : 28              >            plp
                        
269f : 460c                     lsr zpt
                                tst_z rLSR,fLSR,0
26a1 : 08              >            php         ;save flags
26a2 : a50c            >            lda zpt
26a4 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
26a7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
26a9 : 68              >            pla         ;load status
                       >            eor_flag 0
26aa : 0908            >            ora #decmode        ;ignore decimal mode bit
26ac : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
26ae : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
26b1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
26b3 : ca                       dex
26b4 : 10e1                     bpl tlsr2
26b6 : a205                     ldx #5
26b8 :                  tlsr3
                                set_z zps,$ff
                       >            load_flag $ff
26b8 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
26ba : 48              >            pha         ;use stack to load status
26bb : b513            >            lda zps,x    ;load to zeropage
26bd : 850c            >            sta zpt
26bf : 28              >            plp
                        
26c0 : 460c                     lsr zpt
                                tst_z rLSR,fLSR,$ff-fnzc
26c2 : 08              >            php         ;save flags
26c3 : a50c            >            lda zpt
26c5 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
26c8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
26ca : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
26cb : 0908            >            ora #decmode        ;ignore decimal mode bit
26cd : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
26cf : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
26d2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
26d4 : ca                       dex
26d5 : 10e1                     bpl tlsr3
                        
26d7 : a205                     ldx #5
26d9 :                  trol2
                                set_z zps,0
                       >            load_flag 0
26d9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
26db : 48              >            pha         ;use stack to load status
26dc : b513            >            lda zps,x    ;load to zeropage
26de : 850c            >            sta zpt
26e0 : 28              >            plp
                        
26e1 : 260c                     rol zpt
                                tst_z rROL,fROL,0
26e3 : 08              >            php         ;save flags
26e4 : a50c            >            lda zpt
26e6 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
26e9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
26eb : 68              >            pla         ;load status
                       >            eor_flag 0
26ec : 0908            >            ora #decmode        ;ignore decimal mode bit
26ee : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
26f0 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
26f3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
26f5 : ca                       dex
26f6 : 10e1                     bpl trol2
26f8 : a205                     ldx #5
26fa :                  trol3
                                set_z zps,$ff-fc
                       >            load_flag $ff-fc
26fa : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
26fc : 48              >            pha         ;use stack to load status
26fd : b513            >            lda zps,x    ;load to zeropage
26ff : 850c            >            sta zpt
2701 : 28              >            plp
                        
2702 : 260c                     rol zpt
                                tst_z rROL,fROL,$ff-fnzc
2704 : 08              >            php         ;save flags
2705 : a50c            >            lda zpt
2707 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
270a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
270c : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
270d : 0908            >            ora #decmode        ;ignore decimal mode bit
270f : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2711 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
2714 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2716 : ca                       dex
2717 : 10e1                     bpl trol3
                        
2719 : a205                     ldx #5
271b :                  trolc2
                                set_z zps,fc
                       >            load_flag fc
271b : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
271d : 48              >            pha         ;use stack to load status
271e : b513            >            lda zps,x    ;load to zeropage
2720 : 850c            >            sta zpt
2722 : 28              >            plp
                        
2723 : 260c                     rol zpt
                                tst_z rROLc,fROLc,0
2725 : 08              >            php         ;save flags
2726 : a50c            >            lda zpt
2728 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
272b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
272d : 68              >            pla         ;load status
                       >            eor_flag 0
272e : 0908            >            ora #decmode        ;ignore decimal mode bit
2730 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2732 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
2735 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2737 : ca                       dex
2738 : 10e1                     bpl trolc2
273a : a205                     ldx #5
273c :                  trolc3
                                set_z zps,$ff
                       >            load_flag $ff
273c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
273e : 48              >            pha         ;use stack to load status
273f : b513            >            lda zps,x    ;load to zeropage
2741 : 850c            >            sta zpt
2743 : 28              >            plp
                        
2744 : 260c                     rol zpt
                                tst_z rROLc,fROLc,$ff-fnzc
2746 : 08              >            php         ;save flags
2747 : a50c            >            lda zpt
2749 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
274c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
274e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
274f : 0908            >            ora #decmode        ;ignore decimal mode bit
2751 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2753 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
2756 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2758 : ca                       dex
2759 : 10e1                     bpl trolc3
                        
275b : a205                     ldx #5
275d :                  tror2
                                set_z zps,0
                       >            load_flag 0
275d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
275f : 48              >            pha         ;use stack to load status
2760 : b513            >            lda zps,x    ;load to zeropage
2762 : 850c            >            sta zpt
2764 : 28              >            plp
                        
2765 : 660c                     ror zpt
                                tst_z rROR,fROR,0
2767 : 08              >            php         ;save flags
2768 : a50c            >            lda zpt
276a : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
276d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
276f : 68              >            pla         ;load status
                       >            eor_flag 0
2770 : 0908            >            ora #decmode        ;ignore decimal mode bit
2772 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2774 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
2777 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2779 : ca                       dex
277a : 10e1                     bpl tror2
277c : a205                     ldx #5
277e :                  tror3
                                set_z zps,$ff-fc
                       >            load_flag $ff-fc
277e : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2780 : 48              >            pha         ;use stack to load status
2781 : b513            >            lda zps,x    ;load to zeropage
2783 : 850c            >            sta zpt
2785 : 28              >            plp
                        
2786 : 660c                     ror zpt
                                tst_z rROR,fROR,$ff-fnzc
2788 : 08              >            php         ;save flags
2789 : a50c            >            lda zpt
278b : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
278e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2790 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2791 : 0908            >            ora #decmode        ;ignore decimal mode bit
2793 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2795 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
2798 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
279a : ca                       dex
279b : 10e1                     bpl tror3
                        
279d : a205                     ldx #5
279f :                  trorc2
                                set_z zps,fc
                       >            load_flag fc
279f : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
27a1 : 48              >            pha         ;use stack to load status
27a2 : b513            >            lda zps,x    ;load to zeropage
27a4 : 850c            >            sta zpt
27a6 : 28              >            plp
                        
27a7 : 660c                     ror zpt
                                tst_z rRORc,fRORc,0
27a9 : 08              >            php         ;save flags
27aa : a50c            >            lda zpt
27ac : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
27af : d0fe            >        bne *           ;failed not equal (non zero)
                       >
27b1 : 68              >            pla         ;load status
                       >            eor_flag 0
27b2 : 0908            >            ora #decmode        ;ignore decimal mode bit
27b4 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
27b6 : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
27b9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
27bb : ca                       dex
27bc : 10e1                     bpl trorc2
27be : a205                     ldx #5
27c0 :                  trorc3
                                set_z zps,$ff
                       >            load_flag $ff
27c0 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
27c2 : 48              >            pha         ;use stack to load status
27c3 : b513            >            lda zps,x    ;load to zeropage
27c5 : 850c            >            sta zpt
27c7 : 28              >            plp
                        
27c8 : 660c                     ror zpt
                                tst_z rRORc,fRORc,$ff-fnzc
27ca : 08              >            php         ;save flags
27cb : a50c            >            lda zpt
27cd : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
27d0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
27d2 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
27d3 : 0908            >            ora #decmode        ;ignore decimal mode bit
27d5 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
27d7 : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
27da : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
27dc : ca                       dex
27dd : 10e1                     bpl trorc3
                                next_test
27df : ad0002          >            lda test_case   ;previous test
27e2 : c91e            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
27e4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001f =                 >test_num = test_num + 1
27e6 : a91f            >            lda #test_num   ;*** next tests' number
27e8 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; shifts - absolute
27eb : a205                     ldx #5
27ed :                  tasl4
                                set_abs zps,0
                       >            load_flag 0
27ed : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
27ef : 48              >            pha         ;use stack to load status
27f0 : b513            >            lda zps,x    ;load to memory
27f2 : 8d0302          >            sta abst
27f5 : 28              >            plp
                        
27f6 : 0e0302                   asl abst
                                tst_abs rASL,fASL,0
27f9 : 08              >            php         ;save flags
27fa : ad0302          >            lda abst
27fd : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
2800 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2802 : 68              >            pla         ;load status
                       >            eor_flag 0
2803 : 0908            >            ora #decmode        ;ignore decimal mode bit
2805 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2807 : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
280a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
280c : ca                       dex
280d : 10de                     bpl tasl4
280f : a205                     ldx #5
2811 :                  tasl5
                                set_abs zps,$ff
                       >            load_flag $ff
2811 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2813 : 48              >            pha         ;use stack to load status
2814 : b513            >            lda zps,x    ;load to memory
2816 : 8d0302          >            sta abst
2819 : 28              >            plp
                        
281a : 0e0302                   asl abst
                                tst_abs rASL,fASL,$ff-fnzc
281d : 08              >            php         ;save flags
281e : ad0302          >            lda abst
2821 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
2824 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2826 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2827 : 0908            >            ora #decmode        ;ignore decimal mode bit
2829 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
282b : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
282e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2830 : ca                       dex
2831 : 10de                     bpl tasl5
                        
2833 : a205                     ldx #5
2835 :                  tlsr4
                                set_abs zps,0
                       >            load_flag 0
2835 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2837 : 48              >            pha         ;use stack to load status
2838 : b513            >            lda zps,x    ;load to memory
283a : 8d0302          >            sta abst
283d : 28              >            plp
                        
283e : 4e0302                   lsr abst
                                tst_abs rLSR,fLSR,0
2841 : 08              >            php         ;save flags
2842 : ad0302          >            lda abst
2845 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
2848 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
284a : 68              >            pla         ;load status
                       >            eor_flag 0
284b : 0908            >            ora #decmode        ;ignore decimal mode bit
284d : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
284f : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
2852 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2854 : ca                       dex
2855 : 10de                     bpl tlsr4
2857 : a205                     ldx #5
2859 :                  tlsr5
                                set_abs zps,$ff
                       >            load_flag $ff
2859 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
285b : 48              >            pha         ;use stack to load status
285c : b513            >            lda zps,x    ;load to memory
285e : 8d0302          >            sta abst
2861 : 28              >            plp
                        
2862 : 4e0302                   lsr abst
                                tst_abs rLSR,fLSR,$ff-fnzc
2865 : 08              >            php         ;save flags
2866 : ad0302          >            lda abst
2869 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
286c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
286e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
286f : 0908            >            ora #decmode        ;ignore decimal mode bit
2871 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2873 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
2876 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2878 : ca                       dex
2879 : 10de                     bpl tlsr5
                        
287b : a205                     ldx #5
287d :                  trol4
                                set_abs zps,0
                       >            load_flag 0
287d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
287f : 48              >            pha         ;use stack to load status
2880 : b513            >            lda zps,x    ;load to memory
2882 : 8d0302          >            sta abst
2885 : 28              >            plp
                        
2886 : 2e0302                   rol abst
                                tst_abs rROL,fROL,0
2889 : 08              >            php         ;save flags
288a : ad0302          >            lda abst
288d : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
2890 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2892 : 68              >            pla         ;load status
                       >            eor_flag 0
2893 : 0908            >            ora #decmode        ;ignore decimal mode bit
2895 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2897 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
289a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
289c : ca                       dex
289d : 10de                     bpl trol4
289f : a205                     ldx #5
28a1 :                  trol5
                                set_abs zps,$ff-fc
                       >            load_flag $ff-fc
28a1 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
28a3 : 48              >            pha         ;use stack to load status
28a4 : b513            >            lda zps,x    ;load to memory
28a6 : 8d0302          >            sta abst
28a9 : 28              >            plp
                        
28aa : 2e0302                   rol abst
                                tst_abs rROL,fROL,$ff-fnzc
28ad : 08              >            php         ;save flags
28ae : ad0302          >            lda abst
28b1 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
28b4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
28b6 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
28b7 : 0908            >            ora #decmode        ;ignore decimal mode bit
28b9 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
28bb : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
28be : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
28c0 : ca                       dex
28c1 : 10de                     bpl trol5
                        
28c3 : a205                     ldx #5
28c5 :                  trolc4
                                set_abs zps,fc
                       >            load_flag fc
28c5 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
28c7 : 48              >            pha         ;use stack to load status
28c8 : b513            >            lda zps,x    ;load to memory
28ca : 8d0302          >            sta abst
28cd : 28              >            plp
                        
28ce : 2e0302                   rol abst
                                tst_abs rROLc,fROLc,0
28d1 : 08              >            php         ;save flags
28d2 : ad0302          >            lda abst
28d5 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
28d8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
28da : 68              >            pla         ;load status
                       >            eor_flag 0
28db : 0908            >            ora #decmode        ;ignore decimal mode bit
28dd : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
28df : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
28e2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
28e4 : ca                       dex
28e5 : 10de                     bpl trolc4
28e7 : a205                     ldx #5
28e9 :                  trolc5
                                set_abs zps,$ff
                       >            load_flag $ff
28e9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
28eb : 48              >            pha         ;use stack to load status
28ec : b513            >            lda zps,x    ;load to memory
28ee : 8d0302          >            sta abst
28f1 : 28              >            plp
                        
28f2 : 2e0302                   rol abst
                                tst_abs rROLc,fROLc,$ff-fnzc
28f5 : 08              >            php         ;save flags
28f6 : ad0302          >            lda abst
28f9 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
28fc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
28fe : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
28ff : 0908            >            ora #decmode        ;ignore decimal mode bit
2901 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2903 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
2906 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2908 : ca                       dex
2909 : 10de                     bpl trolc5
                        
290b : a205                     ldx #5
290d :                  tror4
                                set_abs zps,0
                       >            load_flag 0
290d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
290f : 48              >            pha         ;use stack to load status
2910 : b513            >            lda zps,x    ;load to memory
2912 : 8d0302          >            sta abst
2915 : 28              >            plp
                        
2916 : 6e0302                   ror abst
                                tst_abs rROR,fROR,0
2919 : 08              >            php         ;save flags
291a : ad0302          >            lda abst
291d : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
2920 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2922 : 68              >            pla         ;load status
                       >            eor_flag 0
2923 : 0908            >            ora #decmode        ;ignore decimal mode bit
2925 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2927 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
292a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
292c : ca                       dex
292d : 10de                     bpl tror4
292f : a205                     ldx #5
2931 :                  tror5
                                set_abs zps,$ff-fc
                       >            load_flag $ff-fc
2931 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2933 : 48              >            pha         ;use stack to load status
2934 : b513            >            lda zps,x    ;load to memory
2936 : 8d0302          >            sta abst
2939 : 28              >            plp
                        
293a : 6e0302                   ror abst
                                tst_abs rROR,fROR,$ff-fnzc
293d : 08              >            php         ;save flags
293e : ad0302          >            lda abst
2941 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
2944 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2946 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2947 : 0908            >            ora #decmode        ;ignore decimal mode bit
2949 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
294b : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
294e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2950 : ca                       dex
2951 : 10de                     bpl tror5
                        
2953 : a205                     ldx #5
2955 :                  trorc4
                                set_abs zps,fc
                       >            load_flag fc
2955 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
2957 : 48              >            pha         ;use stack to load status
2958 : b513            >            lda zps,x    ;load to memory
295a : 8d0302          >            sta abst
295d : 28              >            plp
                        
295e : 6e0302                   ror abst
                                tst_abs rRORc,fRORc,0
2961 : 08              >            php         ;save flags
2962 : ad0302          >            lda abst
2965 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
2968 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
296a : 68              >            pla         ;load status
                       >            eor_flag 0
296b : 0908            >            ora #decmode        ;ignore decimal mode bit
296d : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
296f : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
2972 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2974 : ca                       dex
2975 : 10de                     bpl trorc4
2977 : a205                     ldx #5
2979 :                  trorc5
                                set_abs zps,$ff
                       >            load_flag $ff
2979 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
297b : 48              >            pha         ;use stack to load status
297c : b513            >            lda zps,x    ;load to memory
297e : 8d0302          >            sta abst
2981 : 28              >            plp
                        
2982 : 6e0302                   ror abst
                                tst_abs rRORc,fRORc,$ff-fnzc
2985 : 08              >            php         ;save flags
2986 : ad0302          >            lda abst
2989 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
298c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
298e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
298f : 0908            >            ora #decmode        ;ignore decimal mode bit
2991 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2993 : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
2996 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2998 : ca                       dex
2999 : 10de                     bpl trorc5
                                next_test
299b : ad0002          >            lda test_case   ;previous test
299e : c91f            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
29a0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0020 =                 >test_num = test_num + 1
29a2 : a920            >            lda #test_num   ;*** next tests' number
29a4 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; shifts - zp indexed
29a7 : a205                     ldx #5
29a9 :                  tasl6
                                set_zx zps,0
                       >            load_flag 0
29a9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
29ab : 48              >            pha         ;use stack to load status
29ac : b513            >            lda zps,x    ;load to indexed zeropage
29ae : 950c            >            sta zpt,x
29b0 : 28              >            plp
                        
29b1 : 160c                     asl zpt,x
                                tst_zx rASL,fASL,0
29b3 : 08              >            php         ;save flags
29b4 : b50c            >            lda zpt,x
29b6 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
29b9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
29bb : 68              >            pla         ;load status
                       >            eor_flag 0
29bc : 0908            >            ora #decmode        ;ignore decimal mode bit
29be : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
29c0 : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
29c3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
29c5 : ca                       dex
29c6 : 10e1                     bpl tasl6
29c8 : a205                     ldx #5
29ca :                  tasl7
                                set_zx zps,$ff
                       >            load_flag $ff
29ca : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
29cc : 48              >            pha         ;use stack to load status
29cd : b513            >            lda zps,x    ;load to indexed zeropage
29cf : 950c            >            sta zpt,x
29d1 : 28              >            plp
                        
29d2 : 160c                     asl zpt,x
                                tst_zx rASL,fASL,$ff-fnzc
29d4 : 08              >            php         ;save flags
29d5 : b50c            >            lda zpt,x
29d7 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
29da : d0fe            >        bne *           ;failed not equal (non zero)
                       >
29dc : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
29dd : 0908            >            ora #decmode        ;ignore decimal mode bit
29df : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
29e1 : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
29e4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
29e6 : ca                       dex
29e7 : 10e1                     bpl tasl7
                        
29e9 : a205                     ldx #5
29eb :                  tlsr6
                                set_zx zps,0
                       >            load_flag 0
29eb : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
29ed : 48              >            pha         ;use stack to load status
29ee : b513            >            lda zps,x    ;load to indexed zeropage
29f0 : 950c            >            sta zpt,x
29f2 : 28              >            plp
                        
29f3 : 560c                     lsr zpt,x
                                tst_zx rLSR,fLSR,0
29f5 : 08              >            php         ;save flags
29f6 : b50c            >            lda zpt,x
29f8 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
29fb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
29fd : 68              >            pla         ;load status
                       >            eor_flag 0
29fe : 0908            >            ora #decmode        ;ignore decimal mode bit
2a00 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2a02 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
2a05 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2a07 : ca                       dex
2a08 : 10e1                     bpl tlsr6
2a0a : a205                     ldx #5
2a0c :                  tlsr7
                                set_zx zps,$ff
                       >            load_flag $ff
2a0c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2a0e : 48              >            pha         ;use stack to load status
2a0f : b513            >            lda zps,x    ;load to indexed zeropage
2a11 : 950c            >            sta zpt,x
2a13 : 28              >            plp
                        
2a14 : 560c                     lsr zpt,x
                                tst_zx rLSR,fLSR,$ff-fnzc
2a16 : 08              >            php         ;save flags
2a17 : b50c            >            lda zpt,x
2a19 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
2a1c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2a1e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2a1f : 0908            >            ora #decmode        ;ignore decimal mode bit
2a21 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2a23 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
2a26 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2a28 : ca                       dex
2a29 : 10e1                     bpl tlsr7
                        
2a2b : a205                     ldx #5
2a2d :                  trol6
                                set_zx zps,0
                       >            load_flag 0
2a2d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2a2f : 48              >            pha         ;use stack to load status
2a30 : b513            >            lda zps,x    ;load to indexed zeropage
2a32 : 950c            >            sta zpt,x
2a34 : 28              >            plp
                        
2a35 : 360c                     rol zpt,x
                                tst_zx rROL,fROL,0
2a37 : 08              >            php         ;save flags
2a38 : b50c            >            lda zpt,x
2a3a : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
2a3d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2a3f : 68              >            pla         ;load status
                       >            eor_flag 0
2a40 : 0908            >            ora #decmode        ;ignore decimal mode bit
2a42 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2a44 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
2a47 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2a49 : ca                       dex
2a4a : 10e1                     bpl trol6
2a4c : a205                     ldx #5
2a4e :                  trol7
                                set_zx zps,$ff-fc
                       >            load_flag $ff-fc
2a4e : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2a50 : 48              >            pha         ;use stack to load status
2a51 : b513            >            lda zps,x    ;load to indexed zeropage
2a53 : 950c            >            sta zpt,x
2a55 : 28              >            plp
                        
2a56 : 360c                     rol zpt,x
                                tst_zx rROL,fROL,$ff-fnzc
2a58 : 08              >            php         ;save flags
2a59 : b50c            >            lda zpt,x
2a5b : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
2a5e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2a60 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2a61 : 0908            >            ora #decmode        ;ignore decimal mode bit
2a63 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2a65 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
2a68 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2a6a : ca                       dex
2a6b : 10e1                     bpl trol7
                        
2a6d : a205                     ldx #5
2a6f :                  trolc6
                                set_zx zps,fc
                       >            load_flag fc
2a6f : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
2a71 : 48              >            pha         ;use stack to load status
2a72 : b513            >            lda zps,x    ;load to indexed zeropage
2a74 : 950c            >            sta zpt,x
2a76 : 28              >            plp
                        
2a77 : 360c                     rol zpt,x
                                tst_zx rROLc,fROLc,0
2a79 : 08              >            php         ;save flags
2a7a : b50c            >            lda zpt,x
2a7c : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
2a7f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2a81 : 68              >            pla         ;load status
                       >            eor_flag 0
2a82 : 0908            >            ora #decmode        ;ignore decimal mode bit
2a84 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2a86 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
2a89 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2a8b : ca                       dex
2a8c : 10e1                     bpl trolc6
2a8e : a205                     ldx #5
2a90 :                  trolc7
                                set_zx zps,$ff
                       >            load_flag $ff
2a90 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2a92 : 48              >            pha         ;use stack to load status
2a93 : b513            >            lda zps,x    ;load to indexed zeropage
2a95 : 950c            >            sta zpt,x
2a97 : 28              >            plp
                        
2a98 : 360c                     rol zpt,x
                                tst_zx rROLc,fROLc,$ff-fnzc
2a9a : 08              >            php         ;save flags
2a9b : b50c            >            lda zpt,x
2a9d : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
2aa0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2aa2 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2aa3 : 0908            >            ora #decmode        ;ignore decimal mode bit
2aa5 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2aa7 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
2aaa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2aac : ca                       dex
2aad : 10e1                     bpl trolc7
                        
2aaf : a205                     ldx #5
2ab1 :                  tror6
                                set_zx zps,0
                       >            load_flag 0
2ab1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2ab3 : 48              >            pha         ;use stack to load status
2ab4 : b513            >            lda zps,x    ;load to indexed zeropage
2ab6 : 950c            >            sta zpt,x
2ab8 : 28              >            plp
                        
2ab9 : 760c                     ror zpt,x
                                tst_zx rROR,fROR,0
2abb : 08              >            php         ;save flags
2abc : b50c            >            lda zpt,x
2abe : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
2ac1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2ac3 : 68              >            pla         ;load status
                       >            eor_flag 0
2ac4 : 0908            >            ora #decmode        ;ignore decimal mode bit
2ac6 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2ac8 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
2acb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2acd : ca                       dex
2ace : 10e1                     bpl tror6
2ad0 : a205                     ldx #5
2ad2 :                  tror7
                                set_zx zps,$ff-fc
                       >            load_flag $ff-fc
2ad2 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2ad4 : 48              >            pha         ;use stack to load status
2ad5 : b513            >            lda zps,x    ;load to indexed zeropage
2ad7 : 950c            >            sta zpt,x
2ad9 : 28              >            plp
                        
2ada : 760c                     ror zpt,x
                                tst_zx rROR,fROR,$ff-fnzc
2adc : 08              >            php         ;save flags
2add : b50c            >            lda zpt,x
2adf : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
2ae2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2ae4 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2ae5 : 0908            >            ora #decmode        ;ignore decimal mode bit
2ae7 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2ae9 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
2aec : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2aee : ca                       dex
2aef : 10e1                     bpl tror7
                        
2af1 : a205                     ldx #5
2af3 :                  trorc6
                                set_zx zps,fc
                       >            load_flag fc
2af3 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
2af5 : 48              >            pha         ;use stack to load status
2af6 : b513            >            lda zps,x    ;load to indexed zeropage
2af8 : 950c            >            sta zpt,x
2afa : 28              >            plp
                        
2afb : 760c                     ror zpt,x
                                tst_zx rRORc,fRORc,0
2afd : 08              >            php         ;save flags
2afe : b50c            >            lda zpt,x
2b00 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
2b03 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2b05 : 68              >            pla         ;load status
                       >            eor_flag 0
2b06 : 0908            >            ora #decmode        ;ignore decimal mode bit
2b08 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2b0a : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
2b0d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2b0f : ca                       dex
2b10 : 10e1                     bpl trorc6
2b12 : a205                     ldx #5
2b14 :                  trorc7
                                set_zx zps,$ff
                       >            load_flag $ff
2b14 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2b16 : 48              >            pha         ;use stack to load status
2b17 : b513            >            lda zps,x    ;load to indexed zeropage
2b19 : 950c            >            sta zpt,x
2b1b : 28              >            plp
                        
2b1c : 760c                     ror zpt,x
                                tst_zx rRORc,fRORc,$ff-fnzc
2b1e : 08              >            php         ;save flags
2b1f : b50c            >            lda zpt,x
2b21 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
2b24 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2b26 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2b27 : 0908            >            ora #decmode        ;ignore decimal mode bit
2b29 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2b2b : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
2b2e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2b30 : ca                       dex
2b31 : 10e1                     bpl trorc7
                                next_test
2b33 : ad0002          >            lda test_case   ;previous test
2b36 : c920            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2b38 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0021 =                 >test_num = test_num + 1
2b3a : a921            >            lda #test_num   ;*** next tests' number
2b3c : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; shifts - abs indexed
2b3f : a205                     ldx #5
2b41 :                  tasl8
                                set_absx zps,0
                       >            load_flag 0
2b41 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2b43 : 48              >            pha         ;use stack to load status
2b44 : b513            >            lda zps,x    ;load to indexed memory
2b46 : 9d0302          >            sta abst,x
2b49 : 28              >            plp
                        
2b4a : 1e0302                   asl abst,x
                                tst_absx rASL,fASL,0
2b4d : 08              >            php         ;save flags
2b4e : bd0302          >            lda abst,x
2b51 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
2b54 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2b56 : 68              >            pla         ;load status
                       >            eor_flag 0
2b57 : 0908            >            ora #decmode        ;ignore decimal mode bit
2b59 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2b5b : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
2b5e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2b60 : ca                       dex
2b61 : 10de                     bpl tasl8
2b63 : a205                     ldx #5
2b65 :                  tasl9
                                set_absx zps,$ff
                       >            load_flag $ff
2b65 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2b67 : 48              >            pha         ;use stack to load status
2b68 : b513            >            lda zps,x    ;load to indexed memory
2b6a : 9d0302          >            sta abst,x
2b6d : 28              >            plp
                        
2b6e : 1e0302                   asl abst,x
                                tst_absx rASL,fASL,$ff-fnzc
2b71 : 08              >            php         ;save flags
2b72 : bd0302          >            lda abst,x
2b75 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
2b78 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2b7a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2b7b : 0908            >            ora #decmode        ;ignore decimal mode bit
2b7d : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2b7f : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
2b82 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2b84 : ca                       dex
2b85 : 10de                     bpl tasl9
                        
2b87 : a205                     ldx #5
2b89 :                  tlsr8
                                set_absx zps,0
                       >            load_flag 0
2b89 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2b8b : 48              >            pha         ;use stack to load status
2b8c : b513            >            lda zps,x    ;load to indexed memory
2b8e : 9d0302          >            sta abst,x
2b91 : 28              >            plp
                        
2b92 : 5e0302                   lsr abst,x
                                tst_absx rLSR,fLSR,0
2b95 : 08              >            php         ;save flags
2b96 : bd0302          >            lda abst,x
2b99 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
2b9c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2b9e : 68              >            pla         ;load status
                       >            eor_flag 0
2b9f : 0908            >            ora #decmode        ;ignore decimal mode bit
2ba1 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2ba3 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
2ba6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2ba8 : ca                       dex
2ba9 : 10de                     bpl tlsr8
2bab : a205                     ldx #5
2bad :                  tlsr9
                                set_absx zps,$ff
                       >            load_flag $ff
2bad : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2baf : 48              >            pha         ;use stack to load status
2bb0 : b513            >            lda zps,x    ;load to indexed memory
2bb2 : 9d0302          >            sta abst,x
2bb5 : 28              >            plp
                        
2bb6 : 5e0302                   lsr abst,x
                                tst_absx rLSR,fLSR,$ff-fnzc
2bb9 : 08              >            php         ;save flags
2bba : bd0302          >            lda abst,x
2bbd : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
2bc0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2bc2 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2bc3 : 0908            >            ora #decmode        ;ignore decimal mode bit
2bc5 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2bc7 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
2bca : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2bcc : ca                       dex
2bcd : 10de                     bpl tlsr9
                        
2bcf : a205                     ldx #5
2bd1 :                  trol8
                                set_absx zps,0
                       >            load_flag 0
2bd1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2bd3 : 48              >            pha         ;use stack to load status
2bd4 : b513            >            lda zps,x    ;load to indexed memory
2bd6 : 9d0302          >            sta abst,x
2bd9 : 28              >            plp
                        
2bda : 3e0302                   rol abst,x
                                tst_absx rROL,fROL,0
2bdd : 08              >            php         ;save flags
2bde : bd0302          >            lda abst,x
2be1 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
2be4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2be6 : 68              >            pla         ;load status
                       >            eor_flag 0
2be7 : 0908            >            ora #decmode        ;ignore decimal mode bit
2be9 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2beb : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
2bee : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2bf0 : ca                       dex
2bf1 : 10de                     bpl trol8
2bf3 : a205                     ldx #5
2bf5 :                  trol9
                                set_absx zps,$ff-fc
                       >            load_flag $ff-fc
2bf5 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2bf7 : 48              >            pha         ;use stack to load status
2bf8 : b513            >            lda zps,x    ;load to indexed memory
2bfa : 9d0302          >            sta abst,x
2bfd : 28              >            plp
                        
2bfe : 3e0302                   rol abst,x
                                tst_absx rROL,fROL,$ff-fnzc
2c01 : 08              >            php         ;save flags
2c02 : bd0302          >            lda abst,x
2c05 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
2c08 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2c0a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2c0b : 0908            >            ora #decmode        ;ignore decimal mode bit
2c0d : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2c0f : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
2c12 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2c14 : ca                       dex
2c15 : 10de                     bpl trol9
                        
2c17 : a205                     ldx #5
2c19 :                  trolc8
                                set_absx zps,fc
                       >            load_flag fc
2c19 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
2c1b : 48              >            pha         ;use stack to load status
2c1c : b513            >            lda zps,x    ;load to indexed memory
2c1e : 9d0302          >            sta abst,x
2c21 : 28              >            plp
                        
2c22 : 3e0302                   rol abst,x
                                tst_absx rROLc,fROLc,0
2c25 : 08              >            php         ;save flags
2c26 : bd0302          >            lda abst,x
2c29 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
2c2c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2c2e : 68              >            pla         ;load status
                       >            eor_flag 0
2c2f : 0908            >            ora #decmode        ;ignore decimal mode bit
2c31 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2c33 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
2c36 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2c38 : ca                       dex
2c39 : 10de                     bpl trolc8
2c3b : a205                     ldx #5
2c3d :                  trolc9
                                set_absx zps,$ff
                       >            load_flag $ff
2c3d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2c3f : 48              >            pha         ;use stack to load status
2c40 : b513            >            lda zps,x    ;load to indexed memory
2c42 : 9d0302          >            sta abst,x
2c45 : 28              >            plp
                        
2c46 : 3e0302                   rol abst,x
                                tst_absx rROLc,fROLc,$ff-fnzc
2c49 : 08              >            php         ;save flags
2c4a : bd0302          >            lda abst,x
2c4d : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
2c50 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2c52 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2c53 : 0908            >            ora #decmode        ;ignore decimal mode bit
2c55 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2c57 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
2c5a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2c5c : ca                       dex
2c5d : 10de                     bpl trolc9
                        
2c5f : a205                     ldx #5
2c61 :                  tror8
                                set_absx zps,0
                       >            load_flag 0
2c61 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2c63 : 48              >            pha         ;use stack to load status
2c64 : b513            >            lda zps,x    ;load to indexed memory
2c66 : 9d0302          >            sta abst,x
2c69 : 28              >            plp
                        
2c6a : 7e0302                   ror abst,x
                                tst_absx rROR,fROR,0
2c6d : 08              >            php         ;save flags
2c6e : bd0302          >            lda abst,x
2c71 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
2c74 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2c76 : 68              >            pla         ;load status
                       >            eor_flag 0
2c77 : 0908            >            ora #decmode        ;ignore decimal mode bit
2c79 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2c7b : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
2c7e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2c80 : ca                       dex
2c81 : 10de                     bpl tror8
2c83 : a205                     ldx #5
2c85 :                  tror9
                                set_absx zps,$ff-fc
                       >            load_flag $ff-fc
2c85 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2c87 : 48              >            pha         ;use stack to load status
2c88 : b513            >            lda zps,x    ;load to indexed memory
2c8a : 9d0302          >            sta abst,x
2c8d : 28              >            plp
                        
2c8e : 7e0302                   ror abst,x
                                tst_absx rROR,fROR,$ff-fnzc
2c91 : 08              >            php         ;save flags
2c92 : bd0302          >            lda abst,x
2c95 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
2c98 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2c9a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2c9b : 0908            >            ora #decmode        ;ignore decimal mode bit
2c9d : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2c9f : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
2ca2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2ca4 : ca                       dex
2ca5 : 10de                     bpl tror9
                        
2ca7 : a205                     ldx #5
2ca9 :                  trorc8
                                set_absx zps,fc
                       >            load_flag fc
2ca9 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
2cab : 48              >            pha         ;use stack to load status
2cac : b513            >            lda zps,x    ;load to indexed memory
2cae : 9d0302          >            sta abst,x
2cb1 : 28              >            plp
                        
2cb2 : 7e0302                   ror abst,x
                                tst_absx rRORc,fRORc,0
2cb5 : 08              >            php         ;save flags
2cb6 : bd0302          >            lda abst,x
2cb9 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
2cbc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2cbe : 68              >            pla         ;load status
                       >            eor_flag 0
2cbf : 0908            >            ora #decmode        ;ignore decimal mode bit
2cc1 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2cc3 : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
2cc6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2cc8 : ca                       dex
2cc9 : 10de                     bpl trorc8
2ccb : a205                     ldx #5
2ccd :                  trorc9
                                set_absx zps,$ff
                       >            load_flag $ff
2ccd : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2ccf : 48              >            pha         ;use stack to load status
2cd0 : b513            >            lda zps,x    ;load to indexed memory
2cd2 : 9d0302          >            sta abst,x
2cd5 : 28              >            plp
                        
2cd6 : 7e0302                   ror abst,x
                                tst_absx rRORc,fRORc,$ff-fnzc
2cd9 : 08              >            php         ;save flags
2cda : bd0302          >            lda abst,x
2cdd : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
2ce0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2ce2 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2ce3 : 0908            >            ora #decmode        ;ignore decimal mode bit
2ce5 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2ce7 : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
2cea : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2cec : ca                       dex
2ced : 10de                     bpl trorc9
                                next_test
2cef : ad0002          >            lda test_case   ;previous test
2cf2 : c921            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2cf4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0022 =                 >test_num = test_num + 1
2cf6 : a922            >            lda #test_num   ;*** next tests' number
2cf8 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing memory increment/decrement - INC DEC all addressing modes
                        ; zeropage
2cfb : a200                     ldx #0
2cfd : a97e                     lda #$7e
2cff : 850c                     sta zpt
2d01 :                  tinc    
                                set_stat 0
                       >            load_flag 0
2d01 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2d03 : 48              >            pha         ;use stack to load status
2d04 : 28              >            plp
                        
2d05 : e60c                     inc zpt
                                tst_z rINC,fINC,0
2d07 : 08              >            php         ;save flags
2d08 : a50c            >            lda zpt
2d0a : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
2d0d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2d0f : 68              >            pla         ;load status
                       >            eor_flag 0
2d10 : 0908            >            ora #decmode        ;ignore decimal mode bit
2d12 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2d14 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
2d17 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2d19 : e8                       inx
2d1a : e002                     cpx #2
2d1c : d004                     bne tinc1
2d1e : a9fe                     lda #$fe
2d20 : 850c                     sta zpt
2d22 : e005             tinc1   cpx #5
2d24 : d0db                     bne tinc
2d26 : ca                       dex
2d27 : e60c                     inc zpt
2d29 :                  tdec    
                                set_stat 0
                       >            load_flag 0
2d29 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2d2b : 48              >            pha         ;use stack to load status
2d2c : 28              >            plp
                        
2d2d : c60c                     dec zpt
                                tst_z rINC,fINC,0
2d2f : 08              >            php         ;save flags
2d30 : a50c            >            lda zpt
2d32 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
2d35 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2d37 : 68              >            pla         ;load status
                       >            eor_flag 0
2d38 : 0908            >            ora #decmode        ;ignore decimal mode bit
2d3a : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2d3c : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
2d3f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2d41 : ca                       dex
2d42 : 300a                     bmi tdec1
2d44 : e001                     cpx #1
2d46 : d0e1                     bne tdec
2d48 : a981                     lda #$81
2d4a : 850c                     sta zpt
2d4c : d0db                     bne tdec
2d4e :                  tdec1
2d4e : a200                     ldx #0
2d50 : a97e                     lda #$7e
2d52 : 850c                     sta zpt
2d54 :                  tinc10    
                                set_stat $ff
                       >            load_flag $ff
2d54 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2d56 : 48              >            pha         ;use stack to load status
2d57 : 28              >            plp
                        
2d58 : e60c                     inc zpt
                                tst_z rINC,fINC,$ff-fnz
2d5a : 08              >            php         ;save flags
2d5b : a50c            >            lda zpt
2d5d : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
2d60 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2d62 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
2d63 : 0908            >            ora #decmode        ;ignore decimal mode bit
2d65 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
2d67 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
2d6a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2d6c : e8                       inx
2d6d : e002                     cpx #2
2d6f : d004                     bne tinc11
2d71 : a9fe                     lda #$fe
2d73 : 850c                     sta zpt
2d75 : e005             tinc11  cpx #5
2d77 : d0db                     bne tinc10
2d79 : ca                       dex
2d7a : e60c                     inc zpt
2d7c :                  tdec10    
                                set_stat $ff
                       >            load_flag $ff
2d7c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2d7e : 48              >            pha         ;use stack to load status
2d7f : 28              >            plp
                        
2d80 : c60c                     dec zpt
                                tst_z rINC,fINC,$ff-fnz
2d82 : 08              >            php         ;save flags
2d83 : a50c            >            lda zpt
2d85 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
2d88 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2d8a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
2d8b : 0908            >            ora #decmode        ;ignore decimal mode bit
2d8d : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
2d8f : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
2d92 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2d94 : ca                       dex
2d95 : 300a                     bmi tdec11
2d97 : e001                     cpx #1
2d99 : d0e1                     bne tdec10
2d9b : a981                     lda #$81
2d9d : 850c                     sta zpt
2d9f : d0db                     bne tdec10
2da1 :                  tdec11
                                next_test
2da1 : ad0002          >            lda test_case   ;previous test
2da4 : c922            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2da6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0023 =                 >test_num = test_num + 1
2da8 : a923            >            lda #test_num   ;*** next tests' number
2daa : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; absolute memory
2dad : a200                     ldx #0
2daf : a97e                     lda #$7e
2db1 : 8d0302                   sta abst
2db4 :                  tinc2    
                                set_stat 0
                       >            load_flag 0
2db4 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2db6 : 48              >            pha         ;use stack to load status
2db7 : 28              >            plp
                        
2db8 : ee0302                   inc abst
                                tst_abs rINC,fINC,0
2dbb : 08              >            php         ;save flags
2dbc : ad0302          >            lda abst
2dbf : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
2dc2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2dc4 : 68              >            pla         ;load status
                       >            eor_flag 0
2dc5 : 0908            >            ora #decmode        ;ignore decimal mode bit
2dc7 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2dc9 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
2dcc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2dce : e8                       inx
2dcf : e002                     cpx #2
2dd1 : d005                     bne tinc3
2dd3 : a9fe                     lda #$fe
2dd5 : 8d0302                   sta abst
2dd8 : e005             tinc3   cpx #5
2dda : d0d8                     bne tinc2
2ddc : ca                       dex
2ddd : ee0302                   inc abst
2de0 :                  tdec2    
                                set_stat 0
                       >            load_flag 0
2de0 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2de2 : 48              >            pha         ;use stack to load status
2de3 : 28              >            plp
                        
2de4 : ce0302                   dec abst
                                tst_abs rINC,fINC,0
2de7 : 08              >            php         ;save flags
2de8 : ad0302          >            lda abst
2deb : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
2dee : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2df0 : 68              >            pla         ;load status
                       >            eor_flag 0
2df1 : 0908            >            ora #decmode        ;ignore decimal mode bit
2df3 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2df5 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
2df8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2dfa : ca                       dex
2dfb : 300b                     bmi tdec3
2dfd : e001                     cpx #1
2dff : d0df                     bne tdec2
2e01 : a981                     lda #$81
2e03 : 8d0302                   sta abst
2e06 : d0d8                     bne tdec2
2e08 :                  tdec3
2e08 : a200                     ldx #0
2e0a : a97e                     lda #$7e
2e0c : 8d0302                   sta abst
2e0f :                  tinc12    
                                set_stat $ff
                       >            load_flag $ff
2e0f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2e11 : 48              >            pha         ;use stack to load status
2e12 : 28              >            plp
                        
2e13 : ee0302                   inc abst
                                tst_abs rINC,fINC,$ff-fnz
2e16 : 08              >            php         ;save flags
2e17 : ad0302          >            lda abst
2e1a : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
2e1d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2e1f : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
2e20 : 0908            >            ora #decmode        ;ignore decimal mode bit
2e22 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
2e24 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
2e27 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2e29 : e8                       inx
2e2a : e002                     cpx #2
2e2c : d005                     bne tinc13
2e2e : a9fe                     lda #$fe
2e30 : 8d0302                   sta abst
2e33 : e005             tinc13   cpx #5
2e35 : d0d8                     bne tinc12
2e37 : ca                       dex
2e38 : ee0302                   inc abst
2e3b :                  tdec12    
                                set_stat $ff
                       >            load_flag $ff
2e3b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2e3d : 48              >            pha         ;use stack to load status
2e3e : 28              >            plp
                        
2e3f : ce0302                   dec abst
                                tst_abs rINC,fINC,$ff-fnz
2e42 : 08              >            php         ;save flags
2e43 : ad0302          >            lda abst
2e46 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
2e49 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2e4b : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
2e4c : 0908            >            ora #decmode        ;ignore decimal mode bit
2e4e : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
2e50 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
2e53 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2e55 : ca                       dex
2e56 : 300b                     bmi tdec13
2e58 : e001                     cpx #1
2e5a : d0df                     bne tdec12
2e5c : a981                     lda #$81
2e5e : 8d0302                   sta abst
2e61 : d0d8                     bne tdec12
2e63 :                  tdec13
                                next_test
2e63 : ad0002          >            lda test_case   ;previous test
2e66 : c923            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2e68 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0024 =                 >test_num = test_num + 1
2e6a : a924            >            lda #test_num   ;*** next tests' number
2e6c : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; zeropage indexed
2e6f : a200                     ldx #0
2e71 : a97e                     lda #$7e
2e73 : 950c             tinc4   sta zpt,x
                                set_stat 0
                       >            load_flag 0
2e75 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2e77 : 48              >            pha         ;use stack to load status
2e78 : 28              >            plp
                        
2e79 : f60c                     inc zpt,x
                                tst_zx rINC,fINC,0
2e7b : 08              >            php         ;save flags
2e7c : b50c            >            lda zpt,x
2e7e : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
2e81 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2e83 : 68              >            pla         ;load status
                       >            eor_flag 0
2e84 : 0908            >            ora #decmode        ;ignore decimal mode bit
2e86 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2e88 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
2e8b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2e8d : b50c                     lda zpt,x
2e8f : e8                       inx
2e90 : e002                     cpx #2
2e92 : d002                     bne tinc5
2e94 : a9fe                     lda #$fe
2e96 : e005             tinc5   cpx #5
2e98 : d0d9                     bne tinc4
2e9a : ca                       dex
2e9b : a902                     lda #2
2e9d : 950c             tdec4   sta zpt,x 
                                set_stat 0
                       >            load_flag 0
2e9f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2ea1 : 48              >            pha         ;use stack to load status
2ea2 : 28              >            plp
                        
2ea3 : d60c                     dec zpt,x
                                tst_zx rINC,fINC,0
2ea5 : 08              >            php         ;save flags
2ea6 : b50c            >            lda zpt,x
2ea8 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
2eab : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2ead : 68              >            pla         ;load status
                       >            eor_flag 0
2eae : 0908            >            ora #decmode        ;ignore decimal mode bit
2eb0 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2eb2 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
2eb5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2eb7 : b50c                     lda zpt,x
2eb9 : ca                       dex
2eba : 3008                     bmi tdec5
2ebc : e001                     cpx #1
2ebe : d0dd                     bne tdec4
2ec0 : a981                     lda #$81
2ec2 : d0d9                     bne tdec4
2ec4 :                  tdec5
2ec4 : a200                     ldx #0
2ec6 : a97e                     lda #$7e
2ec8 : 950c             tinc14  sta zpt,x
                                set_stat $ff
                       >            load_flag $ff
2eca : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2ecc : 48              >            pha         ;use stack to load status
2ecd : 28              >            plp
                        
2ece : f60c                     inc zpt,x
                                tst_zx rINC,fINC,$ff-fnz
2ed0 : 08              >            php         ;save flags
2ed1 : b50c            >            lda zpt,x
2ed3 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
2ed6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2ed8 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
2ed9 : 0908            >            ora #decmode        ;ignore decimal mode bit
2edb : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
2edd : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
2ee0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2ee2 : b50c                     lda zpt,x
2ee4 : e8                       inx
2ee5 : e002                     cpx #2
2ee7 : d002                     bne tinc15
2ee9 : a9fe                     lda #$fe
2eeb : e005             tinc15  cpx #5
2eed : d0d9                     bne tinc14
2eef : ca                       dex
2ef0 : a902                     lda #2
2ef2 : 950c             tdec14  sta zpt,x 
                                set_stat $ff
                       >            load_flag $ff
2ef4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2ef6 : 48              >            pha         ;use stack to load status
2ef7 : 28              >            plp
                        
2ef8 : d60c                     dec zpt,x
                                tst_zx rINC,fINC,$ff-fnz
2efa : 08              >            php         ;save flags
2efb : b50c            >            lda zpt,x
2efd : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
2f00 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2f02 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
2f03 : 0908            >            ora #decmode        ;ignore decimal mode bit
2f05 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
2f07 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
2f0a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2f0c : b50c                     lda zpt,x
2f0e : ca                       dex
2f0f : 3008                     bmi tdec15
2f11 : e001                     cpx #1
2f13 : d0dd                     bne tdec14
2f15 : a981                     lda #$81
2f17 : d0d9                     bne tdec14
2f19 :                  tdec15
                                next_test
2f19 : ad0002          >            lda test_case   ;previous test
2f1c : c924            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2f1e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0025 =                 >test_num = test_num + 1
2f20 : a925            >            lda #test_num   ;*** next tests' number
2f22 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; memory indexed
2f25 : a200                     ldx #0
2f27 : a97e                     lda #$7e
2f29 : 9d0302           tinc6   sta abst,x
                                set_stat 0
                       >            load_flag 0
2f2c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2f2e : 48              >            pha         ;use stack to load status
2f2f : 28              >            plp
                        
2f30 : fe0302                   inc abst,x
                                tst_absx rINC,fINC,0
2f33 : 08              >            php         ;save flags
2f34 : bd0302          >            lda abst,x
2f37 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
2f3a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2f3c : 68              >            pla         ;load status
                       >            eor_flag 0
2f3d : 0908            >            ora #decmode        ;ignore decimal mode bit
2f3f : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2f41 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
2f44 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2f46 : bd0302                   lda abst,x
2f49 : e8                       inx
2f4a : e002                     cpx #2
2f4c : d002                     bne tinc7
2f4e : a9fe                     lda #$fe
2f50 : e005             tinc7   cpx #5
2f52 : d0d5                     bne tinc6
2f54 : ca                       dex
2f55 : a902                     lda #2
2f57 : 9d0302           tdec6   sta abst,x 
                                set_stat 0
                       >            load_flag 0
2f5a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2f5c : 48              >            pha         ;use stack to load status
2f5d : 28              >            plp
                        
2f5e : de0302                   dec abst,x
                                tst_absx rINC,fINC,0
2f61 : 08              >            php         ;save flags
2f62 : bd0302          >            lda abst,x
2f65 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
2f68 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2f6a : 68              >            pla         ;load status
                       >            eor_flag 0
2f6b : 0908            >            ora #decmode        ;ignore decimal mode bit
2f6d : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2f6f : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
2f72 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2f74 : bd0302                   lda abst,x
2f77 : ca                       dex
2f78 : 3008                     bmi tdec7
2f7a : e001                     cpx #1
2f7c : d0d9                     bne tdec6
2f7e : a981                     lda #$81
2f80 : d0d5                     bne tdec6
2f82 :                  tdec7
2f82 : a200                     ldx #0
2f84 : a97e                     lda #$7e
2f86 : 9d0302           tinc16  sta abst,x
                                set_stat $ff
                       >            load_flag $ff
2f89 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2f8b : 48              >            pha         ;use stack to load status
2f8c : 28              >            plp
                        
2f8d : fe0302                   inc abst,x
                                tst_absx rINC,fINC,$ff-fnz
2f90 : 08              >            php         ;save flags
2f91 : bd0302          >            lda abst,x
2f94 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
2f97 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2f99 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
2f9a : 0908            >            ora #decmode        ;ignore decimal mode bit
2f9c : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
2f9e : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
2fa1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2fa3 : bd0302                   lda abst,x
2fa6 : e8                       inx
2fa7 : e002                     cpx #2
2fa9 : d002                     bne tinc17
2fab : a9fe                     lda #$fe
2fad : e005             tinc17  cpx #5
2faf : d0d5                     bne tinc16
2fb1 : ca                       dex
2fb2 : a902                     lda #2
2fb4 : 9d0302           tdec16  sta abst,x 
                                set_stat $ff
                       >            load_flag $ff
2fb7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2fb9 : 48              >            pha         ;use stack to load status
2fba : 28              >            plp
                        
2fbb : de0302                   dec abst,x
                                tst_absx rINC,fINC,$ff-fnz
2fbe : 08              >            php         ;save flags
2fbf : bd0302          >            lda abst,x
2fc2 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
2fc5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2fc7 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
2fc8 : 0908            >            ora #decmode        ;ignore decimal mode bit
2fca : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
2fcc : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
2fcf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2fd1 : bd0302                   lda abst,x
2fd4 : ca                       dex
2fd5 : 3008                     bmi tdec17
2fd7 : e001                     cpx #1
2fd9 : d0d9                     bne tdec16
2fdb : a981                     lda #$81
2fdd : d0d5                     bne tdec16
2fdf :                  tdec17
                                next_test
2fdf : ad0002          >            lda test_case   ;previous test
2fe2 : c925            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2fe4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0026 =                 >test_num = test_num + 1
2fe6 : a926            >            lda #test_num   ;*** next tests' number
2fe8 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing logical instructions - AND EOR ORA all addressing modes
                        ; AND
2feb : a203                     ldx #3          ;immediate
2fed : b51e             tand    lda zpAN,x
2fef : 8d0a02                   sta ex_andi+1   ;set AND # operand
                                set_ax  absANa,0
                       >            load_flag 0
2ff2 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2ff4 : 48              >            pha         ;use stack to load status
2ff5 : bd6b02          >            lda absANa,x    ;precharge accu
2ff8 : 28              >            plp
                        
2ff9 : 200902                   jsr ex_andi     ;execute AND # in RAM
                                tst_ax  absrlo,absflo,0
2ffc : 08              >            php         ;save flags
2ffd : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3000 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3002 : 68              >            pla         ;load status
                       >            eor_flag 0
3003 : 0908            >            ora #decmode        ;ignore decimal mode bit
3005 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
3007 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
300a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
300c : ca                       dex
300d : 10de                     bpl tand
300f : a203                     ldx #3
3011 : b51e             tand1   lda zpAN,x
3013 : 8d0a02                   sta ex_andi+1   ;set AND # operand
                                set_ax  absANa,$ff
                       >            load_flag $ff
3016 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3018 : 48              >            pha         ;use stack to load status
3019 : bd6b02          >            lda absANa,x    ;precharge accu
301c : 28              >            plp
                        
301d : 200902                   jsr ex_andi     ;execute AND # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
3020 : 08              >            php         ;save flags
3021 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3024 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3026 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3027 : 0908            >            ora #decmode        ;ignore decimal mode bit
3029 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
302b : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
302e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3030 : ca                       dex
3031 : 10de                     bpl tand1
                            
3033 : a203                     ldx #3      ;zp
3035 : b51e             tand2   lda zpAN,x
3037 : 850c                     sta zpt
                                set_ax  absANa,0
                       >            load_flag 0
3039 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
303b : 48              >            pha         ;use stack to load status
303c : bd6b02          >            lda absANa,x    ;precharge accu
303f : 28              >            plp
                        
3040 : 250c                     and zpt
                                tst_ax  absrlo,absflo,0
3042 : 08              >            php         ;save flags
3043 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3046 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3048 : 68              >            pla         ;load status
                       >            eor_flag 0
3049 : 0908            >            ora #decmode        ;ignore decimal mode bit
304b : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
304d : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3050 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3052 : ca                       dex
3053 : 10e0                     bpl tand2
3055 : a203                     ldx #3
3057 : b51e             tand3   lda zpAN,x
3059 : 850c                     sta zpt
                                set_ax  absANa,$ff
                       >            load_flag $ff
305b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
305d : 48              >            pha         ;use stack to load status
305e : bd6b02          >            lda absANa,x    ;precharge accu
3061 : 28              >            plp
                        
3062 : 250c                     and zpt
                                tst_ax  absrlo,absflo,$ff-fnz
3064 : 08              >            php         ;save flags
3065 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3068 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
306a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
306b : 0908            >            ora #decmode        ;ignore decimal mode bit
306d : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
306f : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3072 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3074 : ca                       dex
3075 : 10e0                     bpl tand3
                        
3077 : a203                     ldx #3      ;abs
3079 : b51e             tand4   lda zpAN,x
307b : 8d0302                   sta abst
                                set_ax  absANa,0
                       >            load_flag 0
307e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3080 : 48              >            pha         ;use stack to load status
3081 : bd6b02          >            lda absANa,x    ;precharge accu
3084 : 28              >            plp
                        
3085 : 2d0302                   and abst
                                tst_ax  absrlo,absflo,0
3088 : 08              >            php         ;save flags
3089 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
308c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
308e : 68              >            pla         ;load status
                       >            eor_flag 0
308f : 0908            >            ora #decmode        ;ignore decimal mode bit
3091 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
3093 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3096 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3098 : ca                       dex
3099 : 10de                     bpl tand4
309b : a203                     ldx #3
309d : b51e             tand5   lda zpAN,x
309f : 8d0302                   sta abst
                                set_ax  absANa,$ff
                       >            load_flag $ff
30a2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
30a4 : 48              >            pha         ;use stack to load status
30a5 : bd6b02          >            lda absANa,x    ;precharge accu
30a8 : 28              >            plp
                        
30a9 : 2d0302                   and abst
                                tst_ax  absrlo,absflo,$ff-fnz
30ac : 08              >            php         ;save flags
30ad : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
30b0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
30b2 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
30b3 : 0908            >            ora #decmode        ;ignore decimal mode bit
30b5 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
30b7 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
30ba : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
30bc : ca                       dex
30bd : 1002                     bpl tand6
                        
30bf : a203                     ldx #3      ;zp,x
30c1 :                  tand6
                                set_ax  absANa,0
                       >            load_flag 0
30c1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
30c3 : 48              >            pha         ;use stack to load status
30c4 : bd6b02          >            lda absANa,x    ;precharge accu
30c7 : 28              >            plp
                        
30c8 : 351e                     and zpAN,x
                                tst_ax  absrlo,absflo,0
30ca : 08              >            php         ;save flags
30cb : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
30ce : d0fe            >        bne *           ;failed not equal (non zero)
                       >
30d0 : 68              >            pla         ;load status
                       >            eor_flag 0
30d1 : 0908            >            ora #decmode        ;ignore decimal mode bit
30d3 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
30d5 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
30d8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
30da : ca                       dex
30db : 10e4                     bpl tand6
30dd : a203                     ldx #3
30df :                  tand7
                                set_ax  absANa,$ff
                       >            load_flag $ff
30df : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
30e1 : 48              >            pha         ;use stack to load status
30e2 : bd6b02          >            lda absANa,x    ;precharge accu
30e5 : 28              >            plp
                        
30e6 : 351e                     and zpAN,x
                                tst_ax  absrlo,absflo,$ff-fnz
30e8 : 08              >            php         ;save flags
30e9 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
30ec : d0fe            >        bne *           ;failed not equal (non zero)
                       >
30ee : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
30ef : 0908            >            ora #decmode        ;ignore decimal mode bit
30f1 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
30f3 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
30f6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
30f8 : ca                       dex
30f9 : 10e4                     bpl tand7
                        
30fb : a203                     ldx #3      ;abs,x
30fd :                  tand8
                                set_ax  absANa,0
                       >            load_flag 0
30fd : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
30ff : 48              >            pha         ;use stack to load status
3100 : bd6b02          >            lda absANa,x    ;precharge accu
3103 : 28              >            plp
                        
3104 : 3d5f02                   and absAN,x
                                tst_ax  absrlo,absflo,0
3107 : 08              >            php         ;save flags
3108 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
310b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
310d : 68              >            pla         ;load status
                       >            eor_flag 0
310e : 0908            >            ora #decmode        ;ignore decimal mode bit
3110 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
3112 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3115 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3117 : ca                       dex
3118 : 10e3                     bpl tand8
311a : a203                     ldx #3
311c :                  tand9
                                set_ax  absANa,$ff
                       >            load_flag $ff
311c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
311e : 48              >            pha         ;use stack to load status
311f : bd6b02          >            lda absANa,x    ;precharge accu
3122 : 28              >            plp
                        
3123 : 3d5f02                   and absAN,x
                                tst_ax  absrlo,absflo,$ff-fnz
3126 : 08              >            php         ;save flags
3127 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
312a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
312c : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
312d : 0908            >            ora #decmode        ;ignore decimal mode bit
312f : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
3131 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3134 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3136 : ca                       dex
3137 : 10e3                     bpl tand9
                        
3139 : a003                     ldy #3      ;abs,y
313b :                  tand10
                                set_ay  absANa,0
                       >            load_flag 0
313b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
313d : 48              >            pha         ;use stack to load status
313e : b96b02          >            lda absANa,y    ;precharge accu
3141 : 28              >            plp
                        
3142 : 395f02                   and absAN,y
                                tst_ay  absrlo,absflo,0
3145 : 08              >            php         ;save flags
3146 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3149 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
314b : 68              >            pla         ;load status
                       >            eor_flag 0
314c : 0908            >            ora #decmode        ;ignore decimal mode bit
314e : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
3150 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
3153 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3155 : 88                       dey
3156 : 10e3                     bpl tand10
3158 : a003                     ldy #3
315a :                  tand11
                                set_ay  absANa,$ff
                       >            load_flag $ff
315a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
315c : 48              >            pha         ;use stack to load status
315d : b96b02          >            lda absANa,y    ;precharge accu
3160 : 28              >            plp
                        
3161 : 395f02                   and absAN,y
                                tst_ay  absrlo,absflo,$ff-fnz
3164 : 08              >            php         ;save flags
3165 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3168 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
316a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
316b : 0908            >            ora #decmode        ;ignore decimal mode bit
316d : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
316f : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
3172 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3174 : 88                       dey
3175 : 10e3                     bpl tand11
                        
3177 : a206                     ldx #6      ;(zp,x)
3179 : a003                     ldy #3
317b :                  tand12
                                set_ay  absANa,0
                       >            load_flag 0
317b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
317d : 48              >            pha         ;use stack to load status
317e : b96b02          >            lda absANa,y    ;precharge accu
3181 : 28              >            plp
                        
3182 : 213c                     and (indAN,x)
                                tst_ay  absrlo,absflo,0
3184 : 08              >            php         ;save flags
3185 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3188 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
318a : 68              >            pla         ;load status
                       >            eor_flag 0
318b : 0908            >            ora #decmode        ;ignore decimal mode bit
318d : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
318f : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
3192 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3194 : ca                       dex
3195 : ca                       dex
3196 : 88                       dey
3197 : 10e2                     bpl tand12
3199 : a206                     ldx #6
319b : a003                     ldy #3
319d :                  tand13
                                set_ay  absANa,$ff
                       >            load_flag $ff
319d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
319f : 48              >            pha         ;use stack to load status
31a0 : b96b02          >            lda absANa,y    ;precharge accu
31a3 : 28              >            plp
                        
31a4 : 213c                     and (indAN,x)
                                tst_ay  absrlo,absflo,$ff-fnz
31a6 : 08              >            php         ;save flags
31a7 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
31aa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
31ac : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
31ad : 0908            >            ora #decmode        ;ignore decimal mode bit
31af : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
31b1 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
31b4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
31b6 : ca                       dex
31b7 : ca                       dex
31b8 : 88                       dey
31b9 : 10e2                     bpl tand13
                        
31bb : a003                     ldy #3      ;(zp),y
31bd :                  tand14
                                set_ay  absANa,0
                       >            load_flag 0
31bd : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
31bf : 48              >            pha         ;use stack to load status
31c0 : b96b02          >            lda absANa,y    ;precharge accu
31c3 : 28              >            plp
                        
31c4 : 313c                     and (indAN),y
                                tst_ay  absrlo,absflo,0
31c6 : 08              >            php         ;save flags
31c7 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
31ca : d0fe            >        bne *           ;failed not equal (non zero)
                       >
31cc : 68              >            pla         ;load status
                       >            eor_flag 0
31cd : 0908            >            ora #decmode        ;ignore decimal mode bit
31cf : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
31d1 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
31d4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
31d6 : 88                       dey
31d7 : 10e4                     bpl tand14
31d9 : a003                     ldy #3
31db :                  tand15
                                set_ay  absANa,$ff
                       >            load_flag $ff
31db : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
31dd : 48              >            pha         ;use stack to load status
31de : b96b02          >            lda absANa,y    ;precharge accu
31e1 : 28              >            plp
                        
31e2 : 313c                     and (indAN),y
                                tst_ay  absrlo,absflo,$ff-fnz
31e4 : 08              >            php         ;save flags
31e5 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
31e8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
31ea : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
31eb : 0908            >            ora #decmode        ;ignore decimal mode bit
31ed : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
31ef : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
31f2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
31f4 : 88                       dey
31f5 : 10e4                     bpl tand15
                                next_test
31f7 : ad0002          >            lda test_case   ;previous test
31fa : c926            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
31fc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0027 =                 >test_num = test_num + 1
31fe : a927            >            lda #test_num   ;*** next tests' number
3200 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; EOR
3203 : a203                     ldx #3          ;immediate - self modifying code
3205 : b522             teor    lda zpEO,x
3207 : 8d0d02                   sta ex_eori+1   ;set EOR # operand
                                set_ax  absEOa,0
                       >            load_flag 0
320a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
320c : 48              >            pha         ;use stack to load status
320d : bd6f02          >            lda absEOa,x    ;precharge accu
3210 : 28              >            plp
                        
3211 : 200c02                   jsr ex_eori     ;execute EOR # in RAM
                                tst_ax  absrlo,absflo,0
3214 : 08              >            php         ;save flags
3215 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3218 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
321a : 68              >            pla         ;load status
                       >            eor_flag 0
321b : 0908            >            ora #decmode        ;ignore decimal mode bit
321d : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
321f : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3222 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3224 : ca                       dex
3225 : 10de                     bpl teor
3227 : a203                     ldx #3
3229 : b522             teor1   lda zpEO,x
322b : 8d0d02                   sta ex_eori+1   ;set EOR # operand
                                set_ax  absEOa,$ff
                       >            load_flag $ff
322e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3230 : 48              >            pha         ;use stack to load status
3231 : bd6f02          >            lda absEOa,x    ;precharge accu
3234 : 28              >            plp
                        
3235 : 200c02                   jsr ex_eori     ;execute EOR # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
3238 : 08              >            php         ;save flags
3239 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
323c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
323e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
323f : 0908            >            ora #decmode        ;ignore decimal mode bit
3241 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
3243 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3246 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3248 : ca                       dex
3249 : 10de                     bpl teor1
                            
324b : a203                     ldx #3      ;zp
324d : b522             teor2    lda zpEO,x
324f : 850c                     sta zpt
                                set_ax  absEOa,0
                       >            load_flag 0
3251 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3253 : 48              >            pha         ;use stack to load status
3254 : bd6f02          >            lda absEOa,x    ;precharge accu
3257 : 28              >            plp
                        
3258 : 450c                     eor zpt
                                tst_ax  absrlo,absflo,0
325a : 08              >            php         ;save flags
325b : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
325e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3260 : 68              >            pla         ;load status
                       >            eor_flag 0
3261 : 0908            >            ora #decmode        ;ignore decimal mode bit
3263 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
3265 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3268 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
326a : ca                       dex
326b : 10e0                     bpl teor2
326d : a203                     ldx #3
326f : b522             teor3   lda zpEO,x
3271 : 850c                     sta zpt
                                set_ax  absEOa,$ff
                       >            load_flag $ff
3273 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3275 : 48              >            pha         ;use stack to load status
3276 : bd6f02          >            lda absEOa,x    ;precharge accu
3279 : 28              >            plp
                        
327a : 450c                     eor zpt
                                tst_ax  absrlo,absflo,$ff-fnz
327c : 08              >            php         ;save flags
327d : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3280 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3282 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3283 : 0908            >            ora #decmode        ;ignore decimal mode bit
3285 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
3287 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
328a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
328c : ca                       dex
328d : 10e0                     bpl teor3
                        
328f : a203                     ldx #3      ;abs
3291 : b522             teor4   lda zpEO,x
3293 : 8d0302                   sta abst
                                set_ax  absEOa,0
                       >            load_flag 0
3296 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3298 : 48              >            pha         ;use stack to load status
3299 : bd6f02          >            lda absEOa,x    ;precharge accu
329c : 28              >            plp
                        
329d : 4d0302                   eor abst
                                tst_ax  absrlo,absflo,0
32a0 : 08              >            php         ;save flags
32a1 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
32a4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
32a6 : 68              >            pla         ;load status
                       >            eor_flag 0
32a7 : 0908            >            ora #decmode        ;ignore decimal mode bit
32a9 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
32ab : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
32ae : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
32b0 : ca                       dex
32b1 : 10de                     bpl teor4
32b3 : a203                     ldx #3
32b5 : b522             teor5   lda zpEO,x
32b7 : 8d0302                   sta abst
                                set_ax  absEOa,$ff
                       >            load_flag $ff
32ba : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
32bc : 48              >            pha         ;use stack to load status
32bd : bd6f02          >            lda absEOa,x    ;precharge accu
32c0 : 28              >            plp
                        
32c1 : 4d0302                   eor abst
                                tst_ax  absrlo,absflo,$ff-fnz
32c4 : 08              >            php         ;save flags
32c5 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
32c8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
32ca : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
32cb : 0908            >            ora #decmode        ;ignore decimal mode bit
32cd : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
32cf : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
32d2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
32d4 : ca                       dex
32d5 : 1002                     bpl teor6
                        
32d7 : a203                     ldx #3      ;zp,x
32d9 :                  teor6
                                set_ax  absEOa,0
                       >            load_flag 0
32d9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
32db : 48              >            pha         ;use stack to load status
32dc : bd6f02          >            lda absEOa,x    ;precharge accu
32df : 28              >            plp
                        
32e0 : 5522                     eor zpEO,x
                                tst_ax  absrlo,absflo,0
32e2 : 08              >            php         ;save flags
32e3 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
32e6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
32e8 : 68              >            pla         ;load status
                       >            eor_flag 0
32e9 : 0908            >            ora #decmode        ;ignore decimal mode bit
32eb : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
32ed : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
32f0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
32f2 : ca                       dex
32f3 : 10e4                     bpl teor6
32f5 : a203                     ldx #3
32f7 :                  teor7
                                set_ax  absEOa,$ff
                       >            load_flag $ff
32f7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
32f9 : 48              >            pha         ;use stack to load status
32fa : bd6f02          >            lda absEOa,x    ;precharge accu
32fd : 28              >            plp
                        
32fe : 5522                     eor zpEO,x
                                tst_ax  absrlo,absflo,$ff-fnz
3300 : 08              >            php         ;save flags
3301 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3304 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3306 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3307 : 0908            >            ora #decmode        ;ignore decimal mode bit
3309 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
330b : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
330e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3310 : ca                       dex
3311 : 10e4                     bpl teor7
                        
3313 : a203                     ldx #3      ;abs,x
3315 :                  teor8
                                set_ax  absEOa,0
                       >            load_flag 0
3315 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3317 : 48              >            pha         ;use stack to load status
3318 : bd6f02          >            lda absEOa,x    ;precharge accu
331b : 28              >            plp
                        
331c : 5d6302                   eor absEO,x
                                tst_ax  absrlo,absflo,0
331f : 08              >            php         ;save flags
3320 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3323 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3325 : 68              >            pla         ;load status
                       >            eor_flag 0
3326 : 0908            >            ora #decmode        ;ignore decimal mode bit
3328 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
332a : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
332d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
332f : ca                       dex
3330 : 10e3                     bpl teor8
3332 : a203                     ldx #3
3334 :                  teor9
                                set_ax  absEOa,$ff
                       >            load_flag $ff
3334 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3336 : 48              >            pha         ;use stack to load status
3337 : bd6f02          >            lda absEOa,x    ;precharge accu
333a : 28              >            plp
                        
333b : 5d6302                   eor absEO,x
                                tst_ax  absrlo,absflo,$ff-fnz
333e : 08              >            php         ;save flags
333f : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3342 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3344 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3345 : 0908            >            ora #decmode        ;ignore decimal mode bit
3347 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
3349 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
334c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
334e : ca                       dex
334f : 10e3                     bpl teor9
                        
3351 : a003                     ldy #3      ;abs,y
3353 :                  teor10
                                set_ay  absEOa,0
                       >            load_flag 0
3353 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3355 : 48              >            pha         ;use stack to load status
3356 : b96f02          >            lda absEOa,y    ;precharge accu
3359 : 28              >            plp
                        
335a : 596302                   eor absEO,y
                                tst_ay  absrlo,absflo,0
335d : 08              >            php         ;save flags
335e : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3361 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3363 : 68              >            pla         ;load status
                       >            eor_flag 0
3364 : 0908            >            ora #decmode        ;ignore decimal mode bit
3366 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
3368 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
336b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
336d : 88                       dey
336e : 10e3                     bpl teor10
3370 : a003                     ldy #3
3372 :                  teor11
                                set_ay  absEOa,$ff
                       >            load_flag $ff
3372 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3374 : 48              >            pha         ;use stack to load status
3375 : b96f02          >            lda absEOa,y    ;precharge accu
3378 : 28              >            plp
                        
3379 : 596302                   eor absEO,y
                                tst_ay  absrlo,absflo,$ff-fnz
337c : 08              >            php         ;save flags
337d : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3380 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3382 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3383 : 0908            >            ora #decmode        ;ignore decimal mode bit
3385 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
3387 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
338a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
338c : 88                       dey
338d : 10e3                     bpl teor11
                        
338f : a206                     ldx #6      ;(zp,x)
3391 : a003                     ldy #3
3393 :                  teor12
                                set_ay  absEOa,0
                       >            load_flag 0
3393 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3395 : 48              >            pha         ;use stack to load status
3396 : b96f02          >            lda absEOa,y    ;precharge accu
3399 : 28              >            plp
                        
339a : 4144                     eor (indEO,x)
                                tst_ay  absrlo,absflo,0
339c : 08              >            php         ;save flags
339d : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
33a0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
33a2 : 68              >            pla         ;load status
                       >            eor_flag 0
33a3 : 0908            >            ora #decmode        ;ignore decimal mode bit
33a5 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
33a7 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
33aa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
33ac : ca                       dex
33ad : ca                       dex
33ae : 88                       dey
33af : 10e2                     bpl teor12
33b1 : a206                     ldx #6
33b3 : a003                     ldy #3
33b5 :                  teor13
                                set_ay  absEOa,$ff
                       >            load_flag $ff
33b5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
33b7 : 48              >            pha         ;use stack to load status
33b8 : b96f02          >            lda absEOa,y    ;precharge accu
33bb : 28              >            plp
                        
33bc : 4144                     eor (indEO,x)
                                tst_ay  absrlo,absflo,$ff-fnz
33be : 08              >            php         ;save flags
33bf : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
33c2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
33c4 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
33c5 : 0908            >            ora #decmode        ;ignore decimal mode bit
33c7 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
33c9 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
33cc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
33ce : ca                       dex
33cf : ca                       dex
33d0 : 88                       dey
33d1 : 10e2                     bpl teor13
                        
33d3 : a003                     ldy #3      ;(zp),y
33d5 :                  teor14
                                set_ay  absEOa,0
                       >            load_flag 0
33d5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
33d7 : 48              >            pha         ;use stack to load status
33d8 : b96f02          >            lda absEOa,y    ;precharge accu
33db : 28              >            plp
                        
33dc : 5144                     eor (indEO),y
                                tst_ay  absrlo,absflo,0
33de : 08              >            php         ;save flags
33df : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
33e2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
33e4 : 68              >            pla         ;load status
                       >            eor_flag 0
33e5 : 0908            >            ora #decmode        ;ignore decimal mode bit
33e7 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
33e9 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
33ec : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
33ee : 88                       dey
33ef : 10e4                     bpl teor14
33f1 : a003                     ldy #3
33f3 :                  teor15
                                set_ay  absEOa,$ff
                       >            load_flag $ff
33f3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
33f5 : 48              >            pha         ;use stack to load status
33f6 : b96f02          >            lda absEOa,y    ;precharge accu
33f9 : 28              >            plp
                        
33fa : 5144                     eor (indEO),y
                                tst_ay  absrlo,absflo,$ff-fnz
33fc : 08              >            php         ;save flags
33fd : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3400 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3402 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3403 : 0908            >            ora #decmode        ;ignore decimal mode bit
3405 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
3407 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
340a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
340c : 88                       dey
340d : 10e4                     bpl teor15
                                next_test
340f : ad0002          >            lda test_case   ;previous test
3412 : c927            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
3414 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0028 =                 >test_num = test_num + 1
3416 : a928            >            lda #test_num   ;*** next tests' number
3418 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; OR
341b : a203                     ldx #3          ;immediate - self modifying code
341d : b51a             tora    lda zpOR,x
341f : 8d1002                   sta ex_orai+1   ;set ORA # operand
                                set_ax  absORa,0
                       >            load_flag 0
3422 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3424 : 48              >            pha         ;use stack to load status
3425 : bd6702          >            lda absORa,x    ;precharge accu
3428 : 28              >            plp
                        
3429 : 200f02                   jsr ex_orai     ;execute ORA # in RAM
                                tst_ax  absrlo,absflo,0
342c : 08              >            php         ;save flags
342d : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3430 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3432 : 68              >            pla         ;load status
                       >            eor_flag 0
3433 : 0908            >            ora #decmode        ;ignore decimal mode bit
3435 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
3437 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
343a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
343c : ca                       dex
343d : 10de                     bpl tora
343f : a203                     ldx #3
3441 : b51a             tora1   lda zpOR,x
3443 : 8d1002                   sta ex_orai+1   ;set ORA # operand
                                set_ax  absORa,$ff
                       >            load_flag $ff
3446 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3448 : 48              >            pha         ;use stack to load status
3449 : bd6702          >            lda absORa,x    ;precharge accu
344c : 28              >            plp
                        
344d : 200f02                   jsr ex_orai     ;execute ORA # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
3450 : 08              >            php         ;save flags
3451 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3454 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3456 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3457 : 0908            >            ora #decmode        ;ignore decimal mode bit
3459 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
345b : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
345e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3460 : ca                       dex
3461 : 10de                     bpl tora1
                            
3463 : a203                     ldx #3      ;zp
3465 : b51a             tora2   lda zpOR,x
3467 : 850c                     sta zpt
                                set_ax  absORa,0
                       >            load_flag 0
3469 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
346b : 48              >            pha         ;use stack to load status
346c : bd6702          >            lda absORa,x    ;precharge accu
346f : 28              >            plp
                        
3470 : 050c                     ora zpt
                                tst_ax  absrlo,absflo,0
3472 : 08              >            php         ;save flags
3473 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3476 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3478 : 68              >            pla         ;load status
                       >            eor_flag 0
3479 : 0908            >            ora #decmode        ;ignore decimal mode bit
347b : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
347d : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3480 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3482 : ca                       dex
3483 : 10e0                     bpl tora2
3485 : a203                     ldx #3
3487 : b51a             tora3   lda zpOR,x
3489 : 850c                     sta zpt
                                set_ax  absORa,$ff
                       >            load_flag $ff
348b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
348d : 48              >            pha         ;use stack to load status
348e : bd6702          >            lda absORa,x    ;precharge accu
3491 : 28              >            plp
                        
3492 : 050c                     ora zpt
                                tst_ax  absrlo,absflo,$ff-fnz
3494 : 08              >            php         ;save flags
3495 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3498 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
349a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
349b : 0908            >            ora #decmode        ;ignore decimal mode bit
349d : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
349f : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
34a2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
34a4 : ca                       dex
34a5 : 10e0                     bpl tora3
                        
34a7 : a203                     ldx #3      ;abs
34a9 : b51a             tora4   lda zpOR,x
34ab : 8d0302                   sta abst
                                set_ax  absORa,0
                       >            load_flag 0
34ae : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
34b0 : 48              >            pha         ;use stack to load status
34b1 : bd6702          >            lda absORa,x    ;precharge accu
34b4 : 28              >            plp
                        
34b5 : 0d0302                   ora abst
                                tst_ax  absrlo,absflo,0
34b8 : 08              >            php         ;save flags
34b9 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
34bc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
34be : 68              >            pla         ;load status
                       >            eor_flag 0
34bf : 0908            >            ora #decmode        ;ignore decimal mode bit
34c1 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
34c3 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
34c6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
34c8 : ca                       dex
34c9 : 10de                     bpl tora4
34cb : a203                     ldx #3
34cd : b51a             tora5   lda zpOR,x
34cf : 8d0302                   sta abst
                                set_ax  absORa,$ff
                       >            load_flag $ff
34d2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
34d4 : 48              >            pha         ;use stack to load status
34d5 : bd6702          >            lda absORa,x    ;precharge accu
34d8 : 28              >            plp
                        
34d9 : 0d0302                   ora abst
                                tst_ax  absrlo,absflo,$ff-fnz
34dc : 08              >            php         ;save flags
34dd : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
34e0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
34e2 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
34e3 : 0908            >            ora #decmode        ;ignore decimal mode bit
34e5 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
34e7 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
34ea : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
34ec : ca                       dex
34ed : 1002                     bpl tora6
                        
34ef : a203                     ldx #3      ;zp,x
34f1 :                  tora6
                                set_ax  absORa,0
                       >            load_flag 0
34f1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
34f3 : 48              >            pha         ;use stack to load status
34f4 : bd6702          >            lda absORa,x    ;precharge accu
34f7 : 28              >            plp
                        
34f8 : 151a                     ora zpOR,x
                                tst_ax  absrlo,absflo,0
34fa : 08              >            php         ;save flags
34fb : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
34fe : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3500 : 68              >            pla         ;load status
                       >            eor_flag 0
3501 : 0908            >            ora #decmode        ;ignore decimal mode bit
3503 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
3505 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3508 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
350a : ca                       dex
350b : 10e4                     bpl tora6
350d : a203                     ldx #3
350f :                  tora7
                                set_ax  absORa,$ff
                       >            load_flag $ff
350f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3511 : 48              >            pha         ;use stack to load status
3512 : bd6702          >            lda absORa,x    ;precharge accu
3515 : 28              >            plp
                        
3516 : 151a                     ora zpOR,x
                                tst_ax  absrlo,absflo,$ff-fnz
3518 : 08              >            php         ;save flags
3519 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
351c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
351e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
351f : 0908            >            ora #decmode        ;ignore decimal mode bit
3521 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
3523 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3526 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3528 : ca                       dex
3529 : 10e4                     bpl tora7
                        
352b : a203                     ldx #3      ;abs,x
352d :                  tora8
                                set_ax  absORa,0
                       >            load_flag 0
352d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
352f : 48              >            pha         ;use stack to load status
3530 : bd6702          >            lda absORa,x    ;precharge accu
3533 : 28              >            plp
                        
3534 : 1d5b02                   ora absOR,x
                                tst_ax  absrlo,absflo,0
3537 : 08              >            php         ;save flags
3538 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
353b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
353d : 68              >            pla         ;load status
                       >            eor_flag 0
353e : 0908            >            ora #decmode        ;ignore decimal mode bit
3540 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
3542 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3545 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3547 : ca                       dex
3548 : 10e3                     bpl tora8
354a : a203                     ldx #3
354c :                  tora9
                                set_ax  absORa,$ff
                       >            load_flag $ff
354c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
354e : 48              >            pha         ;use stack to load status
354f : bd6702          >            lda absORa,x    ;precharge accu
3552 : 28              >            plp
                        
3553 : 1d5b02                   ora absOR,x
                                tst_ax  absrlo,absflo,$ff-fnz
3556 : 08              >            php         ;save flags
3557 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
355a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
355c : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
355d : 0908            >            ora #decmode        ;ignore decimal mode bit
355f : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
3561 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3564 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3566 : ca                       dex
3567 : 10e3                     bpl tora9
                        
3569 : a003                     ldy #3      ;abs,y
356b :                  tora10
                                set_ay  absORa,0
                       >            load_flag 0
356b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
356d : 48              >            pha         ;use stack to load status
356e : b96702          >            lda absORa,y    ;precharge accu
3571 : 28              >            plp
                        
3572 : 195b02                   ora absOR,y
                                tst_ay  absrlo,absflo,0
3575 : 08              >            php         ;save flags
3576 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3579 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
357b : 68              >            pla         ;load status
                       >            eor_flag 0
357c : 0908            >            ora #decmode        ;ignore decimal mode bit
357e : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
3580 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
3583 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3585 : 88                       dey
3586 : 10e3                     bpl tora10
3588 : a003                     ldy #3
358a :                  tora11
                                set_ay  absORa,$ff
                       >            load_flag $ff
358a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
358c : 48              >            pha         ;use stack to load status
358d : b96702          >            lda absORa,y    ;precharge accu
3590 : 28              >            plp
                        
3591 : 195b02                   ora absOR,y
                                tst_ay  absrlo,absflo,$ff-fnz
3594 : 08              >            php         ;save flags
3595 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3598 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
359a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
359b : 0908            >            ora #decmode        ;ignore decimal mode bit
359d : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
359f : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
35a2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
35a4 : 88                       dey
35a5 : 10e3                     bpl tora11
                        
35a7 : a206                     ldx #6      ;(zp,x)
35a9 : a003                     ldy #3
35ab :                  tora12
                                set_ay  absORa,0
                       >            load_flag 0
35ab : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
35ad : 48              >            pha         ;use stack to load status
35ae : b96702          >            lda absORa,y    ;precharge accu
35b1 : 28              >            plp
                        
35b2 : 014c                     ora (indOR,x)
                                tst_ay  absrlo,absflo,0
35b4 : 08              >            php         ;save flags
35b5 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
35b8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
35ba : 68              >            pla         ;load status
                       >            eor_flag 0
35bb : 0908            >            ora #decmode        ;ignore decimal mode bit
35bd : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
35bf : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
35c2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
35c4 : ca                       dex
35c5 : ca                       dex
35c6 : 88                       dey
35c7 : 10e2                     bpl tora12
35c9 : a206                     ldx #6
35cb : a003                     ldy #3
35cd :                  tora13
                                set_ay  absORa,$ff
                       >            load_flag $ff
35cd : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
35cf : 48              >            pha         ;use stack to load status
35d0 : b96702          >            lda absORa,y    ;precharge accu
35d3 : 28              >            plp
                        
35d4 : 014c                     ora (indOR,x)
                                tst_ay  absrlo,absflo,$ff-fnz
35d6 : 08              >            php         ;save flags
35d7 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
35da : d0fe            >        bne *           ;failed not equal (non zero)
                       >
35dc : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
35dd : 0908            >            ora #decmode        ;ignore decimal mode bit
35df : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
35e1 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
35e4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
35e6 : ca                       dex
35e7 : ca                       dex
35e8 : 88                       dey
35e9 : 10e2                     bpl tora13
                        
35eb : a003                     ldy #3      ;(zp),y
35ed :                  tora14
                                set_ay  absORa,0
                       >            load_flag 0
35ed : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
35ef : 48              >            pha         ;use stack to load status
35f0 : b96702          >            lda absORa,y    ;precharge accu
35f3 : 28              >            plp
                        
35f4 : 114c                     ora (indOR),y
                                tst_ay  absrlo,absflo,0
35f6 : 08              >            php         ;save flags
35f7 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
35fa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
35fc : 68              >            pla         ;load status
                       >            eor_flag 0
35fd : 0908            >            ora #decmode        ;ignore decimal mode bit
35ff : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
3601 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
3604 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3606 : 88                       dey
3607 : 10e4                     bpl tora14
3609 : a003                     ldy #3
360b :                  tora15
                                set_ay  absORa,$ff
                       >            load_flag $ff
360b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
360d : 48              >            pha         ;use stack to load status
360e : b96702          >            lda absORa,y    ;precharge accu
3611 : 28              >            plp
                        
3612 : 114c                     ora (indOR),y
                                tst_ay  absrlo,absflo,$ff-fnz
3614 : 08              >            php         ;save flags
3615 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3618 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
361a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
361b : 0908            >            ora #decmode        ;ignore decimal mode bit
361d : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
361f : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
3622 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3624 : 88                       dey
3625 : 10e4                     bpl tora15
                            if I_flag = 3
3627 : 58                       cli
                            endif                
                                next_test
3628 : ad0002          >            lda test_case   ;previous test
362b : c928            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
362d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0029 =                 >test_num = test_num + 1
362f : a929            >            lda #test_num   ;*** next tests' number
3631 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; full binary add/subtract test
                        ; iterates through all combinations of operands and carry input
                        ; uses increments/decrements to predict result & result flags
3634 : d8                       cld
3635 : a20e                     ldx #ad2        ;for indexed test
3637 : a0ff                     ldy #$ff        ;max range
3639 : a900                     lda #0          ;start with adding zeroes & no carry
363b : 850c                     sta adfc        ;carry in - for diag
363d : 850d                     sta ad1         ;operand 1 - accumulator
363f : 850e                     sta ad2         ;operand 2 - memory or immediate
3641 : 8d0302                   sta ada2        ;non zp
3644 : 850f                     sta adrl        ;expected result bits 0-7
3646 : 8510                     sta adrh        ;expected result bit 8 (carry out)
3648 : a9ff                     lda #$ff        ;complemented operand 2 for subtract
364a : 8512                     sta sb2
364c : 8d0402                   sta sba2        ;non zp
364f : a902                     lda #2          ;expected Z-flag
3651 : 8511                     sta adrf
3653 : 18               tadd    clc             ;test with carry clear
3654 : 209f36                   jsr chkadd
3657 : e60c                     inc adfc        ;now with carry
3659 : e60f                     inc adrl        ;result +1
365b : 08                       php             ;save N & Z from low result
365c : 08                       php
365d : 68                       pla             ;accu holds expected flags
365e : 2982                     and #$82        ;mask N & Z
3660 : 28                       plp
3661 : d002                     bne tadd1
3663 : e610                     inc adrh        ;result bit 8 - carry
3665 : 0510             tadd1   ora adrh        ;merge C to expected flags
3667 : 8511                     sta adrf        ;save expected flags except overflow
3669 : 38                       sec             ;test with carry set
366a : 209f36                   jsr chkadd
366d : c60c                     dec adfc        ;same for operand +1 but no carry
366f : e60d                     inc ad1
3671 : d0e0                     bne tadd        ;iterate op1
3673 : a900                     lda #0          ;preset result to op2 when op1 = 0
3675 : 8510                     sta adrh
3677 : ee0302                   inc ada2
367a : e60e                     inc ad2
367c : 08                       php             ;save NZ as operand 2 becomes the new result
367d : 68                       pla
367e : 2982                     and #$82        ;mask N00000Z0
3680 : 8511                     sta adrf        ;no need to check carry as we are adding to 0
3682 : c612                     dec sb2         ;complement subtract operand 2
3684 : ce0402                   dec sba2
3687 : a50e                     lda ad2         
3689 : 850f                     sta adrl
368b : d0c6                     bne tadd        ;iterate op2
                            if disable_decimal < 1
                                next_test
                        
                        ; decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, N V Z flags are ignored
                        ; iterates through all valid combinations of operands and carry input
                        ; uses increments/decrements to predict result & carry flag
                                sed 
                                ldx #ad2        ;for indexed test
                                ldy #$ff        ;max range
                                lda #$99        ;start with adding 99 to 99 with carry
                                sta ad1         ;operand 1 - accumulator
                                sta ad2         ;operand 2 - memory or immediate
                                sta ada2        ;non zp
                                sta adrl        ;expected result bits 0-7
                                lda #1          ;set carry in & out
                                sta adfc        ;carry in - for diag
                                sta adrh        ;expected result bit 8 (carry out)
                                lda #0          ;complemented operand 2 for subtract
                                sta sb2
                                sta sba2        ;non zp
                        tdad    sec             ;test with carry set
                                jsr chkdad
                                dec adfc        ;now with carry clear
                                lda adrl        ;decimal adjust result
                                bne tdad1       ;skip clear carry & preset result 99 (9A-1)
                                dec adrh
                                lda #$99
                                sta adrl
                                bne tdad3
                        tdad1   and #$f         ;lower nibble mask
                                bne tdad2       ;no decimal adjust needed
                                dec adrl        ;decimal adjust (?0-6)
                                dec adrl
                                dec adrl
                                dec adrl
                                dec adrl
                                dec adrl
                        tdad2   dec adrl        ;result -1
                        tdad3   clc             ;test with carry clear
                                jsr chkdad
                                inc adfc        ;same for operand -1 but with carry
                                lda ad1         ;decimal adjust operand 1
                                beq tdad5       ;iterate operand 2
                                and #$f         ;lower nibble mask
                                bne tdad4       ;skip decimal adjust
                                dec ad1         ;decimal adjust (?0-6)
                                dec ad1
                                dec ad1
                                dec ad1
                                dec ad1
                                dec ad1
                        tdad4   dec ad1         ;operand 1 -1
                                jmp tdad        ;iterate op1
                        
                        tdad5   lda #$99        ;precharge op1 max
                                sta ad1
                                lda ad2         ;decimal adjust operand 2
                                beq tdad7       ;end of iteration
                                and #$f         ;lower nibble mask
                                bne tdad6       ;skip decimal adjust
                                dec ad2         ;decimal adjust (?0-6)
                                dec ad2
                                dec ad2
                                dec ad2
                                dec ad2
                                dec ad2
                                inc sb2         ;complemented decimal adjust for subtract (?9+6)
                                inc sb2
                                inc sb2
                                inc sb2
                                inc sb2
                                inc sb2
                        tdad6   dec ad2         ;operand 2 -1
                                inc sb2         ;complemented operand for subtract
                                lda sb2
                                sta sba2        ;copy as non zp operand
                                lda ad2
                                sta ada2        ;copy as non zp operand
                                sta adrl        ;new result since op1+carry=00+carry +op2=op2
                                inc adrh        ;result carry
                                bne tdad        ;iterate op2
                        tdad7
                                next_test
                        
                        ; decimal/binary switch test
                        ; tests CLD, SED, PLP, RTI to properly switch between decimal & binary opcode
                        ;   tables
                                clc
                                cld
                                php
                                lda #$55
                                adc #$55
                                cmp #$aa
                                trap_ne         ;expected binary result after cld
                                clc
                                sed
                                php
                                lda #$55
                                adc #$55
                                cmp #$10
                                trap_ne         ;expected decimal result after sed
                                cld
                                plp
                                lda #$55
                                adc #$55
                                cmp #$10
                                trap_ne         ;expected decimal result after plp D=1
                                plp
                                lda #$55
                                adc #$55
                                cmp #$aa
                                trap_ne         ;expected binary result after plp D=0
                                clc
                                lda #hi bin_rti_ret ;emulated interrupt for rti
                                pha
                                lda #lo bin_rti_ret
                                pha
                                php
                                sed
                                lda #hi dec_rti_ret ;emulated interrupt for rti
                                pha
                                lda #lo dec_rti_ret
                                pha
                                php
                                cld
                                rti
                        dec_rti_ret
                                lda #$55
                                adc #$55
                                cmp #$10
                                trap_ne         ;expected decimal result after rti D=1
                                rti
                        bin_rti_ret        
                                lda #$55
                                adc #$55
                                cmp #$aa
                                trap_ne         ;expected binary result after rti D=0
                            endif
                            
368d : ad0002                   lda test_case
3690 : c929                     cmp #test_num
                                trap_ne         ;previous test is out of sequence
3692 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3694 : a9f0                     lda #$f0        ;mark opcode testing complete
3696 : 8d0002                   sta test_case
                                
                        ; final RAM integrity test
                        ;   verifies that none of the previous tests has altered RAM outside of the
                        ;   designated write areas.
                                check_ram
                       >            ;RAM check disabled - RAM size not set
                        
                        ; *** DEBUG INFO ***
                        ; to debug checksum errors uncomment check_ram in the next_test macro to
                        ; narrow down the responsible opcode.
                        ; may give false errors when monitor, OS or other background activity is
                        ; allowed during previous tests.
                        
                        
                        ; S U C C E S S ************************************************
                        ; -------------       
                                success         ;if you get here everything went well
3699 : 4c9936          >        jmp *           ;test passed, no errors
                        
                        ; -------------       
                        ; S U C C E S S ************************************************
369c : 4c0004                   jmp start       ;run again      
                        
                            if disable_decimal < 1
                        ; core subroutine of the decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, N V Z flags are ignored
                        ; iterates through all valid combinations of operands and carry input
                        ; uses increments/decrements to predict result & carry flag
                        chkdad
                        ; decimal ADC / SBC zp
                                php             ;save carry for subtract
                                lda ad1
                                adc ad2         ;perform add
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc sb2         ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad flags
                                plp
                        ; decimal ADC / SBC abs
                                php             ;save carry for subtract
                                lda ad1
                                adc ada2        ;perform add
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc sba2        ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC #
                                php             ;save carry for subtract
                                lda ad2
                                sta ex_adci+1   ;set ADC # operand
                                lda ad1
                                jsr ex_adci     ;execute ADC # in RAM
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda sb2
                                sta ex_sbci+1   ;set SBC # operand
                                lda ad1
                                jsr ex_sbci     ;execute SBC # in RAM
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC zp,x
                                php             ;save carry for subtract
                                lda ad1
                                adc 0,x         ;perform add
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc sb2-ad2,x   ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC abs,x
                                php             ;save carry for subtract
                                lda ad1
                                adc ada2-ad2,x  ;perform add
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc sba2-ad2,x  ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC abs,y
                                php             ;save carry for subtract
                                lda ad1
                                adc ada2-$ff,y  ;perform add
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc sba2-$ff,y  ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC (zp,x)
                                php             ;save carry for subtract
                                lda ad1
                                adc (lo adi2-ad2,x) ;perform add
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc (lo sbi2-ad2,x) ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC (abs),y
                                php             ;save carry for subtract
                                lda ad1
                                adc (adiy2),y   ;perform add
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc (sbiy2),y   ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                rts
                            endif
                        
                        ; core subroutine of the full binary add/subtract test
                        ; iterates through all combinations of operands and carry input
                        ; uses increments/decrements to predict result & result flags
369f : a511             chkadd  lda adrf        ;add V-flag if overflow
36a1 : 2983                     and #$83        ;keep N-----ZC / clear V
36a3 : 48                       pha
36a4 : a50d                     lda ad1         ;test sign unequal between operands
36a6 : 450e                     eor ad2
36a8 : 300a                     bmi ckad1       ;no overflow possible - operands have different sign
36aa : a50d                     lda ad1         ;test sign equal between operands and result
36ac : 450f                     eor adrl
36ae : 1004                     bpl ckad1       ;no overflow occured - operand and result have same sign
36b0 : 68                       pla
36b1 : 0940                     ora #$40        ;set V
36b3 : 48                       pha
36b4 : 68               ckad1   pla
36b5 : 8511                     sta adrf        ;save expected flags
                        ; binary ADC / SBC zp
36b7 : 08                       php             ;save carry for subtract
36b8 : a50d                     lda ad1
36ba : 650e                     adc ad2         ;perform add
36bc : 08                       php          
36bd : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
36bf : d0fe            >        bne *           ;failed not equal (non zero)
                        
36c1 : 68                       pla             ;check flags
36c2 : 29c3                     and #$c3        ;mask NV----ZC
36c4 : c511                     cmp adrf
                                trap_ne         ;bad flags
36c6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
36c8 : 28                       plp
36c9 : 08                       php             ;save carry for next add
36ca : a50d                     lda ad1
36cc : e512                     sbc sb2         ;perform subtract
36ce : 08                       php          
36cf : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
36d1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
36d3 : 68                       pla             ;check flags
36d4 : 29c3                     and #$c3        ;mask NV----ZC
36d6 : c511                     cmp adrf
                                trap_ne         ;bad flags
36d8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
36da : 28                       plp
                        ; binary ADC / SBC abs
36db : 08                       php             ;save carry for subtract
36dc : a50d                     lda ad1
36de : 6d0302                   adc ada2        ;perform add
36e1 : 08                       php          
36e2 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
36e4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
36e6 : 68                       pla             ;check flags
36e7 : 29c3                     and #$c3        ;mask NV----ZC
36e9 : c511                     cmp adrf
                                trap_ne         ;bad flags
36eb : d0fe            >        bne *           ;failed not equal (non zero)
                        
36ed : 28                       plp
36ee : 08                       php             ;save carry for next add
36ef : a50d                     lda ad1
36f1 : ed0402                   sbc sba2        ;perform subtract
36f4 : 08                       php          
36f5 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
36f7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
36f9 : 68                       pla             ;check flags
36fa : 29c3                     and #$c3        ;mask NV----ZC
36fc : c511                     cmp adrf
                                trap_ne         ;bad flags
36fe : d0fe            >        bne *           ;failed not equal (non zero)
                        
3700 : 28                       plp
                        ; binary ADC / SBC #
3701 : 08                       php             ;save carry for subtract
3702 : a50e                     lda ad2
3704 : 8d1302                   sta ex_adci+1   ;set ADC # operand
3707 : a50d                     lda ad1
3709 : 201202                   jsr ex_adci     ;execute ADC # in RAM
370c : 08                       php          
370d : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
370f : d0fe            >        bne *           ;failed not equal (non zero)
                        
3711 : 68                       pla             ;check flags
3712 : 29c3                     and #$c3        ;mask NV----ZC
3714 : c511                     cmp adrf
                                trap_ne         ;bad flags
3716 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3718 : 28                       plp
3719 : 08                       php             ;save carry for next add
371a : a512                     lda sb2
371c : 8d1602                   sta ex_sbci+1   ;set SBC # operand
371f : a50d                     lda ad1
3721 : 201502                   jsr ex_sbci     ;execute SBC # in RAM
3724 : 08                       php          
3725 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
3727 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3729 : 68                       pla             ;check flags
372a : 29c3                     and #$c3        ;mask NV----ZC
372c : c511                     cmp adrf
                                trap_ne         ;bad flags
372e : d0fe            >        bne *           ;failed not equal (non zero)
                        
3730 : 28                       plp
                        ; binary ADC / SBC zp,x
3731 : 08                       php             ;save carry for subtract
3732 : a50d                     lda ad1
3734 : 7500                     adc 0,x         ;perform add
3736 : 08                       php          
3737 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
3739 : d0fe            >        bne *           ;failed not equal (non zero)
                        
373b : 68                       pla             ;check flags
373c : 29c3                     and #$c3        ;mask NV----ZC
373e : c511                     cmp adrf
                                trap_ne         ;bad flags
3740 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3742 : 28                       plp
3743 : 08                       php             ;save carry for next add
3744 : a50d                     lda ad1
3746 : f504                     sbc sb2-ad2,x   ;perform subtract
3748 : 08                       php          
3749 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
374b : d0fe            >        bne *           ;failed not equal (non zero)
                        
374d : 68                       pla             ;check flags
374e : 29c3                     and #$c3        ;mask NV----ZC
3750 : c511                     cmp adrf
                                trap_ne         ;bad flags
3752 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3754 : 28                       plp
                        ; binary ADC / SBC abs,x
3755 : 08                       php             ;save carry for subtract
3756 : a50d                     lda ad1
3758 : 7df501                   adc ada2-ad2,x  ;perform add
375b : 08                       php          
375c : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
375e : d0fe            >        bne *           ;failed not equal (non zero)
                        
3760 : 68                       pla             ;check flags
3761 : 29c3                     and #$c3        ;mask NV----ZC
3763 : c511                     cmp adrf
                                trap_ne         ;bad flags
3765 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3767 : 28                       plp
3768 : 08                       php             ;save carry for next add
3769 : a50d                     lda ad1
376b : fdf601                   sbc sba2-ad2,x  ;perform subtract
376e : 08                       php          
376f : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
3771 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3773 : 68                       pla             ;check flags
3774 : 29c3                     and #$c3        ;mask NV----ZC
3776 : c511                     cmp adrf
                                trap_ne         ;bad flags
3778 : d0fe            >        bne *           ;failed not equal (non zero)
                        
377a : 28                       plp
                        ; binary ADC / SBC abs,y
377b : 08                       php             ;save carry for subtract
377c : a50d                     lda ad1
377e : 790401                   adc ada2-$ff,y  ;perform add
3781 : 08                       php          
3782 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
3784 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3786 : 68                       pla             ;check flags
3787 : 29c3                     and #$c3        ;mask NV----ZC
3789 : c511                     cmp adrf
                                trap_ne         ;bad flags
378b : d0fe            >        bne *           ;failed not equal (non zero)
                        
378d : 28                       plp
378e : 08                       php             ;save carry for next add
378f : a50d                     lda ad1
3791 : f90501                   sbc sba2-$ff,y  ;perform subtract
3794 : 08                       php          
3795 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
3797 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3799 : 68                       pla             ;check flags
379a : 29c3                     and #$c3        ;mask NV----ZC
379c : c511                     cmp adrf
                                trap_ne         ;bad flags
379e : d0fe            >        bne *           ;failed not equal (non zero)
                        
37a0 : 28                       plp
                        ; binary ADC / SBC (zp,x)
37a1 : 08                       php             ;save carry for subtract
37a2 : a50d                     lda ad1
37a4 : 6146                     adc (lo adi2-ad2,x) ;perform add
37a6 : 08                       php          
37a7 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
37a9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
37ab : 68                       pla             ;check flags
37ac : 29c3                     and #$c3        ;mask NV----ZC
37ae : c511                     cmp adrf
                                trap_ne         ;bad flags
37b0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
37b2 : 28                       plp
37b3 : 08                       php             ;save carry for next add
37b4 : a50d                     lda ad1
37b6 : e148                     sbc (lo sbi2-ad2,x) ;perform subtract
37b8 : 08                       php          
37b9 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
37bb : d0fe            >        bne *           ;failed not equal (non zero)
                        
37bd : 68                       pla             ;check flags
37be : 29c3                     and #$c3        ;mask NV----ZC
37c0 : c511                     cmp adrf
                                trap_ne         ;bad flags
37c2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
37c4 : 28                       plp
                        ; binary ADC / SBC (abs),y
37c5 : 08                       php             ;save carry for subtract
37c6 : a50d                     lda ad1
37c8 : 7158                     adc (adiy2),y   ;perform add
37ca : 08                       php          
37cb : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
37cd : d0fe            >        bne *           ;failed not equal (non zero)
                        
37cf : 68                       pla             ;check flags
37d0 : 29c3                     and #$c3        ;mask NV----ZC
37d2 : c511                     cmp adrf
                                trap_ne         ;bad flags
37d4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
37d6 : 28                       plp
37d7 : 08                       php             ;save carry for next add
37d8 : a50d                     lda ad1
37da : f15a                     sbc (sbiy2),y   ;perform subtract
37dc : 08                       php          
37dd : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
37df : d0fe            >        bne *           ;failed not equal (non zero)
                        
37e1 : 68                       pla             ;check flags
37e2 : 29c3                     and #$c3        ;mask NV----ZC
37e4 : c511                     cmp adrf
                                trap_ne         ;bad flags
37e6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
37e8 : 28                       plp
37e9 : 60                       rts
                        
                        ; target for the jump absolute test
37ea : 88                       dey
37eb : 88                       dey
37ec :                  test_far
37ec : 08                       php             ;either SP or Y count will fail, if we do not hit
37ed : 88                       dey
37ee : 88                       dey
37ef : 88                       dey
37f0 : 28                       plp
                                trap_cs         ;flags loaded?
37f1 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_vs
37f3 : 70fe            >        bvs *           ;failed overflow set
                        
                                trap_mi
37f5 : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_eq 
37f7 : f0fe            >        beq *           ;failed equal (zero)
                        
37f9 : c946                     cmp #'F'        ;registers loaded?
                                trap_ne
37fb : d0fe            >        bne *           ;failed not equal (non zero)
                        
37fd : e041                     cpx #'A'
                                trap_ne        
37ff : d0fe            >        bne *           ;failed not equal (non zero)
                        
3801 : c04f                     cpy #('R'-3)
                                trap_ne
3803 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3805 : 48                       pha             ;save a,x
3806 : 8a                       txa
3807 : 48                       pha
3808 : ba                       tsx
3809 : e0fd                     cpx #$fd        ;check SP
                                trap_ne
380b : d0fe            >        bne *           ;failed not equal (non zero)
                        
380d : 68                       pla             ;restore x
380e : aa                       tax
                                set_stat $ff
                       >            load_flag $ff
380f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3811 : 48              >            pha         ;use stack to load status
3812 : 28              >            plp
                        
3813 : 68                       pla             ;restore a
3814 : e8                       inx             ;return registers with modifications
3815 : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
3817 : 4c3309                   jmp far_ret
                                
                        ; target for the jump indirect test
                                align
381a : 2338             ptr_tst_ind dw test_ind
381c : 8809             ptr_ind_ret dw ind_ret
                                trap            ;runover protection
381e : 4c1e38          >        jmp *           ;failed anyway
                        
3821 : 88                       dey
3822 : 88                       dey
3823 :                  test_ind
3823 : 08                       php             ;either SP or Y count will fail, if we do not hit
3824 : 88                       dey
3825 : 88                       dey
3826 : 88                       dey
3827 : 28                       plp
                                trap_cs         ;flags loaded?
3828 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_vs
382a : 70fe            >        bvs *           ;failed overflow set
                        
                                trap_mi
382c : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_eq 
382e : f0fe            >        beq *           ;failed equal (zero)
                        
3830 : c949                     cmp #'I'        ;registers loaded?
                                trap_ne
3832 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3834 : e04e                     cpx #'N'
                                trap_ne        
3836 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3838 : c041                     cpy #('D'-3)
                                trap_ne
383a : d0fe            >        bne *           ;failed not equal (non zero)
                        
383c : 48                       pha             ;save a,x
383d : 8a                       txa
383e : 48                       pha
383f : ba                       tsx
3840 : e0fd                     cpx #$fd        ;check SP
                                trap_ne
3842 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3844 : 68                       pla             ;restore x
3845 : aa                       tax
                                set_stat $ff
                       >            load_flag $ff
3846 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3848 : 48              >            pha         ;use stack to load status
3849 : 28              >            plp
                        
384a : 68                       pla             ;restore a
384b : e8                       inx             ;return registers with modifications
384c : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
384e : 6c1c38                   jmp (ptr_ind_ret)
                                trap            ;runover protection
3851 : 4c5138          >        jmp *           ;failed anyway
                        
3854 : 4c0004                   jmp start       ;catastrophic error - cannot continue
                        
                        ; target for the jump subroutine test
3857 : 88                       dey
3858 : 88                       dey
3859 :                  test_jsr
3859 : 08                       php             ;either SP or Y count will fail, if we do not hit
385a : 88                       dey
385b : 88                       dey
385c : 88                       dey
385d : 28                       plp
                                trap_cs         ;flags loaded?
385e : b0fe            >        bcs *           ;failed carry set
                        
                                trap_vs
3860 : 70fe            >        bvs *           ;failed overflow set
                        
                                trap_mi
3862 : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_eq 
3864 : f0fe            >        beq *           ;failed equal (zero)
                        
3866 : c94a                     cmp #'J'        ;registers loaded?
                                trap_ne
3868 : d0fe            >        bne *           ;failed not equal (non zero)
                        
386a : e053                     cpx #'S'
                                trap_ne        
386c : d0fe            >        bne *           ;failed not equal (non zero)
                        
386e : c04f                     cpy #('R'-3)
                                trap_ne
3870 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3872 : 48                       pha             ;save a,x
3873 : 8a                       txa
3874 : 48                       pha       
3875 : ba                       tsx             ;sp -4? (return addr,a,x)
3876 : e0fb                     cpx #$fb
                                trap_ne
3878 : d0fe            >        bne *           ;failed not equal (non zero)
                        
387a : adff01                   lda $1ff        ;propper return on stack
387d : c909                     cmp #hi(jsr_ret)
                                trap_ne
387f : d0fe            >        bne *           ;failed not equal (non zero)
                        
3881 : adfe01                   lda $1fe
3884 : c9be                     cmp #lo(jsr_ret)
                                trap_ne
3886 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
3888 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
388a : 48              >            pha         ;use stack to load status
388b : 28              >            plp
                        
388c : 68                       pla             ;pull x,a
388d : aa                       tax
388e : 68                       pla
388f : e8                       inx             ;return registers with modifications
3890 : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
3892 : 60                       rts
                                trap            ;runover protection
3893 : 4c9338          >        jmp *           ;failed anyway
                        
3896 : 4c0004                   jmp start       ;catastrophic error - cannot continue
                                
                        ;trap in case of unexpected IRQ, NMI, BRK, RESET - BRK test target
3899 :                  nmi_trap
3899 : 40                       rti             ;check stack for conditions at NMI
389a : ea                       nop
389b : ea                       nop
389c : 4c0004                   jmp start       ;catastrophic error - cannot continue
389f :                  res_trap
                                trap            ;unexpected RESET
389f : 4c9f38          >        jmp *           ;failed anyway
                        
38a2 : 4c0004                   jmp start       ;catastrophic error - cannot continue
                                
38a5 : 88                       dey
38a6 : 88                       dey
38a7 :                  irq_trap                ;BRK test or unextpected BRK or IRQ
38a7 : 08                       php             ;either SP or Y count will fail, if we do not hit
38a8 : 88                       dey
38a9 : 88                       dey
38aa : 88                       dey
                                ;next traps could be caused by unexpected BRK or IRQ
                                ;check stack for BREAK and originating location
                                ;possible jump/branch into weeds (uninitialized space)
38ab : c9bd                     cmp #$ff-'B'    ;BRK pass 2 registers loaded?
38ad : f046                     beq break2
38af : c942                     cmp #'B'        ;BRK pass 1 registers loaded?
                                trap_ne
38b1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
38b3 : e052                     cpx #'R'
                                trap_ne        
38b5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
38b7 : c048                     cpy #'K'-3
                                trap_ne
38b9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
38bb : 850a                     sta irq_a       ;save registers during break test
38bd : 860b                     stx irq_x
38bf : ba                       tsx             ;test break on stack
38c0 : bd0201                   lda $102,x
                                cmp_flag 0      ;break test should have B=1 & unused=1 on stack
38c3 : 0908            >            ora #decmode        ;ignore decimal mode bit
38c5 : c938            >            cmp #(0      |faod)&m8   ;expected flags + always on bits
                        
                                trap_ne         ; - no break flag on stack
38c7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
38c9 : 68                       pla
                                cmp_flag intdis ;should have added interrupt disable
38ca : 0908            >            ora #decmode        ;ignore decimal mode bit
38cc : c93c            >            cmp #(intdis |faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
38ce : d0fe            >        bne *           ;failed not equal (non zero)
                        
38d0 : ba                       tsx
38d1 : e0fc                     cpx #$fc        ;sp -3? (return addr, flags)
                                trap_ne
38d3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
38d5 : adff01                   lda $1ff        ;propper return on stack
38d8 : c909                     cmp #hi(brk_ret0)
                                trap_ne
38da : d0fe            >        bne *           ;failed not equal (non zero)
                        
38dc : adfe01                   lda $1fe
38df : c9f5                     cmp #lo(brk_ret0)
                                trap_ne
38e1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                load_flag $ff
38e3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                        
38e5 : 48                       pha
38e6 : a60b                     ldx irq_x
38e8 : e8                       inx             ;return registers with modifications
38e9 : a50a                     lda irq_a
38eb : 49aa                     eor #$aa
38ed : 28                       plp             ;N=1, V=1, Z=1, C=1 but original flags should be restored
38ee : 40                       rti
                                trap            ;runover protection
38ef : 4cef38          >        jmp *           ;failed anyway
                        
38f2 : 4c0004                   jmp start       ;catastrophic error - cannot continue
                                
38f5 :                  break2                  ;BRK pass 2        
38f5 : e0ad                     cpx #$ff-'R'
                                trap_ne        
38f7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
38f9 : c0b1                     cpy #$ff-'K'-3
                                trap_ne
38fb : d0fe            >        bne *           ;failed not equal (non zero)
                        
38fd : 850a                     sta irq_a       ;save registers during break test
38ff : 860b                     stx irq_x
3901 : ba                       tsx             ;test break on stack
3902 : bd0201                   lda $102,x
                                cmp_flag $ff    ;break test should have B=1
3905 : 0908            >            ora #decmode        ;ignore decimal mode bit
3907 : c9ff            >            cmp #($ff    |faod)&m8   ;expected flags + always on bits
                        
                                trap_ne         ; - no break flag on stack
3909 : d0fe            >        bne *           ;failed not equal (non zero)
                        
390b : 68                       pla
390c : 0908                     ora #decmode    ;ignore decmode cleared if 65c02
                                cmp_flag $ff    ;actual passed flags
390e : 0908            >            ora #decmode        ;ignore decimal mode bit
3910 : c9ff            >            cmp #($ff    |faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
3912 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3914 : ba                       tsx
3915 : e0fc                     cpx #$fc        ;sp -3? (return addr, flags)
                                trap_ne
3917 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3919 : adff01                   lda $1ff        ;propper return on stack
391c : c90a                     cmp #hi(brk_ret1)
                                trap_ne
391e : d0fe            >        bne *           ;failed not equal (non zero)
                        
3920 : adfe01                   lda $1fe
3923 : c91d                     cmp #lo(brk_ret1)
                                trap_ne
3925 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                load_flag intdis
3927 : a904            >            lda #intdis             ;allow test to change I-flag (no mask)
                        
3929 : 48                       pha      
392a : a60b                     ldx irq_x
392c : e8                       inx             ;return registers with modifications
392d : a50a                     lda irq_a
392f : 49aa                     eor #$aa
3931 : 28                       plp             ;N=0, V=0, Z=0, C=0 but original flags should be restored
3932 : 40                       rti
                                trap            ;runover protection
3933 : 4c3339          >        jmp *           ;failed anyway
                        
3936 : 4c0004                   jmp start       ;catastrophic error - cannot continue
                        
                            if report = 1
                                include "report.i65"
                            endif
                                
                        ;copy of data to initialize BSS segment
                            if load_data_direct != 1
                        zp_init
                        zps_    db  $80,1           ;additional shift pattern to test zero result & flag
                        zp1_    db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
                        zp7f_   db  $7f             ;test pattern for compare
                        ;logical zeropage operands
                        zpOR_   db  0,$1f,$71,$80   ;test pattern for OR
                        zpAN_   db  $0f,$ff,$7f,$80 ;test pattern for AND
                        zpEO_   db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
                        ind1_   dw  abs1            ;indirect pointer to pattern in absolute memory
                                dw  abs1+1
                                dw  abs1+2
                                dw  abs1+3
                                dw  abs7f
                        inw1_   dw  abs1-$f8        ;indirect pointer for wrap-test pattern
                        indt_   dw  abst            ;indirect pointer to store area in absolute memory
                                dw  abst+1
                                dw  abst+2
                                dw  abst+3
                        inwt_   dw  abst-$f8        ;indirect pointer for wrap-test store
                        indAN_  dw  absAN           ;indirect pointer to AND pattern in absolute memory
                                dw  absAN+1
                                dw  absAN+2
                                dw  absAN+3
                        indEO_  dw  absEO           ;indirect pointer to EOR pattern in absolute memory
                                dw  absEO+1
                                dw  absEO+2
                                dw  absEO+3
                        indOR_  dw  absOR           ;indirect pointer to OR pattern in absolute memory
                                dw  absOR+1
                                dw  absOR+2
                                dw  absOR+3
                        ;add/subtract indirect pointers
                        adi2_   dw  ada2            ;indirect pointer to operand 2 in absolute memory
                        sbi2_   dw  sba2            ;indirect pointer to complemented operand 2 (SBC)
                        adiy2_  dw  ada2-$ff        ;with offset for indirect indexed
                        sbiy2_  dw  sba2-$ff
                        zp_end
                            if (zp_end - zp_init) != (zp_bss_end - zp_bss)   
                                ;force assembler error if size is different   
                                ERROR ERROR ERROR   ;mismatch between bss and zeropage data
                            endif 
                        data_init
                        ex_and_ and #0              ;execute immediate opcodes
                                rts
                        ex_eor_ eor #0              ;execute immediate opcodes
                                rts
                        ex_ora_ ora #0              ;execute immediate opcodes
                                rts
                        ex_adc_ adc #0              ;execute immediate opcodes
                                rts
                        ex_sbc_ sbc #0              ;execute immediate opcodes
                                rts
                        ;zps    db  $80,1           ;additional shift patterns test zero result & flag
                        abs1_   db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
                        abs7f_  db  $7f             ;test pattern for compare
                        ;loads
                        fLDx_   db  fn,fn,0,fz              ;expected flags for load
                        ;shifts
                        rASL_                               ;expected result ASL & ROL -carry
                        rROL_   db  0,2,$86,$04,$82,0
                        rROLc_  db  1,3,$87,$05,$83,1       ;expected result ROL +carry
                        rLSR_                               ;expected result LSR & ROR -carry
                        rROR_   db  $40,0,$61,$41,$20,0
                        rRORc_  db  $c0,$80,$e1,$c1,$a0,$80 ;expected result ROR +carry
                        fASL_                               ;expected flags for shifts
                        fROL_   db  fzc,0,fnc,fc,fn,fz      ;no carry in
                        fROLc_  db  fc,0,fnc,fc,fn,0        ;carry in 
                        fLSR_
                        fROR_   db  0,fzc,fc,0,fc,fz        ;no carry in
                        fRORc_  db  fn,fnc,fnc,fn,fnc,fn    ;carry in
                        ;increments (decrements)
                        rINC_   db  $7f,$80,$ff,0,1         ;expected result for INC/DEC
                        fINC_   db  0,fn,fn,fz,0            ;expected flags for INC/DEC
                        ;logical memory operand
                        absOR_  db  0,$1f,$71,$80           ;test pattern for OR
                        absAN_  db  $0f,$ff,$7f,$80         ;test pattern for AND
                        absEO_  db  $ff,$0f,$8f,$8f         ;test pattern for EOR
                        ;logical accu operand
                        absORa_ db  0,$f1,$1f,0             ;test pattern for OR
                        absANa_ db  $f0,$ff,$ff,$ff         ;test pattern for AND
                        absEOa_ db  $ff,$f0,$f0,$0f         ;test pattern for EOR
                        ;logical results
                        absrlo_ db  0,$ff,$7f,$80
                        absflo_ db  fz,fn,0,fn
                        data_end
                            if (data_end - data_init) != (data_bss_end - data_bss)
                                ;force assembler error if size is different   
                                ERROR ERROR ERROR   ;mismatch between bss and data
                            endif 
                        
                        vec_init
                                dw  nmi_trap
                                dw  res_trap
                                dw  irq_trap
                        vec_bss equ $fffa
                            endif                   ;end of RAM init data
                            
                            ; PL removed vectors
                            ; if (load_data_direct = 1) & (ROM_vectors = 1)  
                            ;     org $fffa       ;vectors
                            ;     dw  nmi_trap
                            ;     dw  res_trap
                            ;     dw  irq_trap
                            ; endif
                        
38f5 =                          end start
                                    
No errors in pass 2.
Wrote binary from address $0000 through $3938.
Total size 14649 bytes.
Program start address is at $0400 (1024).
