AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    1
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

6111 lines read, no errors in pass 1.
                        ;
                        ; 6 5 0 2   F U N C T I O N A L   T E S T
                        ;
                        ; Copyright (C) 2012-2020  Klaus Dormann
                        ;
                        ; This program is free software: you can redistribute it and/or modify
                        ; it under the terms of the GNU General Public License as published by
                        ; the Free Software Foundation, either version 3 of the License, or
                        ; (at your option) any later version.
                        ;
                        ; This program is distributed in the hope that it will be useful,
                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of
                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        ; GNU General Public License for more details.
                        ;
                        ; You should have received a copy of the GNU General Public License
                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
                        
                        
                        ; This program is designed to test all opcodes of a 6502 emulator using all
                        ; addressing modes with focus on propper setting of the processor status
                        ; register bits.
                        ; 
                        ; version 05-jan-2020
                        ; contact info at http://2m5.de or email K@2m5.de
                        ;
                        ; assembled with AS65 written by Frank A. Kingswood
                        ; The assembler as65_142.zip can be obtained from my GitHub repository 
                        ; command line switches: -l -m -s2 -w -h0
                        ;                         |  |  |   |  no page headers in listing
                        ;                         |  |  |   wide listing (133 char/col)
                        ;                         |  |  write intel hex file instead of binary
                        ;                         |  expand macros in listing
                        ;                         generate pass2 listing
                        ;
                        ; No IO - should be run from a monitor with access to registers.
                        ; To run load intel hex image with a load command, than alter PC to 400 hex
                        ; (code_segment) and enter a go command.
                        ; Loop on program counter determines error or successful completion of test.
                        ; Check listing for relevant traps (jump/branch *).
                        ; Please note that in early tests some instructions will have to be used before
                        ; they are actually tested!
                        ;
                        ; RESET, NMI or IRQ should not occur and will be trapped if vectors are enabled.
                        ; Tests documented behavior of the original NMOS 6502 only! No unofficial
                        ; opcodes. Additional opcodes of newer versions of the CPU (65C02, 65816) will
                        ; not be tested. Decimal ops will only be tested with valid BCD operands and
                        ; N V Z flags will be ignored.
                        ;
                        ; Debugging hints:
                        ;     Most of the code is written sequentially. if you hit a trap, check the
                        ;   immediately preceeding code for the instruction to be tested. Results are
                        ;   tested first, flags are checked second by pushing them onto the stack and
                        ;   pulling them to the accumulator after the result was checked. The "real"
                        ;   flags are no longer valid for the tested instruction at this time!
                        ;     If the tested instruction was indexed, the relevant index (X or Y) must
                        ;   also be checked. Opposed to the flags, X and Y registers are still valid.
                        ;
                        ; versions:
                        ;   28-jul-2012  1st version distributed for testing
                        ;   29-jul-2012  fixed references to location 0, now #0
                        ;                added license - GPLv3
                        ;   30-jul-2012  added configuration options
                        ;   01-aug-2012  added trap macro to allow user to change error handling
                        ;   01-dec-2012  fixed trap in branch field must be a branch
                        ;   02-mar-2013  fixed PLA flags not tested
                        ;   19-jul-2013  allowed ROM vectors to be loaded when load_data_direct = 0
                        ;                added test sequence check to detect if tests jump their fence
                        ;   23-jul-2013  added RAM integrity check option
                        ;   16-aug-2013  added error report to standard output option
                        ;   13-dec-2014  added binary/decimal opcode table switch test
                        ;   14-dec-2014  improved relative address test
                        ;   23-aug-2015  added option to disable self modifying tests
                        ;   24-aug-2015  all self modifying immediate opcodes now execute in data RAM
                        ;                added small branch offset pretest
                        ;   21-oct-2015  added option to disable decimal mode ADC & SBC tests
                        ;   04-dec-2017  fixed BRK only tested with interrupts enabled
                        ;                added option to skip the remainder of a failing test
                        ;                in report.i65
                        ;   05-jan-2020  fixed shifts not testing zero result and flag when last 1-bit
                        ;                is shifted out
                        
                        ; C O N F I G U R A T I O N
                        
                        ;ROM_vectors writable (0=no, 1=yes)
                        ;if ROM vectors can not be used interrupts will not be trapped
                        ;as a consequence BRK can not be tested but will be emulated to test RTI
0000 =                  ROM_vectors = 0
                        
                        ;load_data_direct (0=move from code segment, 1=load directly)
                        ;loading directly is preferred but may not be supported by your platform
                        ;0 produces only consecutive object code, 1 is not suitable for a binary image
0001 =                  load_data_direct = 1
                        
                        ;I_flag behavior (0=force enabled, 1=force disabled, 2=prohibit change, 3=allow
                        ;change) 2 requires extra code and is not recommended. SEI & CLI can only be
                        ;tested if you allow changing the interrupt status (I_flag = 3)
0003 =                  I_flag = 3
                        
                        ;configure memory - try to stay away from memory used by the system
                        ;zero_page memory start address, $52 (82) consecutive Bytes required
                        ;                                add 2 if I_flag = 2
000a =                  zero_page = $a  
                        
                        ;data_segment memory start address, $7B (123) consecutive Bytes required
0200 =                  data_segment = $200  
                            if (data_segment & $ff) != 0
                                ERROR ERROR ERROR low byte of data_segment MUST be $00 !!
                            endif  
                        
                        ;code_segment memory start address, 13.1kB of consecutive space required
                        ;                                   add 2.5 kB if I_flag = 2
0400 =                  code_segment = $400  
                        
                        ;self modifying code may be disabled to allow running in ROM
                        ;0=part of the code is self modifying and must reside in RAM
                        ;1=tests disabled: branch range
0000 =                  disable_selfmod = 0
                        
                        ;report errors through I/O channel (0=use standard self trap loops, 1=include
                        ;report.i65 as I/O channel, add 3.5 kB)
0000 =                  report = 0
                        
                        ;RAM integrity test option. Checks for undesired RAM writes.
                        ;set lowest non RAM or RAM mirror address page (-1=disable, 0=64k, $40=16k)
                        ;leave disabled if a monitor, OS or background interrupt is allowed to alter RAM
ffff =                  ram_top = -1
                        
                        ;disable test decimal mode ADC & SBC, 0=enable, 1=disable,
                        ;2=disable including decimal flag in processor status
0002 =                  disable_decimal = 2
                        
                                noopt       ;do not take shortcuts
                        
                        ;macros for error & success traps to allow user modification
                        ;example:
                        ;trap    macro
                        ;        jsr my_error_handler
                        ;        endm
                        ;trap_eq macro
                        ;        bne skip\?
                        ;        trap           ;failed equal (zero)
                        ;skip\?
                        ;        endm
                        ;
                        ; my_error_handler should pop the calling address from the stack and report it.
                        ; putting larger portions of code (more than 3 bytes) inside the trap macro
                        ; may lead to branch range problems for some tests.
                            if report = 0
                        trap    macro
                                jmp *           ;failed anyway
                                endm
                        trap_eq macro
                                beq *           ;failed equal (zero)
                                endm
                        trap_ne macro
                                bne *           ;failed not equal (non zero)
                                endm
                        trap_cs macro
                                bcs *           ;failed carry set
                                endm
                        trap_cc macro
                                bcc *           ;failed carry clear
                                endm
                        trap_mi macro
                                bmi *           ;failed minus (bit 7 set)
                                endm
                        trap_pl macro
                                bpl *           ;failed plus (bit 7 clear)
                                endm
                        trap_vs macro
                                bvs *           ;failed overflow set
                                endm
                        trap_vc macro
                                bvc *           ;failed overflow clear
                                endm
                        ; please observe that during the test the stack gets invalidated
                        ; therefore a RTS inside the success macro is not possible
                        success macro
                                jmp *           ;test passed, no errors
                                endm
                            endif
                            if report = 1
                        trap    macro
                                jsr report_error
                                endm
                        trap_eq macro
                                bne skip\?
                                trap           ;failed equal (zero)
                        skip\?
                                endm
                        trap_ne macro
                                beq skip\?
                                trap            ;failed not equal (non zero)
                        skip\?
                                endm
                        trap_cs macro
                                bcc skip\?
                                trap            ;failed carry set
                        skip\?
                                endm
                        trap_cc macro
                                bcs skip\?
                                trap            ;failed carry clear
                        skip\?
                                endm
                        trap_mi macro
                                bpl skip\?
                                trap            ;failed minus (bit 7 set)
                        skip\?
                                endm
                        trap_pl macro
                                bmi skip\?
                                trap            ;failed plus (bit 7 clear)
                        skip\?
                                endm
                        trap_vs macro
                                bvc skip\?
                                trap            ;failed overflow set
                        skip\?
                                endm
                        trap_vc macro
                                bvs skip\?
                                trap            ;failed overflow clear
                        skip\?
                                endm
                        ; please observe that during the test the stack gets invalidated
                        ; therefore a RTS inside the success macro is not possible
                        success macro
                                jsr report_success
                                endm
                            endif
                        
                        
0001 =                  carry   equ %00000001   ;flag bits in status
0002 =                  zero    equ %00000010
0004 =                  intdis  equ %00000100
0008 =                  decmode equ %00001000
0010 =                  break   equ %00010000
0020 =                  reserv  equ %00100000
0040 =                  overfl  equ %01000000
0080 =                  minus   equ %10000000
                        
0001 =                  fc      equ carry
0002 =                  fz      equ zero
0003 =                  fzc     equ carry+zero
0040 =                  fv      equ overfl
0042 =                  fvz     equ overfl+zero
0080 =                  fn      equ minus
0081 =                  fnc     equ minus+carry
0082 =                  fnz     equ minus+zero
0083 =                  fnzc    equ minus+zero+carry
00c0 =                  fnv     equ minus+overfl
                        
0030 =                  fao     equ break+reserv    ;bits always on after PHP, BRK
0034 =                  fai     equ fao+intdis      ;+ forced interrupt disable
0038 =                  faod    equ fao+decmode     ;+ ignore decimal
003c =                  faid    equ fai+decmode     ;+ ignore decimal
00ff =                  m8      equ $ff             ;8 bit mask
00fb =                  m8i     equ $ff&~intdis     ;8 bit mask - interrupt disable
                        
                        ;macros to allow masking of status bits.
                        ;masking test of decimal bit
                        ;masking of interrupt enable/disable on load and compare
                        ;masking of always on bits after PHP or BRK (unused & break) on compare
                            if disable_decimal < 2
                                if I_flag = 0
                        load_flag   macro
                                    lda #\1&m8i         ;force enable interrupts (mask I)
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8i   ;I_flag is always enabled + always on bits
                                    endm
                        eor_flag    macro
                                    eor #(\1&m8i|fao)   ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 1
                        load_flag   macro
                                    lda #\1|intdis      ;force disable interrupts
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fai)&m8    ;I_flag is always disabled + always on bits
                                    endm
                        eor_flag    macro
                                    eor #(\1|fai)       ;invert expected flags + always on bits + I
                                    endm
                                endif
                                if I_flag = 2
                        load_flag   macro
                                    lda #\1
                                    ora flag_I_on       ;restore I-flag
                                    and flag_I_off
                                    endm
                        cmp_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    cmp #(\1|fao)&m8i   ;expected flags + always on bits, mask I
                                    endm
                        eor_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    eor #(\1&m8i|fao)   ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 3
                        load_flag   macro
                                    lda #\1             ;allow test to change I-flag (no mask)
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8    ;expected flags + always on bits
                                    endm
                        eor_flag    macro
                                    eor #\1|fao         ;invert expected flags + always on bits
                                    endm
                                endif
                            else
                                if I_flag = 0
                        load_flag   macro
                                    lda #\1&m8i         ;force enable interrupts (mask I)
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faod)&m8i  ;I_flag is always enabled + always on bits
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #(\1&m8i|faod)  ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 1
                        load_flag   macro
                                    lda #\1|intdis      ;force disable interrupts
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faid)&m8   ;I_flag is always disabled + always on bits
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #(\1|faid)      ;invert expected flags + always on bits + I
                                    endm
                                endif
                                if I_flag = 2
                        load_flag   macro
                                    lda #\1
                                    ora flag_I_on       ;restore I-flag
                                    and flag_I_off
                                    endm
                        cmp_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faod)&m8i  ;expected flags + always on bits, mask I
                                    endm
                        eor_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #(\1&m8i|faod)  ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 3
                        load_flag   macro
                                    lda #\1             ;allow test to change I-flag (no mask)
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faod)&m8   ;expected flags + always on bits
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #\1|faod        ;invert expected flags + always on bits
                                    endm
                                endif
                            endif
                        
                        ;macros to set (register|memory|zeropage) & status
                        set_stat    macro       ;setting flags in the processor status register
                                    load_flag \1
                                    pha         ;use stack to load status
                                    plp
                                    endm
                        
                        set_a       macro       ;precharging accu & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda #\1     ;precharge accu
                                    plp
                                    endm
                        
                        set_x       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldx #\1     ;precharge index x
                                    plp
                                    endm
                        
                        set_y       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldy #\1     ;precharge index y
                                    plp
                                    endm
                        
                        set_ax      macro       ;precharging indexed accu & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;precharge accu
                                    plp
                                    endm
                        
                        set_ay      macro       ;precharging indexed accu & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,y    ;precharge accu
                                    plp
                                    endm
                        
                        set_z       macro       ;precharging indexed zp & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to zeropage
                                    sta zpt
                                    plp
                                    endm
                        
                        set_zx      macro       ;precharging zp,x & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed zeropage
                                    sta zpt,x
                                    plp
                                    endm
                        
                        set_abs     macro       ;precharging indexed memory & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to memory
                                    sta abst
                                    plp
                                    endm
                        
                        set_absx    macro       ;precharging abs,x & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed memory
                                    sta abst,x
                                    plp
                                    endm
                        
                        ;macros to test (register|memory|zeropage) & status & (mask)
                        tst_stat    macro       ;testing flags in the processor status register
                                    php         ;save status
                                    pla         ;use stack to retrieve status
                                    pha
                                    cmp_flag \1
                                    trap_ne
                                    plp         ;restore status
                                    endm
                                    
                        tst_a       macro       ;testing result in accu & flags
                                    php         ;save flags
                                    cmp #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_x       macro       ;testing result in x index & flags
                                    php         ;save flags
                                    cpx #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_y       macro       ;testing result in y index & flags
                                    php         ;save flags
                                    cpy #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_ax      macro       ;indexed testing result in accu & flags
                                    php         ;save flags
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne     ;
                                    endm
                        
                        tst_ay      macro       ;indexed testing result in accu & flags
                                    php         ;save flags
                                    cmp \1,y    ;test result
                                    trap_ne     ;
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,y    ;test flags
                                    trap_ne
                                    endm
                                
                        tst_z       macro       ;indexed testing result in zp & flags
                                    php         ;save flags
                                    lda zpt
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_zx      macro       ;testing result in zp,x & flags
                                    php         ;save flags
                                    lda zpt,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_abs     macro       ;indexed testing result in memory & flags
                                    php         ;save flags
                                    lda abst
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_absx    macro       ;testing result in abs,x & flags
                                    php         ;save flags
                                    lda abst,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                                    
                        ; RAM integrity test
                        ;   verifies that none of the previous tests has altered RAM outside of the
                        ;   designated write areas.
                        ;   uses zpt word as indirect pointer, zpt+2 word as checksum
                                if ram_top > -1
                        check_ram   macro 
                                    cld
                                    lda #0
                                    sta zpt         ;set low byte of indirect pointer
                                    sta zpt+3       ;checksum high byte
                                  if disable_selfmod = 0
                                    sta range_adr   ;reset self modifying code
                                  endif
                                    clc
                                    ldx #zp_bss-zero_page ;zeropage - write test area
                        ccs3\?      adc zero_page,x
                                    bcc ccs2\?
                                    inc zpt+3       ;carry to high byte
                                    clc
                        ccs2\?      inx
                                    bne ccs3\?
                                    ldx #hi(abs1)   ;set high byte of indirect pointer
                                    stx zpt+1
                                    ldy #lo(abs1)   ;data after write & execute test area
                        ccs5\?      adc (zpt),y
                                    bcc ccs4\?
                                    inc zpt+3       ;carry to high byte
                                    clc
                        ccs4\?      iny
                                    bne ccs5\?
                                    inx             ;advance RAM high address
                                    stx zpt+1
                                    cpx #ram_top
                                    bne ccs5\?
                                    sta zpt+2       ;checksum low is
                                    cmp ram_chksm   ;checksum low expected
                                    trap_ne         ;checksum mismatch
                                    lda zpt+3       ;checksum high is
                                    cmp ram_chksm+1 ;checksum high expected
                                    trap_ne         ;checksum mismatch
                                    endm            
                                else
                        check_ram   macro
                                    ;RAM check disabled - RAM size not set
                                    endm
                                endif
                        
                        next_test   macro           ;make sure, tests don't jump the fence
                                    lda test_case   ;previous test
                                    cmp #test_num
                                    trap_ne         ;test is out of sequence
                        test_num = test_num + 1
                                    lda #test_num   ;*** next tests' number
                                    sta test_case
                                    ;check_ram       ;uncomment to find altered RAM after each test
                                    endm
                        
                            if load_data_direct = 1
                                data
                            else
                                bss                 ;uninitialized segment, copy of data at end of code!
                            endif
                        ;        org zero_page
0000 =                           org 0               ;edited to provide binaries loading from 0
0000 : 4c0004                    jmp $400
0003 : 00000000000000            ds  zero_page-3
                        ;break test interrupt save
000a : 00               irq_a   ds  1               ;a register
000b : 00               irq_x   ds  1               ;x register
                            if I_flag = 2
                        ;masking for I bit in status
                        flag_I_on   ds  1           ;or mask to load flags   
                        flag_I_off  ds  1           ;and mask to load flags
                            endif
000c :                  zpt                         ;6 bytes store/modify test area
                        ;add/subtract operand generation and result/flag prediction
000c : 00               adfc    ds  1               ;carry flag before op
000d : 00               ad1     ds  1               ;operand 1 - accumulator
000e : 00               ad2     ds  1               ;operand 2 - memory / immediate
000f : 00               adrl    ds  1               ;expected result bits 0-7
0010 : 00               adrh    ds  1               ;expected result bit 8 (carry)
0011 : 00               adrf    ds  1               ;expected flags NV0000ZC (only binary mode)
0012 : 00               sb2     ds  1               ;operand 2 complemented for subtract
0013 :                  zp_bss
0013 : 8001             zps     db  $80,1           ;additional shift pattern to test zero result & flag
0015 : c3824100         zp1     db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
0019 : 7f               zp7f    db  $7f             ;test pattern for compare  
                        ;logical zeropage operands
001a : 001f7180         zpOR    db  0,$1f,$71,$80   ;test pattern for OR
001e : 0fff7f80         zpAN    db  $0f,$ff,$7f,$80 ;test pattern for AND
0022 : ff0f8f8f         zpEO    db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
0026 : 1802             ind1    dw  abs1            ;indirect pointer to pattern in absolute memory
0028 : 1902                     dw  abs1+1
002a : 1a02                     dw  abs1+2
002c : 1b02                     dw  abs1+3
002e : 1c02                     dw  abs7f
0030 : 2001             inw1    dw  abs1-$f8        ;indirect pointer for wrap-test pattern
0032 : 0302             indt    dw  abst            ;indirect pointer to store area in absolute memory
0034 : 0402                     dw  abst+1
0036 : 0502                     dw  abst+2
0038 : 0602                     dw  abst+3
003a : 0b01             inwt    dw  abst-$f8        ;indirect pointer for wrap-test store
003c : 5f02             indAN   dw  absAN           ;indirect pointer to AND pattern in absolute memory
003e : 6002                     dw  absAN+1
0040 : 6102                     dw  absAN+2
0042 : 6202                     dw  absAN+3
0044 : 6302             indEO   dw  absEO           ;indirect pointer to EOR pattern in absolute memory
0046 : 6402                     dw  absEO+1
0048 : 6502                     dw  absEO+2
004a : 6602                     dw  absEO+3
004c : 5b02             indOR   dw  absOR           ;indirect pointer to OR pattern in absolute memory
004e : 5c02                     dw  absOR+1
0050 : 5d02                     dw  absOR+2
0052 : 5e02                     dw  absOR+3
                        ;add/subtract indirect pointers
0054 : 0302             adi2    dw  ada2            ;indirect pointer to operand 2 in absolute memory
0056 : 0402             sbi2    dw  sba2            ;indirect pointer to complemented operand 2 (SBC)
0058 : 0401             adiy2   dw  ada2-$ff        ;with offset for indirect indexed
005a : 0501             sbiy2   dw  sba2-$ff
005c :                  zp_bss_end
                           
0200 =                          org data_segment
0200 : 00               test_case   ds  1           ;current test number
0201 : 0000             ram_chksm   ds  2           ;checksum for RAM integrity test
                        ;add/subtract operand copy - abs tests write area
0203 :                  abst                        ;6 bytes store/modify test area
0203 : 00               ada2    ds  1               ;operand 2
0204 : 00               sba2    ds  1               ;operand 2 complemented for subtract
0205 : 00000000                 ds  4               ;fill remaining bytes
0209 :                  data_bss
                            if load_data_direct = 1
0209 : 2900             ex_andi and #0              ;execute immediate opcodes
020b : 60                       rts
020c : 4900             ex_eori eor #0              ;execute immediate opcodes
020e : 60                       rts
020f : 0900             ex_orai ora #0              ;execute immediate opcodes
0211 : 60                       rts
0212 : 6900             ex_adci adc #0              ;execute immediate opcodes
0214 : 60                       rts
0215 : e900             ex_sbci sbc #0              ;execute immediate opcodes
0217 : 60                       rts
                            else
                        ex_andi ds  3
                        ex_eori ds  3
                        ex_orai ds  3
                        ex_adci ds  3
                        ex_sbci ds  3
                            endif
                        ;zps    db  $80,1           ;additional shift patterns test zero result & flag
0218 : c3824100         abs1    db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
021c : 7f               abs7f   db  $7f             ;test pattern for compare
                        ;loads
021d : 80800002         fLDx    db  fn,fn,0,fz              ;expected flags for load
                        ;shifts
0221 :                  rASL                                ;expected result ASL & ROL -carry
0221 : 000286048200     rROL    db  0,2,$86,$04,$82,0
0227 : 010387058301     rROLc   db  1,3,$87,$05,$83,1       ;expected result ROL +carry
022d :                  rLSR                                ;expected result LSR & ROR -carry
022d : 400061412000     rROR    db  $40,0,$61,$41,$20,0
0233 : c080e1c1a080     rRORc   db  $c0,$80,$e1,$c1,$a0,$80 ;expected result ROR +carry
0239 :                  fASL                                ;expected flags for shifts
0239 : 030081018002     fROL    db  fzc,0,fnc,fc,fn,fz      ;no carry in
023f : 010081018000     fROLc   db  fc,0,fnc,fc,fn,0        ;carry in 
0245 :                  fLSR 
0245 : 000301000102     fROR    db  0,fzc,fc,0,fc,fz        ;no carry in
024b : 808181808180     fRORc   db  fn,fnc,fnc,fn,fnc,fn    ;carry in
                        ;increments (decrements)
0251 : 7f80ff0001       rINC    db  $7f,$80,$ff,0,1         ;expected result for INC/DEC
0256 : 0080800200       fINC    db  0,fn,fn,fz,0            ;expected flags for INC/DEC
                        ;logical memory operand
025b : 001f7180         absOR   db  0,$1f,$71,$80           ;test pattern for OR
025f : 0fff7f80         absAN   db  $0f,$ff,$7f,$80         ;test pattern for AND
0263 : ff0f8f8f         absEO   db  $ff,$0f,$8f,$8f         ;test pattern for EOR
                        ;logical accu operand
0267 : 00f11f00         absORa  db  0,$f1,$1f,0             ;test pattern for OR
026b : f0ffffff         absANa  db  $f0,$ff,$ff,$ff         ;test pattern for AND
026f : fff0f00f         absEOa  db  $ff,$f0,$f0,$0f         ;test pattern for EOR
                        ;logical results
0273 : 00ff7f80         absrlo  db  0,$ff,$7f,$80
0277 : 02800080         absflo  db  fz,fn,0,fn
027b :                  data_bss_end
                        
                        
                                code
0400 =                          org code_segment
0400 : d8               start   cld
0401 : a2ff                     ldx #$ff
0403 : 9a                       txs
0404 : a900                     lda #0          ;*** test 0 = initialize
0406 : 8d0002                   sta test_case
0000 =                  test_num = 0
                        
                        ;stop interrupts before initializing BSS
                            if I_flag = 1
                                sei
                            endif
                            
                        ;initialize I/O for report channel
                            if report = 1
                                jsr report_init
                            endif
                            
                        ;pretest small branch offset
0409 : a205                     ldx #5
040b : 4c3304                   jmp psb_test
040e :                  psb_bwok
040e : a005                     ldy #5
0410 : d008                     bne psb_forw
                                trap        ;branch should be taken
0412 : 4c1204          >        jmp *           ;failed anyway
                        
0415 : 88                       dey         ;forward landing zone
0416 : 88                       dey
0417 : 88                       dey
0418 : 88                       dey
0419 : 88                       dey
041a :                  psb_forw
041a : 88                       dey
041b : 88                       dey
041c : 88                       dey
041d : 88                       dey
041e : 88                       dey
041f : f017                     beq psb_fwok
                                trap        ;forward offset
0421 : 4c2104          >        jmp *           ;failed anyway
                        
                        
0424 : ca                       dex         ;backward landing zone
0425 : ca                       dex
0426 : ca                       dex
0427 : ca                       dex
0428 : ca                       dex
0429 :                  psb_back
0429 : ca                       dex
042a : ca                       dex
042b : ca                       dex
042c : ca                       dex
042d : ca                       dex
042e : f0de                     beq psb_bwok
                                trap        ;backward offset
0430 : 4c3004          >        jmp *           ;failed anyway
                        
0433 :                  psb_test
0433 : d0f4                     bne psb_back
                                trap        ;branch should be taken
0435 : 4c3504          >        jmp *           ;failed anyway
                        
0438 :                  psb_fwok
                                
                        ;initialize BSS segment
                            if load_data_direct != 1
                                ldx #zp_end-zp_init-1
                        ld_zp   lda zp_init,x
                                sta zp_bss,x
                                dex
                                bpl ld_zp
                                ldx #data_end-data_init-1
                        ld_data lda data_init,x
                                sta data_bss,x
                                dex
                                bpl ld_data
                              if ROM_vectors = 1
                                ldx #5
                        ld_vect lda vec_init,x
                                sta vec_bss,x
                                dex
                                bpl ld_vect
                              endif
                            endif
                        
                        ;retain status of interrupt flag
                            if I_flag = 2
                                php
                                pla
                                and #4          ;isolate flag
                                sta flag_I_on   ;or mask
                                eor #lo(~4)     ;reverse
                                sta flag_I_off  ;and mask
                            endif
                                
                        ;generate checksum for RAM integrity test
                            if ram_top > -1
                                lda #0 
                                sta zpt         ;set low byte of indirect pointer
                                sta ram_chksm+1 ;checksum high byte
                              if disable_selfmod = 0
                                sta range_adr   ;reset self modifying code
                              endif
                                clc
                                ldx #zp_bss-zero_page ;zeropage - write test area
                        gcs3    adc zero_page,x
                                bcc gcs2
                                inc ram_chksm+1 ;carry to high byte
                                clc
                        gcs2    inx
                                bne gcs3
                                ldx #hi(abs1)   ;set high byte of indirect pointer
                                stx zpt+1
                                ldy #lo(abs1)   ;data after write & execute test area
                        gcs5    adc (zpt),y
                                bcc gcs4
                                inc ram_chksm+1 ;carry to high byte
                                clc
                        gcs4    iny
                                bne gcs5
                                inx             ;advance RAM high address
                                stx zpt+1
                                cpx #ram_top
                                bne gcs5
                                sta ram_chksm   ;checksum complete
                            endif
                                next_test            
0438 : ad0002          >            lda test_case   ;previous test
043b : c900            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
043d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0001 =                 >test_num = test_num + 1
043f : a901            >            lda #test_num   ;*** next tests' number
0441 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                            if disable_selfmod = 0
                        ;testing relative addressing with BEQ
0444 : a0fe                     ldy #$fe        ;testing maximum range, not -1/-2 (invalid/self adr)
0446 :                  range_loop
0446 : 88                       dey             ;next relative address
0447 : 98                       tya
0448 : aa                       tax             ;precharge count to end of loop
0449 : 1008                     bpl range_fw    ;calculate relative address
044b : 18                       clc             ;avoid branch self or to relative address of branch
044c : 6902                     adc #2
044e : ea                       nop             ;offset landing zone - tolerate +/-5 offset to branch
044f : ea                       nop
0450 : ea                       nop
0451 : ea                       nop
0452 : ea                       nop
0453 :                  range_fw
0453 : ea                       nop
0454 : ea                       nop
0455 : ea                       nop
0456 : ea                       nop
0457 : ea                       nop
0458 : 497f                     eor #$7f        ;complement except sign
045a : 8de604                   sta range_adr   ;load into test target
045d : a900                     lda #0          ;should set zero flag in status register
045f : 4ce504                   jmp range_op
                                
0462 : ca                       dex             ; offset landing zone - backward branch too far
0463 : ca                       dex
0464 : ca                       dex
0465 : ca                       dex
0466 : ca                       dex
                                ;relative address target field with branch under test in the middle
0467 : ca                       dex             ;-128 - max backward
0468 : ca                       dex
0469 : ca                       dex
046a : ca                       dex
046b : ca                       dex
046c : ca                       dex
046d : ca                       dex
046e : ca                       dex
046f : ca                       dex             ;-120
0470 : ca                       dex
0471 : ca                       dex
0472 : ca                       dex
0473 : ca                       dex
0474 : ca                       dex
0475 : ca                       dex
0476 : ca                       dex
0477 : ca                       dex
0478 : ca                       dex
0479 : ca                       dex             ;-110
047a : ca                       dex
047b : ca                       dex
047c : ca                       dex
047d : ca                       dex
047e : ca                       dex
047f : ca                       dex
0480 : ca                       dex
0481 : ca                       dex
0482 : ca                       dex
0483 : ca                       dex             ;-100
0484 : ca                       dex
0485 : ca                       dex
0486 : ca                       dex
0487 : ca                       dex
0488 : ca                       dex
0489 : ca                       dex
048a : ca                       dex
048b : ca                       dex
048c : ca                       dex
048d : ca                       dex             ;-90
048e : ca                       dex
048f : ca                       dex
0490 : ca                       dex
0491 : ca                       dex
0492 : ca                       dex
0493 : ca                       dex
0494 : ca                       dex
0495 : ca                       dex
0496 : ca                       dex
0497 : ca                       dex             ;-80
0498 : ca                       dex
0499 : ca                       dex
049a : ca                       dex
049b : ca                       dex
049c : ca                       dex
049d : ca                       dex
049e : ca                       dex
049f : ca                       dex
04a0 : ca                       dex
04a1 : ca                       dex             ;-70
04a2 : ca                       dex
04a3 : ca                       dex
04a4 : ca                       dex
04a5 : ca                       dex
04a6 : ca                       dex
04a7 : ca                       dex
04a8 : ca                       dex
04a9 : ca                       dex
04aa : ca                       dex
04ab : ca                       dex             ;-60
04ac : ca                       dex
04ad : ca                       dex
04ae : ca                       dex
04af : ca                       dex
04b0 : ca                       dex
04b1 : ca                       dex
04b2 : ca                       dex
04b3 : ca                       dex
04b4 : ca                       dex
04b5 : ca                       dex             ;-50
04b6 : ca                       dex
04b7 : ca                       dex
04b8 : ca                       dex
04b9 : ca                       dex
04ba : ca                       dex
04bb : ca                       dex
04bc : ca                       dex
04bd : ca                       dex
04be : ca                       dex
04bf : ca                       dex             ;-40
04c0 : ca                       dex
04c1 : ca                       dex
04c2 : ca                       dex
04c3 : ca                       dex
04c4 : ca                       dex
04c5 : ca                       dex
04c6 : ca                       dex
04c7 : ca                       dex
04c8 : ca                       dex
04c9 : ca                       dex             ;-30
04ca : ca                       dex
04cb : ca                       dex
04cc : ca                       dex
04cd : ca                       dex
04ce : ca                       dex
04cf : ca                       dex
04d0 : ca                       dex
04d1 : ca                       dex
04d2 : ca                       dex
04d3 : ca                       dex             ;-20
04d4 : ca                       dex
04d5 : ca                       dex
04d6 : ca                       dex
04d7 : ca                       dex
04d8 : ca                       dex
04d9 : ca                       dex
04da : ca                       dex
04db : ca                       dex
04dc : ca                       dex
04dd : ca                       dex             ;-10
04de : ca                       dex
04df : ca                       dex
04e0 : ca                       dex
04e1 : ca                       dex
04e2 : ca                       dex
04e3 : ca                       dex
04e4 : ca                       dex             ;-3
04e5 :                  range_op                ;test target with zero flag=0, z=1 if previous dex
04e6 =                  range_adr   = *+1       ;modifiable relative address
04e5 : f03e                     beq *+64        ;+64 if called without modification
04e7 : ca                       dex             ;+0
04e8 : ca                       dex
04e9 : ca                       dex
04ea : ca                       dex
04eb : ca                       dex
04ec : ca                       dex
04ed : ca                       dex
04ee : ca                       dex
04ef : ca                       dex
04f0 : ca                       dex
04f1 : ca                       dex             ;+10
04f2 : ca                       dex
04f3 : ca                       dex
04f4 : ca                       dex
04f5 : ca                       dex
04f6 : ca                       dex
04f7 : ca                       dex
04f8 : ca                       dex
04f9 : ca                       dex
04fa : ca                       dex
04fb : ca                       dex             ;+20
04fc : ca                       dex
04fd : ca                       dex
04fe : ca                       dex
04ff : ca                       dex
0500 : ca                       dex
0501 : ca                       dex
0502 : ca                       dex
0503 : ca                       dex
0504 : ca                       dex
0505 : ca                       dex             ;+30
0506 : ca                       dex
0507 : ca                       dex
0508 : ca                       dex
0509 : ca                       dex
050a : ca                       dex
050b : ca                       dex
050c : ca                       dex
050d : ca                       dex
050e : ca                       dex
050f : ca                       dex             ;+40
0510 : ca                       dex
0511 : ca                       dex
0512 : ca                       dex
0513 : ca                       dex
0514 : ca                       dex
0515 : ca                       dex
0516 : ca                       dex
0517 : ca                       dex
0518 : ca                       dex
0519 : ca                       dex             ;+50
051a : ca                       dex
051b : ca                       dex
051c : ca                       dex
051d : ca                       dex
051e : ca                       dex
051f : ca                       dex
0520 : ca                       dex
0521 : ca                       dex
0522 : ca                       dex
0523 : ca                       dex             ;+60
0524 : ca                       dex
0525 : ca                       dex
0526 : ca                       dex
0527 : ca                       dex
0528 : ca                       dex
0529 : ca                       dex
052a : ca                       dex
052b : ca                       dex
052c : ca                       dex
052d : ca                       dex             ;+70
052e : ca                       dex
052f : ca                       dex
0530 : ca                       dex
0531 : ca                       dex
0532 : ca                       dex
0533 : ca                       dex
0534 : ca                       dex
0535 : ca                       dex
0536 : ca                       dex
0537 : ca                       dex             ;+80
0538 : ca                       dex
0539 : ca                       dex
053a : ca                       dex
053b : ca                       dex
053c : ca                       dex
053d : ca                       dex
053e : ca                       dex
053f : ca                       dex
0540 : ca                       dex
0541 : ca                       dex             ;+90
0542 : ca                       dex
0543 : ca                       dex
0544 : ca                       dex
0545 : ca                       dex
0546 : ca                       dex
0547 : ca                       dex
0548 : ca                       dex
0549 : ca                       dex
054a : ca                       dex
054b : ca                       dex             ;+100
054c : ca                       dex
054d : ca                       dex
054e : ca                       dex
054f : ca                       dex
0550 : ca                       dex
0551 : ca                       dex
0552 : ca                       dex
0553 : ca                       dex
0554 : ca                       dex
0555 : ca                       dex             ;+110
0556 : ca                       dex
0557 : ca                       dex
0558 : ca                       dex
0559 : ca                       dex
055a : ca                       dex
055b : ca                       dex
055c : ca                       dex
055d : ca                       dex
055e : ca                       dex
055f : ca                       dex             ;+120
0560 : ca                       dex
0561 : ca                       dex
0562 : ca                       dex
0563 : ca                       dex
0564 : ca                       dex
0565 : ca                       dex
0566 : ea                       nop             ;offset landing zone - forward branch too far
0567 : ea                       nop
0568 : ea                       nop
0569 : ea                       nop
056a : ea                       nop
056b : f008                     beq range_ok    ;+127 - max forward
                                trap            ; bad range
056d : 4c6d05          >        jmp *           ;failed anyway
                        
0570 : ea                       nop             ;offset landing zone - tolerate +/-5 offset to branch
0571 : ea                       nop
0572 : ea                       nop
0573 : ea                       nop
0574 : ea                       nop
0575 :                  range_ok
0575 : ea                       nop
0576 : ea                       nop
0577 : ea                       nop
0578 : ea                       nop
0579 : ea                       nop
057a : c000                     cpy #0
057c : f003                     beq range_end   
057e : 4c4604                   jmp range_loop
0581 :                  range_end               ;range test successful
                            endif
                                next_test
0581 : ad0002          >            lda test_case   ;previous test
0584 : c901            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0586 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0002 =                 >test_num = test_num + 1
0588 : a902            >            lda #test_num   ;*** next tests' number
058a : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ;partial test BNE & CMP, CPX, CPY immediate
058d : c001                     cpy #1          ;testing BNE true
058f : d003                     bne test_bne
                                trap 
0591 : 4c9105          >        jmp *           ;failed anyway
                        
0594 :                  test_bne
0594 : a900                     lda #0 
0596 : c900                     cmp #0          ;test compare immediate 
                                trap_ne
0598 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                trap_cc
059a : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_mi
059c : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
059e : c901                     cmp #1
                                trap_eq 
05a0 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_cs
05a2 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_pl
05a4 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
05a6 : aa                       tax 
05a7 : e000                     cpx #0          ;test compare x immediate
                                trap_ne
05a9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                trap_cc
05ab : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_mi
05ad : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
05af : e001                     cpx #1
                                trap_eq 
05b1 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_cs
05b3 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_pl
05b5 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
05b7 : a8                       tay 
05b8 : c000                     cpy #0          ;test compare y immediate
                                trap_ne
05ba : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                trap_cc
05bc : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_mi
05be : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
05c0 : c001                     cpy #1
                                trap_eq 
05c2 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_cs
05c4 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_pl
05c6 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                next_test
05c8 : ad0002          >            lda test_case   ;previous test
05cb : c902            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
05cd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0003 =                 >test_num = test_num + 1
05cf : a903            >            lda #test_num   ;*** next tests' number
05d1 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        ;testing stack operations PHA PHP PLA PLP
                                    
05d4 : a2ff                     ldx #$ff        ;initialize stack
05d6 : 9a                       txs
05d7 : a955                     lda #$55
05d9 : 48                       pha
05da : a9aa                     lda #$aa
05dc : 48                       pha
05dd : cdfe01                   cmp $1fe        ;on stack ?
                                trap_ne
05e0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
05e2 : ba                       tsx
05e3 : 8a                       txa             ;overwrite accu
05e4 : c9fd                     cmp #$fd        ;sp decremented?
                                trap_ne
05e6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
05e8 : 68                       pla
05e9 : c9aa                     cmp #$aa        ;successful retreived from stack?
                                trap_ne
05eb : d0fe            >        bne *           ;failed not equal (non zero)
                        
05ed : 68                       pla
05ee : c955                     cmp #$55
                                trap_ne
05f0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
05f2 : cdff01                   cmp $1ff        ;remains on stack?
                                trap_ne
05f5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
05f7 : ba                       tsx
05f8 : e0ff                     cpx #$ff        ;sp incremented?
                                trap_ne
05fa : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
05fc : ad0002          >            lda test_case   ;previous test
05ff : c903            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0601 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0004 =                 >test_num = test_num + 1
0603 : a904            >            lda #test_num   ;*** next tests' number
0605 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ;testing branch decisions BPL BMI BVC BVS BCC BCS BNE BEQ
                                set_stat $ff    ;all on
                       >            load_flag $ff    
0608 : a9ff            >            lda #$ff                 ;allow test to change I-flag (no mask)
                       >
060a : 48              >            pha         ;use stack to load status
060b : 28              >            plp
                        
060c : 101a                     bpl nbr1        ;branches should not be taken
060e : 501b                     bvc nbr2
0610 : 901c                     bcc nbr3
0612 : d01d                     bne nbr4
0614 : 3003                     bmi br1         ;branches should be taken
                                trap 
0616 : 4c1606          >        jmp *           ;failed anyway
                        
0619 : 7003             br1     bvs br2
                                trap 
061b : 4c1b06          >        jmp *           ;failed anyway
                        
061e : b003             br2     bcs br3
                                trap 
0620 : 4c2006          >        jmp *           ;failed anyway
                        
0623 : f00f             br3     beq br4
                                trap 
0625 : 4c2506          >        jmp *           ;failed anyway
                        
0628 :                  nbr1
                                trap            ;previous bpl taken 
0628 : 4c2806          >        jmp *           ;failed anyway
                        
062b :                  nbr2
                                trap            ;previous bvc taken
062b : 4c2b06          >        jmp *           ;failed anyway
                        
062e :                  nbr3
                                trap            ;previous bcc taken
062e : 4c2e06          >        jmp *           ;failed anyway
                        
0631 :                  nbr4
                                trap            ;previous bne taken
0631 : 4c3106          >        jmp *           ;failed anyway
                        
0634 : 08               br4     php
0635 : ba                       tsx
0636 : e0fe                     cpx #$fe        ;sp after php?
                                trap_ne
0638 : d0fe            >        bne *           ;failed not equal (non zero)
                        
063a : 68                       pla
                                cmp_flag $ff    ;returned all flags on?
063b : 0908            >            ora #decmode        ;ignore decimal mode bit
063d : c9ff            >            cmp #($ff    |faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
063f : d0fe            >        bne *           ;failed not equal (non zero)
                        
0641 : ba                       tsx
0642 : e0ff                     cpx #$ff        ;sp after php?
                                trap_ne
0644 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0      ;all off
                       >            load_flag 0      
0646 : a900            >            lda #0                   ;allow test to change I-flag (no mask)
                       >
0648 : 48              >            pha         ;use stack to load status
0649 : 28              >            plp
                        
064a : 301a                     bmi nbr11       ;branches should not be taken
064c : 701b                     bvs nbr12
064e : b01c                     bcs nbr13
0650 : f01d                     beq nbr14
0652 : 1003                     bpl br11        ;branches should be taken
                                trap 
0654 : 4c5406          >        jmp *           ;failed anyway
                        
0657 : 5003             br11    bvc br12
                                trap 
0659 : 4c5906          >        jmp *           ;failed anyway
                        
065c : 9003             br12    bcc br13
                                trap 
065e : 4c5e06          >        jmp *           ;failed anyway
                        
0661 : d00f             br13    bne br14
                                trap 
0663 : 4c6306          >        jmp *           ;failed anyway
                        
0666 :                  nbr11
                                trap            ;previous bmi taken 
0666 : 4c6606          >        jmp *           ;failed anyway
                        
0669 :                  nbr12
                                trap            ;previous bvs taken 
0669 : 4c6906          >        jmp *           ;failed anyway
                        
066c :                  nbr13
                                trap            ;previous bcs taken 
066c : 4c6c06          >        jmp *           ;failed anyway
                        
066f :                  nbr14
                                trap            ;previous beq taken 
066f : 4c6f06          >        jmp *           ;failed anyway
                        
0672 : 08               br14    php
0673 : 68                       pla
                                cmp_flag 0      ;flags off except break (pushed by sw) + reserved?
0674 : 0908            >            ora #decmode        ;ignore decimal mode bit
0676 : c938            >            cmp #(0      |faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0678 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                ;crosscheck flags
                                set_stat zero
                       >            load_flag zero
067a : a902            >            lda #zero             ;allow test to change I-flag (no mask)
                       >
067c : 48              >            pha         ;use stack to load status
067d : 28              >            plp
                        
067e : d002                     bne brzs1
0680 : f003                     beq brzs2
0682 :                  brzs1
                                trap            ;branch zero/non zero
0682 : 4c8206          >        jmp *           ;failed anyway
                        
0685 : b002             brzs2   bcs brzs3
0687 : 9003                     bcc brzs4
0689 :                  brzs3
                                trap            ;branch carry/no carry
0689 : 4c8906          >        jmp *           ;failed anyway
                        
068c : 3002             brzs4   bmi brzs5
068e : 1003                     bpl brzs6
0690 :                  brzs5
                                trap            ;branch minus/plus
0690 : 4c9006          >        jmp *           ;failed anyway
                        
0693 : 7002             brzs6   bvs brzs7
0695 : 5003                     bvc brzs8
0697 :                  brzs7
                                trap            ;branch overflow/no overflow
0697 : 4c9706          >        jmp *           ;failed anyway
                        
069a :                  brzs8
                                set_stat carry
                       >            load_flag carry
069a : a901            >            lda #carry             ;allow test to change I-flag (no mask)
                       >
069c : 48              >            pha         ;use stack to load status
069d : 28              >            plp
                        
069e : f002                     beq brcs1
06a0 : d003                     bne brcs2
06a2 :                  brcs1
                                trap            ;branch zero/non zero
06a2 : 4ca206          >        jmp *           ;failed anyway
                        
06a5 : 9002             brcs2   bcc brcs3
06a7 : b003                     bcs brcs4
06a9 :                  brcs3
                                trap            ;branch carry/no carry
06a9 : 4ca906          >        jmp *           ;failed anyway
                        
06ac : 3002             brcs4   bmi brcs5
06ae : 1003                     bpl brcs6
06b0 :                  brcs5
                                trap            ;branch minus/plus
06b0 : 4cb006          >        jmp *           ;failed anyway
                        
06b3 : 7002             brcs6   bvs brcs7
06b5 : 5003                     bvc brcs8
06b7 :                  brcs7
                                trap            ;branch overflow/no overflow
06b7 : 4cb706          >        jmp *           ;failed anyway
                        
                        
06ba :                  brcs8
                                set_stat minus
                       >            load_flag minus
06ba : a980            >            lda #minus             ;allow test to change I-flag (no mask)
                       >
06bc : 48              >            pha         ;use stack to load status
06bd : 28              >            plp
                        
06be : f002                     beq brmi1
06c0 : d003                     bne brmi2
06c2 :                  brmi1
                                trap            ;branch zero/non zero
06c2 : 4cc206          >        jmp *           ;failed anyway
                        
06c5 : b002             brmi2   bcs brmi3
06c7 : 9003                     bcc brmi4
06c9 :                  brmi3
                                trap            ;branch carry/no carry
06c9 : 4cc906          >        jmp *           ;failed anyway
                        
06cc : 1002             brmi4   bpl brmi5
06ce : 3003                     bmi brmi6
06d0 :                  brmi5
                                trap            ;branch minus/plus
06d0 : 4cd006          >        jmp *           ;failed anyway
                        
06d3 : 7002             brmi6   bvs brmi7
06d5 : 5003                     bvc brmi8
06d7 :                  brmi7
                                trap            ;branch overflow/no overflow
06d7 : 4cd706          >        jmp *           ;failed anyway
                        
06da :                  brmi8
                                set_stat overfl
                       >            load_flag overfl
06da : a940            >            lda #overfl             ;allow test to change I-flag (no mask)
                       >
06dc : 48              >            pha         ;use stack to load status
06dd : 28              >            plp
                        
06de : f002                     beq brvs1
06e0 : d003                     bne brvs2
06e2 :                  brvs1
                                trap            ;branch zero/non zero
06e2 : 4ce206          >        jmp *           ;failed anyway
                        
06e5 : b002             brvs2   bcs brvs3
06e7 : 9003                     bcc brvs4
06e9 :                  brvs3
                                trap            ;branch carry/no carry
06e9 : 4ce906          >        jmp *           ;failed anyway
                        
06ec : 3002             brvs4   bmi brvs5
06ee : 1003                     bpl brvs6
06f0 :                  brvs5
                                trap            ;branch minus/plus
06f0 : 4cf006          >        jmp *           ;failed anyway
                        
06f3 : 5002             brvs6   bvc brvs7
06f5 : 7003                     bvs brvs8
06f7 :                  brvs7
                                trap            ;branch overflow/no overflow
06f7 : 4cf706          >        jmp *           ;failed anyway
                        
06fa :                  brvs8
                                set_stat $ff-zero
                       >            load_flag $ff-zero
06fa : a9fd            >            lda #$ff-zero             ;allow test to change I-flag (no mask)
                       >
06fc : 48              >            pha         ;use stack to load status
06fd : 28              >            plp
                        
06fe : f002                     beq brzc1
0700 : d003                     bne brzc2
0702 :                  brzc1
                                trap            ;branch zero/non zero
0702 : 4c0207          >        jmp *           ;failed anyway
                        
0705 : 9002             brzc2   bcc brzc3
0707 : b003                     bcs brzc4
0709 :                  brzc3
                                trap            ;branch carry/no carry
0709 : 4c0907          >        jmp *           ;failed anyway
                        
070c : 1002             brzc4   bpl brzc5
070e : 3003                     bmi brzc6
0710 :                  brzc5
                                trap            ;branch minus/plus
0710 : 4c1007          >        jmp *           ;failed anyway
                        
0713 : 5002             brzc6   bvc brzc7
0715 : 7003                     bvs brzc8
0717 :                  brzc7
                                trap            ;branch overflow/no overflow
0717 : 4c1707          >        jmp *           ;failed anyway
                        
071a :                  brzc8
                                set_stat $ff-carry
                       >            load_flag $ff-carry
071a : a9fe            >            lda #$ff-carry             ;allow test to change I-flag (no mask)
                       >
071c : 48              >            pha         ;use stack to load status
071d : 28              >            plp
                        
071e : d002                     bne brcc1
0720 : f003                     beq brcc2
0722 :                  brcc1
                                trap            ;branch zero/non zero
0722 : 4c2207          >        jmp *           ;failed anyway
                        
0725 : b002             brcc2   bcs brcc3
0727 : 9003                     bcc brcc4
0729 :                  brcc3
                                trap            ;branch carry/no carry
0729 : 4c2907          >        jmp *           ;failed anyway
                        
072c : 1002             brcc4   bpl brcc5
072e : 3003                     bmi brcc6
0730 :                  brcc5
                                trap            ;branch minus/plus
0730 : 4c3007          >        jmp *           ;failed anyway
                        
0733 : 5002             brcc6   bvc brcc7
0735 : 7003                     bvs brcc8
0737 :                  brcc7
                                trap            ;branch overflow/no overflow
0737 : 4c3707          >        jmp *           ;failed anyway
                        
073a :                  brcc8
                                set_stat $ff-minus
                       >            load_flag $ff-minus
073a : a97f            >            lda #$ff-minus             ;allow test to change I-flag (no mask)
                       >
073c : 48              >            pha         ;use stack to load status
073d : 28              >            plp
                        
073e : d002                     bne brpl1
0740 : f003                     beq brpl2
0742 :                  brpl1
                                trap            ;branch zero/non zero
0742 : 4c4207          >        jmp *           ;failed anyway
                        
0745 : 9002             brpl2   bcc brpl3
0747 : b003                     bcs brpl4
0749 :                  brpl3
                                trap            ;branch carry/no carry
0749 : 4c4907          >        jmp *           ;failed anyway
                        
074c : 3002             brpl4   bmi brpl5
074e : 1003                     bpl brpl6
0750 :                  brpl5
                                trap            ;branch minus/plus
0750 : 4c5007          >        jmp *           ;failed anyway
                        
0753 : 5002             brpl6   bvc brpl7
0755 : 7003                     bvs brpl8
0757 :                  brpl7
                                trap            ;branch overflow/no overflow
0757 : 4c5707          >        jmp *           ;failed anyway
                        
075a :                  brpl8
                                set_stat $ff-overfl
                       >            load_flag $ff-overfl
075a : a9bf            >            lda #$ff-overfl             ;allow test to change I-flag (no mask)
                       >
075c : 48              >            pha         ;use stack to load status
075d : 28              >            plp
                        
075e : d002                     bne brvc1
0760 : f003                     beq brvc2
0762 :                  brvc1
                                trap            ;branch zero/non zero
0762 : 4c6207          >        jmp *           ;failed anyway
                        
0765 : 9002             brvc2   bcc brvc3
0767 : b003                     bcs brvc4
0769 :                  brvc3
                                trap            ;branch carry/no carry
0769 : 4c6907          >        jmp *           ;failed anyway
                        
076c : 1002             brvc4   bpl brvc5
076e : 3003                     bmi brvc6
0770 :                  brvc5
                                trap            ;branch minus/plus
0770 : 4c7007          >        jmp *           ;failed anyway
                        
0773 : 7002             brvc6   bvs brvc7
0775 : 5003                     bvc brvc8
0777 :                  brvc7
                                trap            ;branch overflow/no overflow
0777 : 4c7707          >        jmp *           ;failed anyway
                        
077a :                  brvc8
                                next_test
077a : ad0002          >            lda test_case   ;previous test
077d : c904            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
077f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0005 =                 >test_num = test_num + 1
0781 : a905            >            lda #test_num   ;*** next tests' number
0783 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; test PHA does not alter flags or accumulator but PLA does
0786 : a255                     ldx #$55        ;x & y protected
0788 : a0aa                     ldy #$aa
                                set_a 1,$ff     ;push
                       >            load_flag $ff     
078a : a9ff            >            lda #$ff                  ;allow test to change I-flag (no mask)
                       >
078c : 48              >            pha         ;use stack to load status
078d : a901            >            lda #1     ;precharge accu
078f : 28              >            plp
                        
0790 : 48                       pha
                                tst_a 1,$ff
0791 : 08              >            php         ;save flags
0792 : c901            >            cmp #1     ;test result
                       >            trap_ne
0794 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0796 : 68              >            pla         ;load status
0797 : 48              >            pha
                       >            cmp_flag $ff
0798 : 0908            >            ora #decmode        ;ignore decimal mode bit
079a : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
079c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
079e : 28              >            plp         ;restore status
                        
                                set_a 0,0
                       >            load_flag 0
079f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
07a1 : 48              >            pha         ;use stack to load status
07a2 : a900            >            lda #0     ;precharge accu
07a4 : 28              >            plp
                        
07a5 : 48                       pha
                                tst_a 0,0
07a6 : 08              >            php         ;save flags
07a7 : c900            >            cmp #0     ;test result
                       >            trap_ne
07a9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07ab : 68              >            pla         ;load status
07ac : 48              >            pha
                       >            cmp_flag 0
07ad : 0908            >            ora #decmode        ;ignore decimal mode bit
07af : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
07b1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07b3 : 28              >            plp         ;restore status
                        
                                set_a $ff,$ff
                       >            load_flag $ff
07b4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
07b6 : 48              >            pha         ;use stack to load status
07b7 : a9ff            >            lda #$ff     ;precharge accu
07b9 : 28              >            plp
                        
07ba : 48                       pha
                                tst_a $ff,$ff
07bb : 08              >            php         ;save flags
07bc : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
07be : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07c0 : 68              >            pla         ;load status
07c1 : 48              >            pha
                       >            cmp_flag $ff
07c2 : 0908            >            ora #decmode        ;ignore decimal mode bit
07c4 : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
07c6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07c8 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
07c9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
07cb : 48              >            pha         ;use stack to load status
07cc : a901            >            lda #1     ;precharge accu
07ce : 28              >            plp
                        
07cf : 48                       pha
                                tst_a 1,0
07d0 : 08              >            php         ;save flags
07d1 : c901            >            cmp #1     ;test result
                       >            trap_ne
07d3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07d5 : 68              >            pla         ;load status
07d6 : 48              >            pha
                       >            cmp_flag 0
07d7 : 0908            >            ora #decmode        ;ignore decimal mode bit
07d9 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
07db : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07dd : 28              >            plp         ;restore status
                        
                                set_a 0,$ff
                       >            load_flag $ff
07de : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
07e0 : 48              >            pha         ;use stack to load status
07e1 : a900            >            lda #0     ;precharge accu
07e3 : 28              >            plp
                        
07e4 : 48                       pha
                                tst_a 0,$ff
07e5 : 08              >            php         ;save flags
07e6 : c900            >            cmp #0     ;test result
                       >            trap_ne
07e8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07ea : 68              >            pla         ;load status
07eb : 48              >            pha
                       >            cmp_flag $ff
07ec : 0908            >            ora #decmode        ;ignore decimal mode bit
07ee : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
07f0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07f2 : 28              >            plp         ;restore status
                        
                                set_a $ff,0
                       >            load_flag 0
07f3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
07f5 : 48              >            pha         ;use stack to load status
07f6 : a9ff            >            lda #$ff     ;precharge accu
07f8 : 28              >            plp
                        
07f9 : 48                       pha
                                tst_a $ff,0
07fa : 08              >            php         ;save flags
07fb : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
07fd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
07ff : 68              >            pla         ;load status
0800 : 48              >            pha
                       >            cmp_flag 0
0801 : 0908            >            ora #decmode        ;ignore decimal mode bit
0803 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0805 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0807 : 28              >            plp         ;restore status
                        
                                set_a 0,$ff     ;pull
                       >            load_flag $ff     
0808 : a9ff            >            lda #$ff                  ;allow test to change I-flag (no mask)
                       >
080a : 48              >            pha         ;use stack to load status
080b : a900            >            lda #0     ;precharge accu
080d : 28              >            plp
                        
080e : 68                       pla
                                tst_a $ff,$ff-zero
080f : 08              >            php         ;save flags
0810 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0812 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0814 : 68              >            pla         ;load status
0815 : 48              >            pha
                       >            cmp_flag $ff-zero
0816 : 0908            >            ora #decmode        ;ignore decimal mode bit
0818 : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
081a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
081c : 28              >            plp         ;restore status
                        
                                set_a $ff,0
                       >            load_flag 0
081d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
081f : 48              >            pha         ;use stack to load status
0820 : a9ff            >            lda #$ff     ;precharge accu
0822 : 28              >            plp
                        
0823 : 68                       pla
                                tst_a 0,zero
0824 : 08              >            php         ;save flags
0825 : c900            >            cmp #0     ;test result
                       >            trap_ne
0827 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0829 : 68              >            pla         ;load status
082a : 48              >            pha
                       >            cmp_flag zero
082b : 0908            >            ora #decmode        ;ignore decimal mode bit
082d : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
082f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0831 : 28              >            plp         ;restore status
                        
                                set_a $fe,$ff
                       >            load_flag $ff
0832 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0834 : 48              >            pha         ;use stack to load status
0835 : a9fe            >            lda #$fe     ;precharge accu
0837 : 28              >            plp
                        
0838 : 68                       pla
                                tst_a 1,$ff-zero-minus
0839 : 08              >            php         ;save flags
083a : c901            >            cmp #1     ;test result
                       >            trap_ne
083c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
083e : 68              >            pla         ;load status
083f : 48              >            pha
                       >            cmp_flag $ff-zero-minus
0840 : 0908            >            ora #decmode        ;ignore decimal mode bit
0842 : c97d            >            cmp #($ff-zero-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0844 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0846 : 28              >            plp         ;restore status
                        
                                set_a 0,0
                       >            load_flag 0
0847 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0849 : 48              >            pha         ;use stack to load status
084a : a900            >            lda #0     ;precharge accu
084c : 28              >            plp
                        
084d : 68                       pla
                                tst_a $ff,minus
084e : 08              >            php         ;save flags
084f : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0851 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0853 : 68              >            pla         ;load status
0854 : 48              >            pha
                       >            cmp_flag minus
0855 : 0908            >            ora #decmode        ;ignore decimal mode bit
0857 : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0859 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
085b : 28              >            plp         ;restore status
                        
                                set_a $ff,$ff
                       >            load_flag $ff
085c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
085e : 48              >            pha         ;use stack to load status
085f : a9ff            >            lda #$ff     ;precharge accu
0861 : 28              >            plp
                        
0862 : 68                       pla
                                tst_a 0,$ff-minus
0863 : 08              >            php         ;save flags
0864 : c900            >            cmp #0     ;test result
                       >            trap_ne
0866 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0868 : 68              >            pla         ;load status
0869 : 48              >            pha
                       >            cmp_flag $ff-minus
086a : 0908            >            ora #decmode        ;ignore decimal mode bit
086c : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
086e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0870 : 28              >            plp         ;restore status
                        
                                set_a $fe,0
                       >            load_flag 0
0871 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0873 : 48              >            pha         ;use stack to load status
0874 : a9fe            >            lda #$fe     ;precharge accu
0876 : 28              >            plp
                        
0877 : 68                       pla
                                tst_a 1,0
0878 : 08              >            php         ;save flags
0879 : c901            >            cmp #1     ;test result
                       >            trap_ne
087b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
087d : 68              >            pla         ;load status
087e : 48              >            pha
                       >            cmp_flag 0
087f : 0908            >            ora #decmode        ;ignore decimal mode bit
0881 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0883 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0885 : 28              >            plp         ;restore status
                        
0886 : e055                     cpx #$55        ;x & y unchanged?
                                trap_ne
0888 : d0fe            >        bne *           ;failed not equal (non zero)
                        
088a : c0aa                     cpy #$aa
                                trap_ne
088c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
088e : ad0002          >            lda test_case   ;previous test
0891 : c905            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0893 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0006 =                 >test_num = test_num + 1
0895 : a906            >            lda #test_num   ;*** next tests' number
0897 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                         
                        ; partial pretest EOR #
                                set_a $3c,0
                       >            load_flag 0
089a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
089c : 48              >            pha         ;use stack to load status
089d : a93c            >            lda #$3c     ;precharge accu
089f : 28              >            plp
                        
08a0 : 49c3                     eor #$c3
                                tst_a $ff,fn
08a2 : 08              >            php         ;save flags
08a3 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
08a5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
08a7 : 68              >            pla         ;load status
08a8 : 48              >            pha
                       >            cmp_flag fn
08a9 : 0908            >            ora #decmode        ;ignore decimal mode bit
08ab : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
08ad : d0fe            >        bne *           ;failed not equal (non zero)
                       >
08af : 28              >            plp         ;restore status
                        
                                set_a $c3,0
                       >            load_flag 0
08b0 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
08b2 : 48              >            pha         ;use stack to load status
08b3 : a9c3            >            lda #$c3     ;precharge accu
08b5 : 28              >            plp
                        
08b6 : 49c3                     eor #$c3
                                tst_a 0,fz
08b8 : 08              >            php         ;save flags
08b9 : c900            >            cmp #0     ;test result
                       >            trap_ne
08bb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
08bd : 68              >            pla         ;load status
08be : 48              >            pha
                       >            cmp_flag fz
08bf : 0908            >            ora #decmode        ;ignore decimal mode bit
08c1 : c93a            >            cmp #(fz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
08c3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
08c5 : 28              >            plp         ;restore status
                        
                                next_test
08c6 : ad0002          >            lda test_case   ;previous test
08c9 : c906            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
08cb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0007 =                 >test_num = test_num + 1
08cd : a907            >            lda #test_num   ;*** next tests' number
08cf : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; PC modifying instructions except branches (NOP, JMP, JSR, RTS, BRK, RTI)
                        ; testing NOP
08d2 : a224                     ldx #$24
08d4 : a042                     ldy #$42
                                set_a $18,0
                       >            load_flag 0
08d6 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
08d8 : 48              >            pha         ;use stack to load status
08d9 : a918            >            lda #$18     ;precharge accu
08db : 28              >            plp
                        
08dc : ea                       nop
                                tst_a $18,0
08dd : 08              >            php         ;save flags
08de : c918            >            cmp #$18     ;test result
                       >            trap_ne
08e0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
08e2 : 68              >            pla         ;load status
08e3 : 48              >            pha
                       >            cmp_flag 0
08e4 : 0908            >            ora #decmode        ;ignore decimal mode bit
08e6 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
08e8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
08ea : 28              >            plp         ;restore status
                        
08eb : e024                     cpx #$24
                                trap_ne
08ed : d0fe            >        bne *           ;failed not equal (non zero)
                        
08ef : c042                     cpy #$42
                                trap_ne
08f1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
08f3 : a2db                     ldx #$db
08f5 : a0bd                     ldy #$bd
                                set_a $e7,$ff
                       >            load_flag $ff
08f7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
08f9 : 48              >            pha         ;use stack to load status
08fa : a9e7            >            lda #$e7     ;precharge accu
08fc : 28              >            plp
                        
08fd : ea                       nop
                                tst_a $e7,$ff
08fe : 08              >            php         ;save flags
08ff : c9e7            >            cmp #$e7     ;test result
                       >            trap_ne
0901 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0903 : 68              >            pla         ;load status
0904 : 48              >            pha
                       >            cmp_flag $ff
0905 : 0908            >            ora #decmode        ;ignore decimal mode bit
0907 : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0909 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
090b : 28              >            plp         ;restore status
                        
090c : e0db                     cpx #$db
                                trap_ne
090e : d0fe            >        bne *           ;failed not equal (non zero)
                        
0910 : c0bd                     cpy #$bd
                                trap_ne
0912 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
0914 : ad0002          >            lda test_case   ;previous test
0917 : c907            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0919 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0008 =                 >test_num = test_num + 1
091b : a908            >            lda #test_num   ;*** next tests' number
091d : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; jump absolute
                                set_stat $0
                       >            load_flag $0
0920 : a900            >            lda #$0             ;allow test to change I-flag (no mask)
                       >
0922 : 48              >            pha         ;use stack to load status
0923 : 28              >            plp
                        
0924 : a946                     lda #'F'
0926 : a241                     ldx #'A'
0928 : a052                     ldy #'R'        ;N=0, V=0, Z=0, C=0
092a : 4c0038                   jmp test_far
092d : ea                       nop
092e : ea                       nop
                                trap_ne         ;runover protection
092f : d0fe            >        bne *           ;failed not equal (non zero)
                        
0931 : e8                       inx
0932 : e8                       inx
0933 :                  far_ret 
                                trap_eq         ;returned flags OK?
0933 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_pl
0935 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                trap_cc
0937 : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
0939 : 50fe            >        bvc *           ;failed overflow clear
                        
093b : c9ec                     cmp #('F'^$aa)  ;returned registers OK?
                                trap_ne
093d : d0fe            >        bne *           ;failed not equal (non zero)
                        
093f : e042                     cpx #('A'+1)
                                trap_ne
0941 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0943 : c04f                     cpy #('R'-3)
                                trap_ne
0945 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0947 : ca                       dex
0948 : c8                       iny
0949 : c8                       iny
094a : c8                       iny
094b : 49aa                     eor #$aa        ;N=0, V=1, Z=0, C=1
094d : 4c5609                   jmp test_near
0950 : ea                       nop
0951 : ea                       nop
                                trap_ne         ;runover protection
0952 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0954 : e8                       inx
0955 : e8                       inx
0956 :                  test_near
                                trap_eq         ;passed flags OK?
0956 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_mi
0958 : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_cc
095a : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
095c : 50fe            >        bvc *           ;failed overflow clear
                        
095e : c946                     cmp #'F'        ;passed registers OK?
                                trap_ne
0960 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0962 : e041                     cpx #'A'
                                trap_ne
0964 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0966 : c052                     cpy #'R'
                                trap_ne
0968 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
096a : ad0002          >            lda test_case   ;previous test
096d : c908            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
096f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0009 =                 >test_num = test_num + 1
0971 : a909            >            lda #test_num   ;*** next tests' number
0973 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; jump indirect
                                set_stat 0
                       >            load_flag 0
0976 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0978 : 48              >            pha         ;use stack to load status
0979 : 28              >            plp
                        
097a : a949                     lda #'I'
097c : a24e                     ldx #'N'
097e : a044                     ldy #'D'        ;N=0, V=0, Z=0, C=0
0980 : 6c2e38                   jmp (ptr_tst_ind)
0983 : ea                       nop
                                trap_ne         ;runover protection
0984 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0986 : 88                       dey
0987 : 88                       dey
0988 :                  ind_ret 
0988 : 08                       php             ;either SP or Y count will fail, if we do not hit
0989 : 88                       dey
098a : 88                       dey
098b : 88                       dey
098c : 28                       plp
                                trap_eq         ;returned flags OK?
098d : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_pl
098f : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                trap_cc
0991 : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
0993 : 50fe            >        bvc *           ;failed overflow clear
                        
0995 : c9e3                     cmp #('I'^$aa)  ;returned registers OK?
                                trap_ne
0997 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0999 : e04f                     cpx #('N'+1)
                                trap_ne
099b : d0fe            >        bne *           ;failed not equal (non zero)
                        
099d : c03e                     cpy #('D'-6)
                                trap_ne
099f : d0fe            >        bne *           ;failed not equal (non zero)
                        
09a1 : ba                       tsx             ;SP check
09a2 : e0ff                     cpx #$ff
                                trap_ne
09a4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
09a6 : ad0002          >            lda test_case   ;previous test
09a9 : c909            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
09ab : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000a =                 >test_num = test_num + 1
09ad : a90a            >            lda #test_num   ;*** next tests' number
09af : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; jump subroutine & return from subroutine
                                set_stat 0
                       >            load_flag 0
09b2 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
09b4 : 48              >            pha         ;use stack to load status
09b5 : 28              >            plp
                        
09b6 : a94a                     lda #'J'
09b8 : a253                     ldx #'S'
09ba : a052                     ldy #'R'        ;N=0, V=0, Z=0, C=0
09bc : 206d38                   jsr test_jsr
09be =                  jsr_ret = *-1           ;last address of jsr = return address
09bf : 08                       php             ;either SP or Y count will fail, if we do not hit
09c0 : 88                       dey
09c1 : 88                       dey
09c2 : 88                       dey
09c3 : 28                       plp
                                trap_eq         ;returned flags OK?
09c4 : f0fe            >        beq *           ;failed equal (zero)
                        
                                trap_pl
09c6 : 10fe            >        bpl *           ;failed plus (bit 7 clear)
                        
                                trap_cc
09c8 : 90fe            >        bcc *           ;failed carry clear
                        
                                trap_vc
09ca : 50fe            >        bvc *           ;failed overflow clear
                        
09cc : c9e0                     cmp #('J'^$aa)  ;returned registers OK?
                                trap_ne
09ce : d0fe            >        bne *           ;failed not equal (non zero)
                        
09d0 : e054                     cpx #('S'+1)
                                trap_ne
09d2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
09d4 : c04c                     cpy #('R'-6)
                                trap_ne
09d6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
09d8 : ba                       tsx             ;sp?
09d9 : e0ff                     cpx #$ff
                                trap_ne
09db : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
09dd : ad0002          >            lda test_case   ;previous test
09e0 : c90a            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
09e2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000b =                 >test_num = test_num + 1
09e4 : a90b            >            lda #test_num   ;*** next tests' number
09e6 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; break & return from interrupt
                            if ROM_vectors = 1
                                load_flag 0     ;with interrupts enabled if allowed!
                                pha
                                lda #'B'
                                ldx #'R'
                                ldy #'K'
                                plp             ;N=0, V=0, Z=0, C=0
                                brk
                            else
09e9 : a90a                     lda #hi brk_ret0 ;emulated break
09eb : 48                       pha
09ec : a900                     lda #lo brk_ret0
09ee : 48                       pha
                                load_flag fao    ;set break & unused on stack
09ef : a930            >            lda #fao                 ;allow test to change I-flag (no mask)
                        
09f1 : 48                       pha
                                load_flag intdis ;during interrupt
09f2 : a904            >            lda #intdis              ;allow test to change I-flag (no mask)
                        
09f4 : 48                       pha
09f5 : a942                     lda #'B'
09f7 : a252                     ldx #'R'
09f9 : a04b                     ldy #'K'
09fb : 28                       plp             ;N=0, V=0, Z=0, C=0
09fc : 4cbb38                   jmp irq_trap
                            endif
09ff : 88                       dey             ;should not be executed
0a00 :                  brk_ret0                ;address of break return
0a00 : 08                       php             ;either SP or Y count will fail, if we do not hit
0a01 : 88                       dey
0a02 : 88                       dey
0a03 : 88                       dey
0a04 : c9e8                     cmp #'B'^$aa    ;returned registers OK?
                                ;the IRQ vector was never executed if A & X stay unmodified
                                trap_ne
0a06 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0a08 : e053                     cpx #'R'+1
                                trap_ne
0a0a : d0fe            >        bne *           ;failed not equal (non zero)
                        
0a0c : c045                     cpy #'K'-6
                                trap_ne
0a0e : d0fe            >        bne *           ;failed not equal (non zero)
                        
0a10 : 68                       pla             ;returned flags OK (unchanged)?
                                cmp_flag 0
0a11 : 0908            >            ora #decmode        ;ignore decimal mode bit
0a13 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0a15 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0a17 : ba                       tsx             ;sp?
0a18 : e0ff                     cpx #$ff
                                trap_ne
0a1a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                            if ROM_vectors = 1
                                load_flag $ff   ;with interrupts disabled if allowed!
                                pha
                                lda #$ff-'B'
                                ldx #$ff-'R'
                                ldy #$ff-'K'
                                plp             ;N=1, V=1, Z=1, C=1
                                brk
                            else
0a1c : a90a                     lda #hi brk_ret1 ;emulated break
0a1e : 48                       pha
0a1f : a931                     lda #lo brk_ret1
0a21 : 48                       pha
                                load_flag $ff
0a22 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                        
0a24 : 48                       pha             ;set break & unused on stack
0a25 : 48                       pha             ;actual flags
0a26 : a9bd                     lda #$ff-'B'
0a28 : a2ad                     ldx #$ff-'R'
0a2a : a0b4                     ldy #$ff-'K'
0a2c : 28                       plp             ;N=1, V=1, Z=1, C=1
0a2d : 4cbb38                   jmp irq_trap
                            endif
0a30 : 88                       dey             ;should not be executed
0a31 :                  brk_ret1                ;address of break return
0a31 : 08                       php             ;either SP or Y count will fail, if we do not hit
0a32 : 88                       dey
0a33 : 88                       dey
0a34 : 88                       dey
0a35 : c917                     cmp #($ff-'B')^$aa  ;returned registers OK?
                                ;the IRQ vector was never executed if A & X stay unmodified
                                trap_ne
0a37 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0a39 : e0ae                     cpx #$ff-'R'+1
                                trap_ne
0a3b : d0fe            >        bne *           ;failed not equal (non zero)
                        
0a3d : c0ae                     cpy #$ff-'K'-6
                                trap_ne
0a3f : d0fe            >        bne *           ;failed not equal (non zero)
                        
0a41 : 68                       pla             ;returned flags OK (unchanged)?
                                cmp_flag $ff
0a42 : 0908            >            ora #decmode        ;ignore decimal mode bit
0a44 : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0a46 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0a48 : ba                       tsx             ;sp?
0a49 : e0ff                     cpx #$ff
                                trap_ne
0a4b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                next_test
0a4d : ad0002          >            lda test_case   ;previous test
0a50 : c90b            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0a52 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000c =                 >test_num = test_num + 1
0a54 : a90c            >            lda #test_num   ;*** next tests' number
0a56 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                         
                        ; test set and clear flags CLC CLI CLD CLV SEC SEI SED
                                set_stat $ff
                       >            load_flag $ff
0a59 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0a5b : 48              >            pha         ;use stack to load status
0a5c : 28              >            plp
                        
0a5d : 18                       clc
                                tst_stat $ff-carry
0a5e : 08              >            php         ;save status
0a5f : 68              >            pla         ;use stack to retrieve status
0a60 : 48              >            pha
                       >            cmp_flag $ff-carry
0a61 : 0908            >            ora #decmode        ;ignore decimal mode bit
0a63 : c9fe            >            cmp #($ff-carry|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0a65 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a67 : 28              >            plp         ;restore status
                        
0a68 : 38                       sec
                                tst_stat $ff
0a69 : 08              >            php         ;save status
0a6a : 68              >            pla         ;use stack to retrieve status
0a6b : 48              >            pha
                       >            cmp_flag $ff
0a6c : 0908            >            ora #decmode        ;ignore decimal mode bit
0a6e : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0a70 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a72 : 28              >            plp         ;restore status
                        
                            if I_flag = 3
0a73 : 58                       cli
                                tst_stat $ff-intdis
0a74 : 08              >            php         ;save status
0a75 : 68              >            pla         ;use stack to retrieve status
0a76 : 48              >            pha
                       >            cmp_flag $ff-intdis
0a77 : 0908            >            ora #decmode        ;ignore decimal mode bit
0a79 : c9fb            >            cmp #($ff-intdis|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0a7b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a7d : 28              >            plp         ;restore status
                        
0a7e : 78                       sei
                                tst_stat $ff
0a7f : 08              >            php         ;save status
0a80 : 68              >            pla         ;use stack to retrieve status
0a81 : 48              >            pha
                       >            cmp_flag $ff
0a82 : 0908            >            ora #decmode        ;ignore decimal mode bit
0a84 : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0a86 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a88 : 28              >            plp         ;restore status
                        
                            endif
0a89 : d8                       cld
                                tst_stat $ff-decmode
0a8a : 08              >            php         ;save status
0a8b : 68              >            pla         ;use stack to retrieve status
0a8c : 48              >            pha
                       >            cmp_flag $ff-decmode
0a8d : 0908            >            ora #decmode        ;ignore decimal mode bit
0a8f : c9ff            >            cmp #($ff-decmode|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0a91 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a93 : 28              >            plp         ;restore status
                        
0a94 : f8                       sed
                                tst_stat $ff
0a95 : 08              >            php         ;save status
0a96 : 68              >            pla         ;use stack to retrieve status
0a97 : 48              >            pha
                       >            cmp_flag $ff
0a98 : 0908            >            ora #decmode        ;ignore decimal mode bit
0a9a : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0a9c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0a9e : 28              >            plp         ;restore status
                        
0a9f : b8                       clv
                                tst_stat $ff-overfl
0aa0 : 08              >            php         ;save status
0aa1 : 68              >            pla         ;use stack to retrieve status
0aa2 : 48              >            pha
                       >            cmp_flag $ff-overfl
0aa3 : 0908            >            ora #decmode        ;ignore decimal mode bit
0aa5 : c9bf            >            cmp #($ff-overfl|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0aa7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0aa9 : 28              >            plp         ;restore status
                        
                                set_stat 0
                       >            load_flag 0
0aaa : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0aac : 48              >            pha         ;use stack to load status
0aad : 28              >            plp
                        
                                tst_stat 0
0aae : 08              >            php         ;save status
0aaf : 68              >            pla         ;use stack to retrieve status
0ab0 : 48              >            pha
                       >            cmp_flag 0
0ab1 : 0908            >            ora #decmode        ;ignore decimal mode bit
0ab3 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0ab5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0ab7 : 28              >            plp         ;restore status
                        
0ab8 : 38                       sec
                                tst_stat carry
0ab9 : 08              >            php         ;save status
0aba : 68              >            pla         ;use stack to retrieve status
0abb : 48              >            pha
                       >            cmp_flag carry
0abc : 0908            >            ora #decmode        ;ignore decimal mode bit
0abe : c939            >            cmp #(carry|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0ac0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0ac2 : 28              >            plp         ;restore status
                        
0ac3 : 18                       clc
                                tst_stat 0  
0ac4 : 08              >            php         ;save status
0ac5 : 68              >            pla         ;use stack to retrieve status
0ac6 : 48              >            pha
                       >            cmp_flag 0  
0ac7 : 0908            >            ora #decmode        ;ignore decimal mode bit
0ac9 : c938            >            cmp #(0  |faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0acb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0acd : 28              >            plp         ;restore status
                        
                            if I_flag = 3
0ace : 78                       sei
                                tst_stat intdis
0acf : 08              >            php         ;save status
0ad0 : 68              >            pla         ;use stack to retrieve status
0ad1 : 48              >            pha
                       >            cmp_flag intdis
0ad2 : 0908            >            ora #decmode        ;ignore decimal mode bit
0ad4 : c93c            >            cmp #(intdis|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0ad6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0ad8 : 28              >            plp         ;restore status
                        
0ad9 : 58                       cli
                                tst_stat 0
0ada : 08              >            php         ;save status
0adb : 68              >            pla         ;use stack to retrieve status
0adc : 48              >            pha
                       >            cmp_flag 0
0add : 0908            >            ora #decmode        ;ignore decimal mode bit
0adf : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0ae1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0ae3 : 28              >            plp         ;restore status
                        
                            endif  
0ae4 : f8                       sed
                                tst_stat decmode
0ae5 : 08              >            php         ;save status
0ae6 : 68              >            pla         ;use stack to retrieve status
0ae7 : 48              >            pha
                       >            cmp_flag decmode
0ae8 : 0908            >            ora #decmode        ;ignore decimal mode bit
0aea : c938            >            cmp #(decmode|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0aec : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0aee : 28              >            plp         ;restore status
                        
0aef : d8                       cld
                                tst_stat 0  
0af0 : 08              >            php         ;save status
0af1 : 68              >            pla         ;use stack to retrieve status
0af2 : 48              >            pha
                       >            cmp_flag 0  
0af3 : 0908            >            ora #decmode        ;ignore decimal mode bit
0af5 : c938            >            cmp #(0  |faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0af7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0af9 : 28              >            plp         ;restore status
                        
                                set_stat overfl
                       >            load_flag overfl
0afa : a940            >            lda #overfl             ;allow test to change I-flag (no mask)
                       >
0afc : 48              >            pha         ;use stack to load status
0afd : 28              >            plp
                        
                                tst_stat overfl
0afe : 08              >            php         ;save status
0aff : 68              >            pla         ;use stack to retrieve status
0b00 : 48              >            pha
                       >            cmp_flag overfl
0b01 : 0908            >            ora #decmode        ;ignore decimal mode bit
0b03 : c978            >            cmp #(overfl|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0b05 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b07 : 28              >            plp         ;restore status
                        
0b08 : b8                       clv
                                tst_stat 0
0b09 : 08              >            php         ;save status
0b0a : 68              >            pla         ;use stack to retrieve status
0b0b : 48              >            pha
                       >            cmp_flag 0
0b0c : 0908            >            ora #decmode        ;ignore decimal mode bit
0b0e : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0b10 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b12 : 28              >            plp         ;restore status
                        
                                next_test
0b13 : ad0002          >            lda test_case   ;previous test
0b16 : c90c            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0b18 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000d =                 >test_num = test_num + 1
0b1a : a90d            >            lda #test_num   ;*** next tests' number
0b1c : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        ; testing index register increment/decrement and transfer
                        ; INX INY DEX DEY TAX TXA TAY TYA 
0b1f : a2fe                     ldx #$fe
                                set_stat $ff
                       >            load_flag $ff
0b21 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0b23 : 48              >            pha         ;use stack to load status
0b24 : 28              >            plp
                        
0b25 : e8                       inx             ;ff
                                tst_x $ff,$ff-zero
0b26 : 08              >            php         ;save flags
0b27 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
0b29 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b2b : 68              >            pla         ;load status
0b2c : 48              >            pha
                       >            cmp_flag $ff-zero
0b2d : 0908            >            ora #decmode        ;ignore decimal mode bit
0b2f : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0b31 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b33 : 28              >            plp         ;restore status
                        
0b34 : e8                       inx             ;00
                                tst_x 0,$ff-minus
0b35 : 08              >            php         ;save flags
0b36 : e000            >            cpx #0     ;test result
                       >            trap_ne
0b38 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b3a : 68              >            pla         ;load status
0b3b : 48              >            pha
                       >            cmp_flag $ff-minus
0b3c : 0908            >            ora #decmode        ;ignore decimal mode bit
0b3e : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0b40 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b42 : 28              >            plp         ;restore status
                        
0b43 : e8                       inx             ;01
                                tst_x 1,$ff-minus-zero
0b44 : 08              >            php         ;save flags
0b45 : e001            >            cpx #1     ;test result
                       >            trap_ne
0b47 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b49 : 68              >            pla         ;load status
0b4a : 48              >            pha
                       >            cmp_flag $ff-minus-zero
0b4b : 0908            >            ora #decmode        ;ignore decimal mode bit
0b4d : c97d            >            cmp #($ff-minus-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0b4f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b51 : 28              >            plp         ;restore status
                        
0b52 : ca                       dex             ;00
                                tst_x 0,$ff-minus
0b53 : 08              >            php         ;save flags
0b54 : e000            >            cpx #0     ;test result
                       >            trap_ne
0b56 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b58 : 68              >            pla         ;load status
0b59 : 48              >            pha
                       >            cmp_flag $ff-minus
0b5a : 0908            >            ora #decmode        ;ignore decimal mode bit
0b5c : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0b5e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b60 : 28              >            plp         ;restore status
                        
0b61 : ca                       dex             ;ff
                                tst_x $ff,$ff-zero
0b62 : 08              >            php         ;save flags
0b63 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
0b65 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b67 : 68              >            pla         ;load status
0b68 : 48              >            pha
                       >            cmp_flag $ff-zero
0b69 : 0908            >            ora #decmode        ;ignore decimal mode bit
0b6b : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0b6d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b6f : 28              >            plp         ;restore status
                        
0b70 : ca                       dex             ;fe
                                set_stat 0
                       >            load_flag 0
0b71 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0b73 : 48              >            pha         ;use stack to load status
0b74 : 28              >            plp
                        
0b75 : e8                       inx             ;ff
                                tst_x $ff,minus
0b76 : 08              >            php         ;save flags
0b77 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
0b79 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b7b : 68              >            pla         ;load status
0b7c : 48              >            pha
                       >            cmp_flag minus
0b7d : 0908            >            ora #decmode        ;ignore decimal mode bit
0b7f : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0b81 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b83 : 28              >            plp         ;restore status
                        
0b84 : e8                       inx             ;00
                                tst_x 0,zero
0b85 : 08              >            php         ;save flags
0b86 : e000            >            cpx #0     ;test result
                       >            trap_ne
0b88 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b8a : 68              >            pla         ;load status
0b8b : 48              >            pha
                       >            cmp_flag zero
0b8c : 0908            >            ora #decmode        ;ignore decimal mode bit
0b8e : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0b90 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b92 : 28              >            plp         ;restore status
                        
0b93 : e8                       inx             ;01
                                tst_x 1,0
0b94 : 08              >            php         ;save flags
0b95 : e001            >            cpx #1     ;test result
                       >            trap_ne
0b97 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0b99 : 68              >            pla         ;load status
0b9a : 48              >            pha
                       >            cmp_flag 0
0b9b : 0908            >            ora #decmode        ;ignore decimal mode bit
0b9d : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0b9f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0ba1 : 28              >            plp         ;restore status
                        
0ba2 : ca                       dex             ;00
                                tst_x 0,zero
0ba3 : 08              >            php         ;save flags
0ba4 : e000            >            cpx #0     ;test result
                       >            trap_ne
0ba6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0ba8 : 68              >            pla         ;load status
0ba9 : 48              >            pha
                       >            cmp_flag zero
0baa : 0908            >            ora #decmode        ;ignore decimal mode bit
0bac : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0bae : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0bb0 : 28              >            plp         ;restore status
                        
0bb1 : ca                       dex             ;ff
                                tst_x $ff,minus
0bb2 : 08              >            php         ;save flags
0bb3 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
0bb5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0bb7 : 68              >            pla         ;load status
0bb8 : 48              >            pha
                       >            cmp_flag minus
0bb9 : 0908            >            ora #decmode        ;ignore decimal mode bit
0bbb : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0bbd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0bbf : 28              >            plp         ;restore status
                        
                        
0bc0 : a0fe                     ldy #$fe
                                set_stat $ff
                       >            load_flag $ff
0bc2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0bc4 : 48              >            pha         ;use stack to load status
0bc5 : 28              >            plp
                        
0bc6 : c8                       iny             ;ff
                                tst_y $ff,$ff-zero
0bc7 : 08              >            php         ;save flags
0bc8 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
0bca : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0bcc : 68              >            pla         ;load status
0bcd : 48              >            pha
                       >            cmp_flag $ff-zero
0bce : 0908            >            ora #decmode        ;ignore decimal mode bit
0bd0 : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0bd2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0bd4 : 28              >            plp         ;restore status
                        
0bd5 : c8                       iny             ;00
                                tst_y 0,$ff-minus
0bd6 : 08              >            php         ;save flags
0bd7 : c000            >            cpy #0     ;test result
                       >            trap_ne
0bd9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0bdb : 68              >            pla         ;load status
0bdc : 48              >            pha
                       >            cmp_flag $ff-minus
0bdd : 0908            >            ora #decmode        ;ignore decimal mode bit
0bdf : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0be1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0be3 : 28              >            plp         ;restore status
                        
0be4 : c8                       iny             ;01
                                tst_y 1,$ff-minus-zero
0be5 : 08              >            php         ;save flags
0be6 : c001            >            cpy #1     ;test result
                       >            trap_ne
0be8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0bea : 68              >            pla         ;load status
0beb : 48              >            pha
                       >            cmp_flag $ff-minus-zero
0bec : 0908            >            ora #decmode        ;ignore decimal mode bit
0bee : c97d            >            cmp #($ff-minus-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0bf0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0bf2 : 28              >            plp         ;restore status
                        
0bf3 : 88                       dey             ;00
                                tst_y 0,$ff-minus
0bf4 : 08              >            php         ;save flags
0bf5 : c000            >            cpy #0     ;test result
                       >            trap_ne
0bf7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0bf9 : 68              >            pla         ;load status
0bfa : 48              >            pha
                       >            cmp_flag $ff-minus
0bfb : 0908            >            ora #decmode        ;ignore decimal mode bit
0bfd : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0bff : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c01 : 28              >            plp         ;restore status
                        
0c02 : 88                       dey             ;ff
                                tst_y $ff,$ff-zero
0c03 : 08              >            php         ;save flags
0c04 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
0c06 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c08 : 68              >            pla         ;load status
0c09 : 48              >            pha
                       >            cmp_flag $ff-zero
0c0a : 0908            >            ora #decmode        ;ignore decimal mode bit
0c0c : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0c0e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c10 : 28              >            plp         ;restore status
                        
0c11 : 88                       dey             ;fe
                                set_stat 0
                       >            load_flag 0
0c12 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0c14 : 48              >            pha         ;use stack to load status
0c15 : 28              >            plp
                        
0c16 : c8                       iny             ;ff
                                tst_y $ff,0+minus
0c17 : 08              >            php         ;save flags
0c18 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
0c1a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c1c : 68              >            pla         ;load status
0c1d : 48              >            pha
                       >            cmp_flag 0+minus
0c1e : 0908            >            ora #decmode        ;ignore decimal mode bit
0c20 : c9b8            >            cmp #(0+minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0c22 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c24 : 28              >            plp         ;restore status
                        
0c25 : c8                       iny             ;00
                                tst_y 0,zero
0c26 : 08              >            php         ;save flags
0c27 : c000            >            cpy #0     ;test result
                       >            trap_ne
0c29 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c2b : 68              >            pla         ;load status
0c2c : 48              >            pha
                       >            cmp_flag zero
0c2d : 0908            >            ora #decmode        ;ignore decimal mode bit
0c2f : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0c31 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c33 : 28              >            plp         ;restore status
                        
0c34 : c8                       iny             ;01
                                tst_y 1,0
0c35 : 08              >            php         ;save flags
0c36 : c001            >            cpy #1     ;test result
                       >            trap_ne
0c38 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c3a : 68              >            pla         ;load status
0c3b : 48              >            pha
                       >            cmp_flag 0
0c3c : 0908            >            ora #decmode        ;ignore decimal mode bit
0c3e : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0c40 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c42 : 28              >            plp         ;restore status
                        
0c43 : 88                       dey             ;00
                                tst_y 0,zero
0c44 : 08              >            php         ;save flags
0c45 : c000            >            cpy #0     ;test result
                       >            trap_ne
0c47 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c49 : 68              >            pla         ;load status
0c4a : 48              >            pha
                       >            cmp_flag zero
0c4b : 0908            >            ora #decmode        ;ignore decimal mode bit
0c4d : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0c4f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c51 : 28              >            plp         ;restore status
                        
0c52 : 88                       dey             ;ff
                                tst_y $ff,minus
0c53 : 08              >            php         ;save flags
0c54 : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
0c56 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c58 : 68              >            pla         ;load status
0c59 : 48              >            pha
                       >            cmp_flag minus
0c5a : 0908            >            ora #decmode        ;ignore decimal mode bit
0c5c : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0c5e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c60 : 28              >            plp         ;restore status
                        
                                        
0c61 : a2ff                     ldx #$ff
                                set_stat $ff
                       >            load_flag $ff
0c63 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0c65 : 48              >            pha         ;use stack to load status
0c66 : 28              >            plp
                        
0c67 : 8a                       txa
                                tst_a $ff,$ff-zero
0c68 : 08              >            php         ;save flags
0c69 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0c6b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c6d : 68              >            pla         ;load status
0c6e : 48              >            pha
                       >            cmp_flag $ff-zero
0c6f : 0908            >            ora #decmode        ;ignore decimal mode bit
0c71 : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0c73 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c75 : 28              >            plp         ;restore status
                        
0c76 : 08                       php
0c77 : e8                       inx             ;00
0c78 : 28                       plp
0c79 : 8a                       txa
                                tst_a 0,$ff-minus
0c7a : 08              >            php         ;save flags
0c7b : c900            >            cmp #0     ;test result
                       >            trap_ne
0c7d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c7f : 68              >            pla         ;load status
0c80 : 48              >            pha
                       >            cmp_flag $ff-minus
0c81 : 0908            >            ora #decmode        ;ignore decimal mode bit
0c83 : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0c85 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c87 : 28              >            plp         ;restore status
                        
0c88 : 08                       php
0c89 : e8                       inx             ;01
0c8a : 28                       plp
0c8b : 8a                       txa
                                tst_a 1,$ff-minus-zero
0c8c : 08              >            php         ;save flags
0c8d : c901            >            cmp #1     ;test result
                       >            trap_ne
0c8f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c91 : 68              >            pla         ;load status
0c92 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
0c93 : 0908            >            ora #decmode        ;ignore decimal mode bit
0c95 : c97d            >            cmp #($ff-minus-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0c97 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0c99 : 28              >            plp         ;restore status
                        
                                set_stat 0
                       >            load_flag 0
0c9a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0c9c : 48              >            pha         ;use stack to load status
0c9d : 28              >            plp
                        
0c9e : 8a                       txa
                                tst_a 1,0
0c9f : 08              >            php         ;save flags
0ca0 : c901            >            cmp #1     ;test result
                       >            trap_ne
0ca2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0ca4 : 68              >            pla         ;load status
0ca5 : 48              >            pha
                       >            cmp_flag 0
0ca6 : 0908            >            ora #decmode        ;ignore decimal mode bit
0ca8 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0caa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0cac : 28              >            plp         ;restore status
                        
0cad : 08                       php
0cae : ca                       dex             ;00
0caf : 28                       plp
0cb0 : 8a                       txa
                                tst_a 0,zero
0cb1 : 08              >            php         ;save flags
0cb2 : c900            >            cmp #0     ;test result
                       >            trap_ne
0cb4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0cb6 : 68              >            pla         ;load status
0cb7 : 48              >            pha
                       >            cmp_flag zero
0cb8 : 0908            >            ora #decmode        ;ignore decimal mode bit
0cba : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0cbc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0cbe : 28              >            plp         ;restore status
                        
0cbf : 08                       php
0cc0 : ca                       dex             ;ff
0cc1 : 28                       plp
0cc2 : 8a                       txa
                                tst_a $ff,minus
0cc3 : 08              >            php         ;save flags
0cc4 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0cc6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0cc8 : 68              >            pla         ;load status
0cc9 : 48              >            pha
                       >            cmp_flag minus
0cca : 0908            >            ora #decmode        ;ignore decimal mode bit
0ccc : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0cce : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0cd0 : 28              >            plp         ;restore status
                        
                                                
0cd1 : a0ff                     ldy #$ff
                                set_stat $ff
                       >            load_flag $ff
0cd3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0cd5 : 48              >            pha         ;use stack to load status
0cd6 : 28              >            plp
                        
0cd7 : 98                       tya
                                tst_a $ff,$ff-zero
0cd8 : 08              >            php         ;save flags
0cd9 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0cdb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0cdd : 68              >            pla         ;load status
0cde : 48              >            pha
                       >            cmp_flag $ff-zero
0cdf : 0908            >            ora #decmode        ;ignore decimal mode bit
0ce1 : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0ce3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0ce5 : 28              >            plp         ;restore status
                        
0ce6 : 08                       php
0ce7 : c8                       iny             ;00
0ce8 : 28                       plp
0ce9 : 98                       tya
                                tst_a 0,$ff-minus
0cea : 08              >            php         ;save flags
0ceb : c900            >            cmp #0     ;test result
                       >            trap_ne
0ced : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0cef : 68              >            pla         ;load status
0cf0 : 48              >            pha
                       >            cmp_flag $ff-minus
0cf1 : 0908            >            ora #decmode        ;ignore decimal mode bit
0cf3 : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0cf5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0cf7 : 28              >            plp         ;restore status
                        
0cf8 : 08                       php
0cf9 : c8                       iny             ;01
0cfa : 28                       plp
0cfb : 98                       tya
                                tst_a 1,$ff-minus-zero
0cfc : 08              >            php         ;save flags
0cfd : c901            >            cmp #1     ;test result
                       >            trap_ne
0cff : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d01 : 68              >            pla         ;load status
0d02 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
0d03 : 0908            >            ora #decmode        ;ignore decimal mode bit
0d05 : c97d            >            cmp #($ff-minus-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0d07 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d09 : 28              >            plp         ;restore status
                        
                                set_stat 0
                       >            load_flag 0
0d0a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0d0c : 48              >            pha         ;use stack to load status
0d0d : 28              >            plp
                        
0d0e : 98                       tya
                                tst_a 1,0
0d0f : 08              >            php         ;save flags
0d10 : c901            >            cmp #1     ;test result
                       >            trap_ne
0d12 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d14 : 68              >            pla         ;load status
0d15 : 48              >            pha
                       >            cmp_flag 0
0d16 : 0908            >            ora #decmode        ;ignore decimal mode bit
0d18 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0d1a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d1c : 28              >            plp         ;restore status
                        
0d1d : 08                       php
0d1e : 88                       dey             ;00
0d1f : 28                       plp
0d20 : 98                       tya
                                tst_a 0,zero
0d21 : 08              >            php         ;save flags
0d22 : c900            >            cmp #0     ;test result
                       >            trap_ne
0d24 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d26 : 68              >            pla         ;load status
0d27 : 48              >            pha
                       >            cmp_flag zero
0d28 : 0908            >            ora #decmode        ;ignore decimal mode bit
0d2a : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0d2c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d2e : 28              >            plp         ;restore status
                        
0d2f : 08                       php
0d30 : 88                       dey             ;ff
0d31 : 28                       plp
0d32 : 98                       tya
                                tst_a $ff,minus
0d33 : 08              >            php         ;save flags
0d34 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
0d36 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d38 : 68              >            pla         ;load status
0d39 : 48              >            pha
                       >            cmp_flag minus
0d3a : 0908            >            ora #decmode        ;ignore decimal mode bit
0d3c : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0d3e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d40 : 28              >            plp         ;restore status
                        
                        
                                load_flag $ff
0d41 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                        
0d43 : 48                       pha
0d44 : a2ff                     ldx #$ff        ;ff
0d46 : 8a                       txa
0d47 : 28                       plp             
0d48 : a8                       tay
                                tst_y $ff,$ff-zero
0d49 : 08              >            php         ;save flags
0d4a : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
0d4c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d4e : 68              >            pla         ;load status
0d4f : 48              >            pha
                       >            cmp_flag $ff-zero
0d50 : 0908            >            ora #decmode        ;ignore decimal mode bit
0d52 : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0d54 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d56 : 28              >            plp         ;restore status
                        
0d57 : 08                       php
0d58 : e8                       inx             ;00
0d59 : 8a                       txa
0d5a : 28                       plp
0d5b : a8                       tay
                                tst_y 0,$ff-minus
0d5c : 08              >            php         ;save flags
0d5d : c000            >            cpy #0     ;test result
                       >            trap_ne
0d5f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d61 : 68              >            pla         ;load status
0d62 : 48              >            pha
                       >            cmp_flag $ff-minus
0d63 : 0908            >            ora #decmode        ;ignore decimal mode bit
0d65 : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0d67 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d69 : 28              >            plp         ;restore status
                        
0d6a : 08                       php
0d6b : e8                       inx             ;01
0d6c : 8a                       txa
0d6d : 28                       plp
0d6e : a8                       tay
                                tst_y 1,$ff-minus-zero
0d6f : 08              >            php         ;save flags
0d70 : c001            >            cpy #1     ;test result
                       >            trap_ne
0d72 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d74 : 68              >            pla         ;load status
0d75 : 48              >            pha
                       >            cmp_flag $ff-minus-zero
0d76 : 0908            >            ora #decmode        ;ignore decimal mode bit
0d78 : c97d            >            cmp #($ff-minus-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0d7a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d7c : 28              >            plp         ;restore status
                        
                                load_flag 0
0d7d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                        
0d7f : 48                       pha
0d80 : a900                     lda #0
0d82 : 8a                       txa
0d83 : 28                       plp
0d84 : a8                       tay
                                tst_y 1,0
0d85 : 08              >            php         ;save flags
0d86 : c001            >            cpy #1     ;test result
                       >            trap_ne
0d88 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d8a : 68              >            pla         ;load status
0d8b : 48              >            pha
                       >            cmp_flag 0
0d8c : 0908            >            ora #decmode        ;ignore decimal mode bit
0d8e : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0d90 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d92 : 28              >            plp         ;restore status
                        
0d93 : 08                       php
0d94 : ca                       dex             ;00
0d95 : 8a                       txa
0d96 : 28                       plp
0d97 : a8                       tay
                                tst_y 0,zero
0d98 : 08              >            php         ;save flags
0d99 : c000            >            cpy #0     ;test result
                       >            trap_ne
0d9b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0d9d : 68              >            pla         ;load status
0d9e : 48              >            pha
                       >            cmp_flag zero
0d9f : 0908            >            ora #decmode        ;ignore decimal mode bit
0da1 : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0da3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0da5 : 28              >            plp         ;restore status
                        
0da6 : 08                       php
0da7 : ca                       dex             ;ff
0da8 : 8a                       txa
0da9 : 28                       plp
0daa : a8                       tay
                                tst_y $ff,minus
0dab : 08              >            php         ;save flags
0dac : c0ff            >            cpy #$ff     ;test result
                       >            trap_ne
0dae : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0db0 : 68              >            pla         ;load status
0db1 : 48              >            pha
                       >            cmp_flag minus
0db2 : 0908            >            ora #decmode        ;ignore decimal mode bit
0db4 : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0db6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0db8 : 28              >            plp         ;restore status
                        
                        
                        
                                load_flag $ff
0db9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                        
0dbb : 48                       pha
0dbc : a0ff                     ldy #$ff        ;ff
0dbe : 98                       tya
0dbf : 28                       plp
0dc0 : aa                       tax
                                tst_x $ff,$ff-zero
0dc1 : 08              >            php         ;save flags
0dc2 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
0dc4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0dc6 : 68              >            pla         ;load status
0dc7 : 48              >            pha
                       >            cmp_flag $ff-zero
0dc8 : 0908            >            ora #decmode        ;ignore decimal mode bit
0dca : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0dcc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0dce : 28              >            plp         ;restore status
                        
0dcf : 08                       php
0dd0 : c8                       iny             ;00
0dd1 : 98                       tya
0dd2 : 28                       plp
0dd3 : aa                       tax
                                tst_x 0,$ff-minus
0dd4 : 08              >            php         ;save flags
0dd5 : e000            >            cpx #0     ;test result
                       >            trap_ne
0dd7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0dd9 : 68              >            pla         ;load status
0dda : 48              >            pha
                       >            cmp_flag $ff-minus
0ddb : 0908            >            ora #decmode        ;ignore decimal mode bit
0ddd : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0ddf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0de1 : 28              >            plp         ;restore status
                        
0de2 : 08                       php
0de3 : c8                       iny             ;01
0de4 : 98                       tya
0de5 : 28                       plp
0de6 : aa                       tax
                                tst_x 1,$ff-minus-zero
0de7 : 08              >            php         ;save flags
0de8 : e001            >            cpx #1     ;test result
                       >            trap_ne
0dea : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0dec : 68              >            pla         ;load status
0ded : 48              >            pha
                       >            cmp_flag $ff-minus-zero
0dee : 0908            >            ora #decmode        ;ignore decimal mode bit
0df0 : c97d            >            cmp #($ff-minus-zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0df2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0df4 : 28              >            plp         ;restore status
                        
                                load_flag 0
0df5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                        
0df7 : 48                       pha
0df8 : a900                     lda #0          ;preset status
0dfa : 98                       tya
0dfb : 28                       plp
0dfc : aa                       tax
                                tst_x 1,0
0dfd : 08              >            php         ;save flags
0dfe : e001            >            cpx #1     ;test result
                       >            trap_ne
0e00 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0e02 : 68              >            pla         ;load status
0e03 : 48              >            pha
                       >            cmp_flag 0
0e04 : 0908            >            ora #decmode        ;ignore decimal mode bit
0e06 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0e08 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0e0a : 28              >            plp         ;restore status
                        
0e0b : 08                       php
0e0c : 88                       dey             ;00
0e0d : 98                       tya
0e0e : 28                       plp
0e0f : aa                       tax
                                tst_x 0,zero
0e10 : 08              >            php         ;save flags
0e11 : e000            >            cpx #0     ;test result
                       >            trap_ne
0e13 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0e15 : 68              >            pla         ;load status
0e16 : 48              >            pha
                       >            cmp_flag zero
0e17 : 0908            >            ora #decmode        ;ignore decimal mode bit
0e19 : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0e1b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0e1d : 28              >            plp         ;restore status
                        
0e1e : 08                       php
0e1f : 88                       dey             ;ff
0e20 : 98                       tya
0e21 : 28                       plp
0e22 : aa                       tax
                                tst_x $ff,minus
0e23 : 08              >            php         ;save flags
0e24 : e0ff            >            cpx #$ff     ;test result
                       >            trap_ne
0e26 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0e28 : 68              >            pla         ;load status
0e29 : 48              >            pha
                       >            cmp_flag minus
0e2a : 0908            >            ora #decmode        ;ignore decimal mode bit
0e2c : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
0e2e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0e30 : 28              >            plp         ;restore status
                        
                                next_test
0e31 : ad0002          >            lda test_case   ;previous test
0e34 : c90d            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0e36 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000e =                 >test_num = test_num + 1
0e38 : a90e            >            lda #test_num   ;*** next tests' number
0e3a : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                             
                        ;TSX sets NZ - TXS does not
                        ;  This section also tests for proper stack wrap around.
0e3d : a201                     ldx #1          ;01
                                set_stat $ff
                       >            load_flag $ff
0e3f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0e41 : 48              >            pha         ;use stack to load status
0e42 : 28              >            plp
                        
0e43 : 9a                       txs
0e44 : 08                       php
0e45 : ad0101                   lda $101
                                cmp_flag $ff
0e48 : 0908            >            ora #decmode        ;ignore decimal mode bit
0e4a : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0e4c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
0e4e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0e50 : 48              >            pha         ;use stack to load status
0e51 : 28              >            plp
                        
0e52 : 9a                       txs
0e53 : 08                       php
0e54 : ad0101                   lda $101
                                cmp_flag 0
0e57 : 0908            >            ora #decmode        ;ignore decimal mode bit
0e59 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0e5b : d0fe            >        bne *           ;failed not equal (non zero)
                        
0e5d : ca                       dex             ;00
                                set_stat $ff
                       >            load_flag $ff
0e5e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0e60 : 48              >            pha         ;use stack to load status
0e61 : 28              >            plp
                        
0e62 : 9a                       txs
0e63 : 08                       php
0e64 : ad0001                   lda $100
                                cmp_flag $ff
0e67 : 0908            >            ora #decmode        ;ignore decimal mode bit
0e69 : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0e6b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
0e6d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0e6f : 48              >            pha         ;use stack to load status
0e70 : 28              >            plp
                        
0e71 : 9a                       txs
0e72 : 08                       php
0e73 : ad0001                   lda $100
                                cmp_flag 0
0e76 : 0908            >            ora #decmode        ;ignore decimal mode bit
0e78 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0e7a : d0fe            >        bne *           ;failed not equal (non zero)
                        
0e7c : ca                       dex             ;ff
                                set_stat $ff
                       >            load_flag $ff
0e7d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0e7f : 48              >            pha         ;use stack to load status
0e80 : 28              >            plp
                        
0e81 : 9a                       txs
0e82 : 08                       php
0e83 : adff01                   lda $1ff
                                cmp_flag $ff
0e86 : 0908            >            ora #decmode        ;ignore decimal mode bit
0e88 : c9ff            >            cmp #($ff|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0e8a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
0e8c : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0e8e : 48              >            pha         ;use stack to load status
0e8f : 28              >            plp
                        
0e90 : 9a                       txs
0e91 : 08                       php
0e92 : adff01                   lda $1ff
                                cmp_flag 0
0e95 : 0908            >            ora #decmode        ;ignore decimal mode bit
0e97 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                        
                                
0e99 : a201                     ldx #1
0e9b : 9a                       txs             ;sp=01
                                set_stat $ff
                       >            load_flag $ff
0e9c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0e9e : 48              >            pha         ;use stack to load status
0e9f : 28              >            plp
                        
0ea0 : ba                       tsx             ;clears Z, N
0ea1 : 08                       php             ;sp=00
0ea2 : e001                     cpx #1
                                trap_ne
0ea4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0ea6 : ad0101                   lda $101
                                cmp_flag $ff-minus-zero
0ea9 : 0908            >            ora #decmode        ;ignore decimal mode bit
0eab : c97d            >            cmp #($ff-minus-zero|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0ead : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
0eaf : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0eb1 : 48              >            pha         ;use stack to load status
0eb2 : 28              >            plp
                        
0eb3 : ba                       tsx             ;clears N, sets Z
0eb4 : 08                       php             ;sp=ff
0eb5 : e000                     cpx #0
                                trap_ne
0eb7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0eb9 : ad0001                   lda $100
                                cmp_flag $ff-minus
0ebc : 0908            >            ora #decmode        ;ignore decimal mode bit
0ebe : c97f            >            cmp #($ff-minus|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0ec0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
0ec2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0ec4 : 48              >            pha         ;use stack to load status
0ec5 : 28              >            plp
                        
0ec6 : ba                       tsx             ;clears N, sets Z
0ec7 : 08                       php             ;sp=fe
0ec8 : e0ff                     cpx #$ff
                                trap_ne
0eca : d0fe            >        bne *           ;failed not equal (non zero)
                        
0ecc : adff01                   lda $1ff
                                cmp_flag $ff-zero
0ecf : 0908            >            ora #decmode        ;ignore decimal mode bit
0ed1 : c9fd            >            cmp #($ff-zero|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0ed3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                
0ed5 : a201                     ldx #1
0ed7 : 9a                       txs             ;sp=01
                                set_stat 0
                       >            load_flag 0
0ed8 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0eda : 48              >            pha         ;use stack to load status
0edb : 28              >            plp
                        
0edc : ba                       tsx             ;clears Z, N
0edd : 08                       php             ;sp=00
0ede : e001                     cpx #1
                                trap_ne
0ee0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0ee2 : ad0101                   lda $101
                                cmp_flag 0
0ee5 : 0908            >            ora #decmode        ;ignore decimal mode bit
0ee7 : c938            >            cmp #(0|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0ee9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
0eeb : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0eed : 48              >            pha         ;use stack to load status
0eee : 28              >            plp
                        
0eef : ba                       tsx             ;clears N, sets Z
0ef0 : 08                       php             ;sp=ff
0ef1 : e000                     cpx #0
                                trap_ne
0ef3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0ef5 : ad0001                   lda $100
                                cmp_flag zero
0ef8 : 0908            >            ora #decmode        ;ignore decimal mode bit
0efa : c93a            >            cmp #(zero|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0efc : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
0efe : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0f00 : 48              >            pha         ;use stack to load status
0f01 : 28              >            plp
                        
0f02 : ba                       tsx             ;clears N, sets Z
0f03 : 08                       php             ;sp=fe
0f04 : e0ff                     cpx #$ff
                                trap_ne
0f06 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0f08 : adff01                   lda $1ff
                                cmp_flag minus
0f0b : 0908            >            ora #decmode        ;ignore decimal mode bit
0f0d : c9b8            >            cmp #(minus|faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
0f0f : d0fe            >        bne *           ;failed not equal (non zero)
                        
0f11 : 68                       pla             ;sp=ff
                                next_test
0f12 : ad0002          >            lda test_case   ;previous test
0f15 : c90e            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0f17 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
000f =                 >test_num = test_num + 1
0f19 : a90f            >            lda #test_num   ;*** next tests' number
0f1b : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; testing index register load & store LDY LDX STY STX all addressing modes
                        ; LDX / STX - zp,y / abs,y
0f1e : a003                     ldy #3
0f20 :                  tldx    
                                set_stat 0
                       >            load_flag 0
0f20 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0f22 : 48              >            pha         ;use stack to load status
0f23 : 28              >            plp
                        
0f24 : b615                     ldx zp1,y
0f26 : 08                       php         ;test stores do not alter flags
0f27 : 8a                       txa
0f28 : 49c3                     eor #$c3
0f2a : 28                       plp
0f2b : 990302                   sta abst,y
0f2e : 08                       php         ;flags after load/store sequence
0f2f : 49c3                     eor #$c3
0f31 : d91802                   cmp abs1,y  ;test result
                                trap_ne
0f34 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0f36 : 68                       pla         ;load status
                                eor_flag 0
0f37 : 0908            >            ora #decmode        ;ignore decimal mode bit
0f39 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
0f3b : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
0f3e : d0fe            >        bne *           ;failed not equal (non zero)
                        
0f40 : 88                       dey
0f41 : 10dd                     bpl tldx                  
                        
0f43 : a003                     ldy #3
0f45 :                  tldx1   
                                set_stat $ff
                       >            load_flag $ff
0f45 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0f47 : 48              >            pha         ;use stack to load status
0f48 : 28              >            plp
                        
0f49 : b615                     ldx zp1,y
0f4b : 08                       php         ;test stores do not alter flags
0f4c : 8a                       txa
0f4d : 49c3                     eor #$c3
0f4f : 28                       plp
0f50 : 990302                   sta abst,y
0f53 : 08                       php         ;flags after load/store sequence
0f54 : 49c3                     eor #$c3
0f56 : d91802                   cmp abs1,y  ;test result
                                trap_ne
0f59 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0f5b : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
0f5c : 0908            >            ora #decmode        ;ignore decimal mode bit
0f5e : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
0f60 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
0f63 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0f65 : 88                       dey
0f66 : 10dd                     bpl tldx1                  
                        
0f68 : a003                     ldy #3
0f6a :                  tldx2   
                                set_stat 0
                       >            load_flag 0
0f6a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
0f6c : 48              >            pha         ;use stack to load status
0f6d : 28              >            plp
                        
0f6e : be1802                   ldx abs1,y
0f71 : 08                       php         ;test stores do not alter flags
0f72 : 8a                       txa
0f73 : 49c3                     eor #$c3
0f75 : aa                       tax
0f76 : 28                       plp
0f77 : 960c                     stx zpt,y
0f79 : 08                       php         ;flags after load/store sequence
0f7a : 49c3                     eor #$c3
0f7c : d91500                   cmp zp1,y   ;test result
                                trap_ne
0f7f : d0fe            >        bne *           ;failed not equal (non zero)
                        
0f81 : 68                       pla         ;load status
                                eor_flag 0
0f82 : 0908            >            ora #decmode        ;ignore decimal mode bit
0f84 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
0f86 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
0f89 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0f8b : 88                       dey
0f8c : 10dc                     bpl tldx2                  
                        
0f8e : a003                     ldy #3
0f90 :                  tldx3   
                                set_stat $ff
                       >            load_flag $ff
0f90 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
0f92 : 48              >            pha         ;use stack to load status
0f93 : 28              >            plp
                        
0f94 : be1802                   ldx abs1,y
0f97 : 08                       php         ;test stores do not alter flags
0f98 : 8a                       txa
0f99 : 49c3                     eor #$c3
0f9b : aa                       tax
0f9c : 28                       plp
0f9d : 960c                     stx zpt,y
0f9f : 08                       php         ;flags after load/store sequence
0fa0 : 49c3                     eor #$c3
0fa2 : d91500                   cmp zp1,y   ;test result
                                trap_ne
0fa5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0fa7 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
0fa8 : 0908            >            ora #decmode        ;ignore decimal mode bit
0faa : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
0fac : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
0faf : d0fe            >        bne *           ;failed not equal (non zero)
                        
0fb1 : 88                       dey
0fb2 : 10dc                     bpl tldx3
                                
0fb4 : a003                     ldy #3      ;testing store result
0fb6 : a200                     ldx #0
0fb8 : b90c00           tstx    lda zpt,y
0fbb : 49c3                     eor #$c3
0fbd : d91500                   cmp zp1,y
                                trap_ne     ;store to zp data
0fc0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
0fc2 : 960c                     stx zpt,y   ;clear                
0fc4 : b90302                   lda abst,y
0fc7 : 49c3                     eor #$c3
0fc9 : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
0fcc : d0fe            >        bne *           ;failed not equal (non zero)
                        
0fce : 8a                       txa
0fcf : 990302                   sta abst,y  ;clear                
0fd2 : 88                       dey
0fd3 : 10e3                     bpl tstx
                                next_test
0fd5 : ad0002          >            lda test_case   ;previous test
0fd8 : c90f            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
0fda : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0010 =                 >test_num = test_num + 1
0fdc : a910            >            lda #test_num   ;*** next tests' number
0fde : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; indexed wraparound test (only zp should wrap)
0fe1 : a0fd                     ldy #3+$fa
0fe3 : b61b             tldx4   ldx zp1-$fa&$ff,y   ;wrap on indexed zp
0fe5 : 8a                       txa
0fe6 : 990901                   sta abst-$fa,y      ;no STX abs,y!
0fe9 : 88                       dey
0fea : c0fa                     cpy #$fa
0fec : b0f5                     bcs tldx4                  
0fee : a0fd                     ldy #3+$fa
0ff0 : be1e01           tldx5   ldx abs1-$fa,y      ;no wrap on indexed abs
0ff3 : 9612                     stx zpt-$fa&$ff,y
0ff5 : 88                       dey
0ff6 : c0fa                     cpy #$fa
0ff8 : b0f6                     bcs tldx5                  
0ffa : a003                     ldy #3      ;testing wraparound result
0ffc : a200                     ldx #0
0ffe : b90c00           tstx1   lda zpt,y
1001 : d91500                   cmp zp1,y
                                trap_ne     ;store to zp data
1004 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1006 : 960c                     stx zpt,y   ;clear                
1008 : b90302                   lda abst,y
100b : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
100e : d0fe            >        bne *           ;failed not equal (non zero)
                        
1010 : 8a                       txa
1011 : 990302                   sta abst,y  ;clear                
1014 : 88                       dey
1015 : 10e7                     bpl tstx1
                                next_test
1017 : ad0002          >            lda test_case   ;previous test
101a : c910            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
101c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0011 =                 >test_num = test_num + 1
101e : a911            >            lda #test_num   ;*** next tests' number
1020 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; LDY / STY - zp,x / abs,x
1023 : a203                     ldx #3
1025 :                  tldy    
                                set_stat 0
                       >            load_flag 0
1025 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1027 : 48              >            pha         ;use stack to load status
1028 : 28              >            plp
                        
1029 : b415                     ldy zp1,x
102b : 08                       php         ;test stores do not alter flags
102c : 98                       tya
102d : 49c3                     eor #$c3
102f : 28                       plp
1030 : 9d0302                   sta abst,x
1033 : 08                       php         ;flags after load/store sequence
1034 : 49c3                     eor #$c3
1036 : dd1802                   cmp abs1,x  ;test result
                                trap_ne
1039 : d0fe            >        bne *           ;failed not equal (non zero)
                        
103b : 68                       pla         ;load status
                                eor_flag 0
103c : 0908            >            ora #decmode        ;ignore decimal mode bit
103e : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1040 : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
1043 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1045 : ca                       dex
1046 : 10dd                     bpl tldy                  
                        
1048 : a203                     ldx #3
104a :                  tldy1   
                                set_stat $ff
                       >            load_flag $ff
104a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
104c : 48              >            pha         ;use stack to load status
104d : 28              >            plp
                        
104e : b415                     ldy zp1,x
1050 : 08                       php         ;test stores do not alter flags
1051 : 98                       tya
1052 : 49c3                     eor #$c3
1054 : 28                       plp
1055 : 9d0302                   sta abst,x
1058 : 08                       php         ;flags after load/store sequence
1059 : 49c3                     eor #$c3
105b : dd1802                   cmp abs1,x  ;test result
                                trap_ne
105e : d0fe            >        bne *           ;failed not equal (non zero)
                        
1060 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1061 : 0908            >            ora #decmode        ;ignore decimal mode bit
1063 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1065 : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
1068 : d0fe            >        bne *           ;failed not equal (non zero)
                        
106a : ca                       dex
106b : 10dd                     bpl tldy1                  
                        
106d : a203                     ldx #3
106f :                  tldy2   
                                set_stat 0
                       >            load_flag 0
106f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1071 : 48              >            pha         ;use stack to load status
1072 : 28              >            plp
                        
1073 : bc1802                   ldy abs1,x
1076 : 08                       php         ;test stores do not alter flags
1077 : 98                       tya
1078 : 49c3                     eor #$c3
107a : a8                       tay
107b : 28                       plp
107c : 940c                     sty zpt,x
107e : 08                       php         ;flags after load/store sequence
107f : 49c3                     eor #$c3
1081 : d515                     cmp zp1,x   ;test result
                                trap_ne
1083 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1085 : 68                       pla         ;load status
                                eor_flag 0
1086 : 0908            >            ora #decmode        ;ignore decimal mode bit
1088 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
108a : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
108d : d0fe            >        bne *           ;failed not equal (non zero)
                        
108f : ca                       dex
1090 : 10dd                     bpl tldy2                  
                        
1092 : a203                     ldx #3
1094 :                  tldy3
                                set_stat $ff
                       >            load_flag $ff
1094 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1096 : 48              >            pha         ;use stack to load status
1097 : 28              >            plp
                        
1098 : bc1802                   ldy abs1,x
109b : 08                       php         ;test stores do not alter flags
109c : 98                       tya
109d : 49c3                     eor #$c3
109f : a8                       tay
10a0 : 28                       plp
10a1 : 940c                     sty zpt,x
10a3 : 08                       php         ;flags after load/store sequence
10a4 : 49c3                     eor #$c3
10a6 : d515                     cmp zp1,x   ;test result
                                trap_ne
10a8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
10aa : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
10ab : 0908            >            ora #decmode        ;ignore decimal mode bit
10ad : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
10af : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
10b2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
10b4 : ca                       dex
10b5 : 10dd                     bpl tldy3
                        
10b7 : a203                     ldx #3      ;testing store result
10b9 : a000                     ldy #0
10bb : b50c             tsty    lda zpt,x
10bd : 49c3                     eor #$c3
10bf : d515                     cmp zp1,x
                                trap_ne     ;store to zp,x data
10c1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
10c3 : 940c                     sty zpt,x   ;clear                
10c5 : bd0302                   lda abst,x
10c8 : 49c3                     eor #$c3
10ca : dd1802                   cmp abs1,x
                                trap_ne     ;store to abs,x data
10cd : d0fe            >        bne *           ;failed not equal (non zero)
                        
10cf : 8a                       txa
10d0 : 9d0302                   sta abst,x  ;clear                
10d3 : ca                       dex
10d4 : 10e5                     bpl tsty
                                next_test
10d6 : ad0002          >            lda test_case   ;previous test
10d9 : c911            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
10db : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0012 =                 >test_num = test_num + 1
10dd : a912            >            lda #test_num   ;*** next tests' number
10df : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; indexed wraparound test (only zp should wrap)
10e2 : a2fd                     ldx #3+$fa
10e4 : b41b             tldy4   ldy zp1-$fa&$ff,x   ;wrap on indexed zp
10e6 : 98                       tya
10e7 : 9d0901                   sta abst-$fa,x      ;no STX abs,x!
10ea : ca                       dex
10eb : e0fa                     cpx #$fa
10ed : b0f5                     bcs tldy4                  
10ef : a2fd                     ldx #3+$fa
10f1 : bc1e01           tldy5   ldy abs1-$fa,x      ;no wrap on indexed abs
10f4 : 9412                     sty zpt-$fa&$ff,x
10f6 : ca                       dex
10f7 : e0fa                     cpx #$fa
10f9 : b0f6                     bcs tldy5                  
10fb : a203                     ldx #3      ;testing wraparound result
10fd : a000                     ldy #0
10ff : b50c             tsty1   lda zpt,x
1101 : d515                     cmp zp1,x
                                trap_ne     ;store to zp,x data
1103 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1105 : 940c                     sty zpt,x   ;clear                
1107 : bd0302                   lda abst,x
110a : dd1802                   cmp abs1,x
                                trap_ne     ;store to abs,x data
110d : d0fe            >        bne *           ;failed not equal (non zero)
                        
110f : 8a                       txa
1110 : 9d0302                   sta abst,x  ;clear                
1113 : ca                       dex
1114 : 10e9                     bpl tsty1
                                next_test
1116 : ad0002          >            lda test_case   ;previous test
1119 : c912            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
111b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0013 =                 >test_num = test_num + 1
111d : a913            >            lda #test_num   ;*** next tests' number
111f : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDX / STX - zp / abs / #
                                set_stat 0  
                       >            load_flag 0  
1122 : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
1124 : 48              >            pha         ;use stack to load status
1125 : 28              >            plp
                        
1126 : a615                     ldx zp1
1128 : 08                       php         ;test stores do not alter flags
1129 : 8a                       txa
112a : 49c3                     eor #$c3
112c : aa                       tax
112d : 28                       plp
112e : 8e0302                   stx abst
1131 : 08                       php         ;flags after load/store sequence
1132 : 49c3                     eor #$c3
1134 : aa                       tax
1135 : e0c3                     cpx #$c3    ;test result
                                trap_ne
1137 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1139 : 68                       pla         ;load status
                                eor_flag 0
113a : 0908            >            ora #decmode        ;ignore decimal mode bit
113c : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
113e : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1141 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1143 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1145 : 48              >            pha         ;use stack to load status
1146 : 28              >            plp
                        
1147 : a616                     ldx zp1+1
1149 : 08                       php         ;test stores do not alter flags
114a : 8a                       txa
114b : 49c3                     eor #$c3
114d : aa                       tax
114e : 28                       plp
114f : 8e0402                   stx abst+1
1152 : 08                       php         ;flags after load/store sequence
1153 : 49c3                     eor #$c3
1155 : aa                       tax
1156 : e082                     cpx #$82    ;test result
                                trap_ne
1158 : d0fe            >        bne *           ;failed not equal (non zero)
                        
115a : 68                       pla         ;load status
                                eor_flag 0
115b : 0908            >            ora #decmode        ;ignore decimal mode bit
115d : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
115f : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1162 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1164 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1166 : 48              >            pha         ;use stack to load status
1167 : 28              >            plp
                        
1168 : a617                     ldx zp1+2
116a : 08                       php         ;test stores do not alter flags
116b : 8a                       txa
116c : 49c3                     eor #$c3
116e : aa                       tax
116f : 28                       plp
1170 : 8e0502                   stx abst+2
1173 : 08                       php         ;flags after load/store sequence
1174 : 49c3                     eor #$c3
1176 : aa                       tax
1177 : e041                     cpx #$41    ;test result
                                trap_ne
1179 : d0fe            >        bne *           ;failed not equal (non zero)
                        
117b : 68                       pla         ;load status
                                eor_flag 0
117c : 0908            >            ora #decmode        ;ignore decimal mode bit
117e : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1180 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1183 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1185 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1187 : 48              >            pha         ;use stack to load status
1188 : 28              >            plp
                        
1189 : a618                     ldx zp1+3
118b : 08                       php         ;test stores do not alter flags
118c : 8a                       txa
118d : 49c3                     eor #$c3
118f : aa                       tax
1190 : 28                       plp
1191 : 8e0602                   stx abst+3
1194 : 08                       php         ;flags after load/store sequence
1195 : 49c3                     eor #$c3
1197 : aa                       tax
1198 : e000                     cpx #0      ;test result
                                trap_ne
119a : d0fe            >        bne *           ;failed not equal (non zero)
                        
119c : 68                       pla         ;load status
                                eor_flag 0
119d : 0908            >            ora #decmode        ;ignore decimal mode bit
119f : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
11a1 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
11a4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
11a6 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
11a8 : 48              >            pha         ;use stack to load status
11a9 : 28              >            plp
                        
11aa : a615                     ldx zp1  
11ac : 08                       php         ;test stores do not alter flags
11ad : 8a                       txa
11ae : 49c3                     eor #$c3
11b0 : aa                       tax
11b1 : 28                       plp
11b2 : 8e0302                   stx abst  
11b5 : 08                       php         ;flags after load/store sequence
11b6 : 49c3                     eor #$c3
11b8 : aa                       tax
11b9 : e0c3                     cpx #$c3    ;test result
                                trap_ne     ;
11bb : d0fe            >        bne *           ;failed not equal (non zero)
                        
11bd : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
11be : 0908            >            ora #decmode        ;ignore decimal mode bit
11c0 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
11c2 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
11c5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
11c7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
11c9 : 48              >            pha         ;use stack to load status
11ca : 28              >            plp
                        
11cb : a616                     ldx zp1+1
11cd : 08                       php         ;test stores do not alter flags
11ce : 8a                       txa
11cf : 49c3                     eor #$c3
11d1 : aa                       tax
11d2 : 28                       plp
11d3 : 8e0402                   stx abst+1
11d6 : 08                       php         ;flags after load/store sequence
11d7 : 49c3                     eor #$c3
11d9 : aa                       tax
11da : e082                     cpx #$82    ;test result
                                trap_ne
11dc : d0fe            >        bne *           ;failed not equal (non zero)
                        
11de : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
11df : 0908            >            ora #decmode        ;ignore decimal mode bit
11e1 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
11e3 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
11e6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
11e8 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
11ea : 48              >            pha         ;use stack to load status
11eb : 28              >            plp
                        
11ec : a617                     ldx zp1+2
11ee : 08                       php         ;test stores do not alter flags
11ef : 8a                       txa
11f0 : 49c3                     eor #$c3
11f2 : aa                       tax
11f3 : 28                       plp
11f4 : 8e0502                   stx abst+2
11f7 : 08                       php         ;flags after load/store sequence
11f8 : 49c3                     eor #$c3
11fa : aa                       tax
11fb : e041                     cpx #$41    ;test result
                                trap_ne     ;
11fd : d0fe            >        bne *           ;failed not equal (non zero)
                        
11ff : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1200 : 0908            >            ora #decmode        ;ignore decimal mode bit
1202 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1204 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1207 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1209 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
120b : 48              >            pha         ;use stack to load status
120c : 28              >            plp
                        
120d : a618                     ldx zp1+3
120f : 08                       php         ;test stores do not alter flags
1210 : 8a                       txa
1211 : 49c3                     eor #$c3
1213 : aa                       tax
1214 : 28                       plp
1215 : 8e0602                   stx abst+3
1218 : 08                       php         ;flags after load/store sequence
1219 : 49c3                     eor #$c3
121b : aa                       tax
121c : e000                     cpx #0      ;test result
                                trap_ne
121e : d0fe            >        bne *           ;failed not equal (non zero)
                        
1220 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1221 : 0908            >            ora #decmode        ;ignore decimal mode bit
1223 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1225 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
1228 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat 0
                       >            load_flag 0
122a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
122c : 48              >            pha         ;use stack to load status
122d : 28              >            plp
                        
122e : ae1802                   ldx abs1  
1231 : 08                       php         ;test stores do not alter flags
1232 : 8a                       txa
1233 : 49c3                     eor #$c3
1235 : aa                       tax
1236 : 28                       plp
1237 : 860c                     stx zpt  
1239 : 08                       php         ;flags after load/store sequence
123a : 49c3                     eor #$c3
123c : c515                     cmp zp1     ;test result
                                trap_ne
123e : d0fe            >        bne *           ;failed not equal (non zero)
                        
1240 : 68                       pla         ;load status
                                eor_flag 0
1241 : 0908            >            ora #decmode        ;ignore decimal mode bit
1243 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1245 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1248 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
124a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
124c : 48              >            pha         ;use stack to load status
124d : 28              >            plp
                        
124e : ae1902                   ldx abs1+1
1251 : 08                       php         ;test stores do not alter flags
1252 : 8a                       txa
1253 : 49c3                     eor #$c3
1255 : aa                       tax
1256 : 28                       plp
1257 : 860d                     stx zpt+1
1259 : 08                       php         ;flags after load/store sequence
125a : 49c3                     eor #$c3
125c : c516                     cmp zp1+1   ;test result
                                trap_ne
125e : d0fe            >        bne *           ;failed not equal (non zero)
                        
1260 : 68                       pla         ;load status
                                eor_flag 0
1261 : 0908            >            ora #decmode        ;ignore decimal mode bit
1263 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1265 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1268 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
126a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
126c : 48              >            pha         ;use stack to load status
126d : 28              >            plp
                        
126e : ae1a02                   ldx abs1+2
1271 : 08                       php         ;test stores do not alter flags
1272 : 8a                       txa
1273 : 49c3                     eor #$c3
1275 : aa                       tax
1276 : 28                       plp
1277 : 860e                     stx zpt+2
1279 : 08                       php         ;flags after load/store sequence
127a : 49c3                     eor #$c3
127c : c517                     cmp zp1+2   ;test result
                                trap_ne
127e : d0fe            >        bne *           ;failed not equal (non zero)
                        
1280 : 68                       pla         ;load status
                                eor_flag 0
1281 : 0908            >            ora #decmode        ;ignore decimal mode bit
1283 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1285 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1288 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
128a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
128c : 48              >            pha         ;use stack to load status
128d : 28              >            plp
                        
128e : ae1b02                   ldx abs1+3
1291 : 08                       php         ;test stores do not alter flags
1292 : 8a                       txa
1293 : 49c3                     eor #$c3
1295 : aa                       tax
1296 : 28                       plp
1297 : 860f                     stx zpt+3
1299 : 08                       php         ;flags after load/store sequence
129a : 49c3                     eor #$c3
129c : c518                     cmp zp1+3   ;test result
                                trap_ne
129e : d0fe            >        bne *           ;failed not equal (non zero)
                        
12a0 : 68                       pla         ;load status
                                eor_flag 0
12a1 : 0908            >            ora #decmode        ;ignore decimal mode bit
12a3 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
12a5 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
12a8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
12aa : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
12ac : 48              >            pha         ;use stack to load status
12ad : 28              >            plp
                        
12ae : ae1802                   ldx abs1  
12b1 : 08                       php         ;test stores do not alter flags
12b2 : 8a                       txa
12b3 : 49c3                     eor #$c3
12b5 : aa                       tax
12b6 : 28                       plp
12b7 : 860c                     stx zpt  
12b9 : 08                       php         ;flags after load/store sequence
12ba : 49c3                     eor #$c3
12bc : aa                       tax
12bd : e415                     cpx zp1     ;test result
                                trap_ne
12bf : d0fe            >        bne *           ;failed not equal (non zero)
                        
12c1 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
12c2 : 0908            >            ora #decmode        ;ignore decimal mode bit
12c4 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
12c6 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
12c9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
12cb : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
12cd : 48              >            pha         ;use stack to load status
12ce : 28              >            plp
                        
12cf : ae1902                   ldx abs1+1
12d2 : 08                       php         ;test stores do not alter flags
12d3 : 8a                       txa
12d4 : 49c3                     eor #$c3
12d6 : aa                       tax
12d7 : 28                       plp
12d8 : 860d                     stx zpt+1
12da : 08                       php         ;flags after load/store sequence
12db : 49c3                     eor #$c3
12dd : aa                       tax
12de : e416                     cpx zp1+1   ;test result
                                trap_ne
12e0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
12e2 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
12e3 : 0908            >            ora #decmode        ;ignore decimal mode bit
12e5 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
12e7 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
12ea : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
12ec : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
12ee : 48              >            pha         ;use stack to load status
12ef : 28              >            plp
                        
12f0 : ae1a02                   ldx abs1+2
12f3 : 08                       php         ;test stores do not alter flags
12f4 : 8a                       txa
12f5 : 49c3                     eor #$c3
12f7 : aa                       tax
12f8 : 28                       plp
12f9 : 860e                     stx zpt+2
12fb : 08                       php         ;flags after load/store sequence
12fc : 49c3                     eor #$c3
12fe : aa                       tax
12ff : e417                     cpx zp1+2   ;test result
                                trap_ne
1301 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1303 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1304 : 0908            >            ora #decmode        ;ignore decimal mode bit
1306 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1308 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
130b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
130d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
130f : 48              >            pha         ;use stack to load status
1310 : 28              >            plp
                        
1311 : ae1b02                   ldx abs1+3
1314 : 08                       php         ;test stores do not alter flags
1315 : 8a                       txa
1316 : 49c3                     eor #$c3
1318 : aa                       tax
1319 : 28                       plp
131a : 860f                     stx zpt+3
131c : 08                       php         ;flags after load/store sequence
131d : 49c3                     eor #$c3
131f : aa                       tax
1320 : e418                     cpx zp1+3   ;test result
                                trap_ne
1322 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1324 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1325 : 0908            >            ora #decmode        ;ignore decimal mode bit
1327 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1329 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
132c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat 0  
                       >            load_flag 0  
132e : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
1330 : 48              >            pha         ;use stack to load status
1331 : 28              >            plp
                        
1332 : a2c3                     ldx #$c3
1334 : 08                       php
1335 : ec1802                   cpx abs1    ;test result
                                trap_ne
1338 : d0fe            >        bne *           ;failed not equal (non zero)
                        
133a : 68                       pla         ;load status
                                eor_flag 0
133b : 0908            >            ora #decmode        ;ignore decimal mode bit
133d : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
133f : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1342 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1344 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1346 : 48              >            pha         ;use stack to load status
1347 : 28              >            plp
                        
1348 : a282                     ldx #$82
134a : 08                       php
134b : ec1902                   cpx abs1+1  ;test result
                                trap_ne
134e : d0fe            >        bne *           ;failed not equal (non zero)
                        
1350 : 68                       pla         ;load status
                                eor_flag 0
1351 : 0908            >            ora #decmode        ;ignore decimal mode bit
1353 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1355 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1358 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
135a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
135c : 48              >            pha         ;use stack to load status
135d : 28              >            plp
                        
135e : a241                     ldx #$41
1360 : 08                       php
1361 : ec1a02                   cpx abs1+2  ;test result
                                trap_ne
1364 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1366 : 68                       pla         ;load status
                                eor_flag 0
1367 : 0908            >            ora #decmode        ;ignore decimal mode bit
1369 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
136b : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
136e : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1370 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1372 : 48              >            pha         ;use stack to load status
1373 : 28              >            plp
                        
1374 : a200                     ldx #0
1376 : 08                       php
1377 : ec1b02                   cpx abs1+3  ;test result
                                trap_ne
137a : d0fe            >        bne *           ;failed not equal (non zero)
                        
137c : 68                       pla         ;load status
                                eor_flag 0
137d : 0908            >            ora #decmode        ;ignore decimal mode bit
137f : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1381 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
1384 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
1386 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1388 : 48              >            pha         ;use stack to load status
1389 : 28              >            plp
                        
138a : a2c3                     ldx #$c3  
138c : 08                       php
138d : ec1802                   cpx abs1    ;test result
                                trap_ne
1390 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1392 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1393 : 0908            >            ora #decmode        ;ignore decimal mode bit
1395 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1397 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
139a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
139c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
139e : 48              >            pha         ;use stack to load status
139f : 28              >            plp
                        
13a0 : a282                     ldx #$82
13a2 : 08                       php
13a3 : ec1902                   cpx abs1+1  ;test result
                                trap_ne
13a6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
13a8 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
13a9 : 0908            >            ora #decmode        ;ignore decimal mode bit
13ab : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
13ad : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
13b0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
13b2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
13b4 : 48              >            pha         ;use stack to load status
13b5 : 28              >            plp
                        
13b6 : a241                     ldx #$41
13b8 : 08                       php
13b9 : ec1a02                   cpx abs1+2  ;test result
                                trap_ne
13bc : d0fe            >        bne *           ;failed not equal (non zero)
                        
13be : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
13bf : 0908            >            ora #decmode        ;ignore decimal mode bit
13c1 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
13c3 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
13c6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
13c8 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
13ca : 48              >            pha         ;use stack to load status
13cb : 28              >            plp
                        
13cc : a200                     ldx #0
13ce : 08                       php
13cf : ec1b02                   cpx abs1+3  ;test result
                                trap_ne
13d2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
13d4 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
13d5 : 0908            >            ora #decmode        ;ignore decimal mode bit
13d7 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
13d9 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
13dc : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
13de : a200                     ldx #0
13e0 : a50c                     lda zpt  
13e2 : 49c3                     eor #$c3
13e4 : c515                     cmp zp1  
                                trap_ne     ;store to zp data
13e6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
13e8 : 860c                     stx zpt     ;clear                
13ea : ad0302                   lda abst  
13ed : 49c3                     eor #$c3
13ef : cd1802                   cmp abs1  
                                trap_ne     ;store to abs data
13f2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
13f4 : 8e0302                   stx abst    ;clear                
13f7 : a50d                     lda zpt+1
13f9 : 49c3                     eor #$c3
13fb : c516                     cmp zp1+1
                                trap_ne     ;store to zp data
13fd : d0fe            >        bne *           ;failed not equal (non zero)
                        
13ff : 860d                     stx zpt+1   ;clear                
1401 : ad0402                   lda abst+1
1404 : 49c3                     eor #$c3
1406 : cd1902                   cmp abs1+1
                                trap_ne     ;store to abs data
1409 : d0fe            >        bne *           ;failed not equal (non zero)
                        
140b : 8e0402                   stx abst+1  ;clear                
140e : a50e                     lda zpt+2
1410 : 49c3                     eor #$c3
1412 : c517                     cmp zp1+2
                                trap_ne     ;store to zp data
1414 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1416 : 860e                     stx zpt+2   ;clear                
1418 : ad0502                   lda abst+2
141b : 49c3                     eor #$c3
141d : cd1a02                   cmp abs1+2
                                trap_ne     ;store to abs data
1420 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1422 : 8e0502                   stx abst+2  ;clear                
1425 : a50f                     lda zpt+3
1427 : 49c3                     eor #$c3
1429 : c518                     cmp zp1+3
                                trap_ne     ;store to zp data
142b : d0fe            >        bne *           ;failed not equal (non zero)
                        
142d : 860f                     stx zpt+3   ;clear                
142f : ad0602                   lda abst+3
1432 : 49c3                     eor #$c3
1434 : cd1b02                   cmp abs1+3
                                trap_ne     ;store to abs data
1437 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1439 : 8e0602                   stx abst+3  ;clear                
                                next_test
143c : ad0002          >            lda test_case   ;previous test
143f : c913            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1441 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0014 =                 >test_num = test_num + 1
1443 : a914            >            lda #test_num   ;*** next tests' number
1445 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDY / STY - zp / abs / #
                                set_stat 0
                       >            load_flag 0
1448 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
144a : 48              >            pha         ;use stack to load status
144b : 28              >            plp
                        
144c : a415                     ldy zp1  
144e : 08                       php         ;test stores do not alter flags
144f : 98                       tya
1450 : 49c3                     eor #$c3
1452 : a8                       tay
1453 : 28                       plp
1454 : 8c0302                   sty abst  
1457 : 08                       php         ;flags after load/store sequence
1458 : 49c3                     eor #$c3
145a : a8                       tay
145b : c0c3                     cpy #$c3    ;test result
                                trap_ne
145d : d0fe            >        bne *           ;failed not equal (non zero)
                        
145f : 68                       pla         ;load status
                                eor_flag 0
1460 : 0908            >            ora #decmode        ;ignore decimal mode bit
1462 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1464 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1467 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1469 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
146b : 48              >            pha         ;use stack to load status
146c : 28              >            plp
                        
146d : a416                     ldy zp1+1
146f : 08                       php         ;test stores do not alter flags
1470 : 98                       tya
1471 : 49c3                     eor #$c3
1473 : a8                       tay
1474 : 28                       plp
1475 : 8c0402                   sty abst+1
1478 : 08                       php         ;flags after load/store sequence
1479 : 49c3                     eor #$c3
147b : a8                       tay
147c : c082                     cpy #$82    ;test result
                                trap_ne
147e : d0fe            >        bne *           ;failed not equal (non zero)
                        
1480 : 68                       pla         ;load status
                                eor_flag 0
1481 : 0908            >            ora #decmode        ;ignore decimal mode bit
1483 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1485 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1488 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
148a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
148c : 48              >            pha         ;use stack to load status
148d : 28              >            plp
                        
148e : a417                     ldy zp1+2
1490 : 08                       php         ;test stores do not alter flags
1491 : 98                       tya
1492 : 49c3                     eor #$c3
1494 : a8                       tay
1495 : 28                       plp
1496 : 8c0502                   sty abst+2
1499 : 08                       php         ;flags after load/store sequence
149a : 49c3                     eor #$c3
149c : a8                       tay
149d : c041                     cpy #$41    ;test result
                                trap_ne
149f : d0fe            >        bne *           ;failed not equal (non zero)
                        
14a1 : 68                       pla         ;load status
                                eor_flag 0
14a2 : 0908            >            ora #decmode        ;ignore decimal mode bit
14a4 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
14a6 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
14a9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
14ab : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
14ad : 48              >            pha         ;use stack to load status
14ae : 28              >            plp
                        
14af : a418                     ldy zp1+3
14b1 : 08                       php         ;test stores do not alter flags
14b2 : 98                       tya
14b3 : 49c3                     eor #$c3
14b5 : a8                       tay
14b6 : 28                       plp
14b7 : 8c0602                   sty abst+3
14ba : 08                       php         ;flags after load/store sequence
14bb : 49c3                     eor #$c3
14bd : a8                       tay
14be : c000                     cpy #0      ;test result
                                trap_ne
14c0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
14c2 : 68                       pla         ;load status
                                eor_flag 0
14c3 : 0908            >            ora #decmode        ;ignore decimal mode bit
14c5 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
14c7 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
14ca : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
14cc : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
14ce : 48              >            pha         ;use stack to load status
14cf : 28              >            plp
                        
14d0 : a415                     ldy zp1  
14d2 : 08                       php         ;test stores do not alter flags
14d3 : 98                       tya
14d4 : 49c3                     eor #$c3
14d6 : a8                       tay
14d7 : 28                       plp
14d8 : 8c0302                   sty abst  
14db : 08                       php         ;flags after load/store sequence
14dc : 49c3                     eor #$c3
14de : a8                       tay
14df : c0c3                     cpy #$c3    ;test result
                                trap_ne
14e1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
14e3 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
14e4 : 0908            >            ora #decmode        ;ignore decimal mode bit
14e6 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
14e8 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
14eb : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
14ed : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
14ef : 48              >            pha         ;use stack to load status
14f0 : 28              >            plp
                        
14f1 : a416                     ldy zp1+1
14f3 : 08                       php         ;test stores do not alter flags
14f4 : 98                       tya
14f5 : 49c3                     eor #$c3
14f7 : a8                       tay
14f8 : 28                       plp
14f9 : 8c0402                   sty abst+1
14fc : 08                       php         ;flags after load/store sequence
14fd : 49c3                     eor #$c3
14ff : a8                       tay
1500 : c082                     cpy #$82   ;test result
                                trap_ne
1502 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1504 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1505 : 0908            >            ora #decmode        ;ignore decimal mode bit
1507 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1509 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
150c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
150e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1510 : 48              >            pha         ;use stack to load status
1511 : 28              >            plp
                        
1512 : a417                     ldy zp1+2
1514 : 08                       php         ;test stores do not alter flags
1515 : 98                       tya
1516 : 49c3                     eor #$c3
1518 : a8                       tay
1519 : 28                       plp
151a : 8c0502                   sty abst+2
151d : 08                       php         ;flags after load/store sequence
151e : 49c3                     eor #$c3
1520 : a8                       tay
1521 : c041                     cpy #$41    ;test result
                                trap_ne
1523 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1525 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1526 : 0908            >            ora #decmode        ;ignore decimal mode bit
1528 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
152a : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
152d : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
152f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1531 : 48              >            pha         ;use stack to load status
1532 : 28              >            plp
                        
1533 : a418                     ldy zp1+3
1535 : 08                       php         ;test stores do not alter flags
1536 : 98                       tya
1537 : 49c3                     eor #$c3
1539 : a8                       tay
153a : 28                       plp
153b : 8c0602                   sty abst+3
153e : 08                       php         ;flags after load/store sequence
153f : 49c3                     eor #$c3
1541 : a8                       tay
1542 : c000                     cpy #0      ;test result
                                trap_ne
1544 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1546 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1547 : 0908            >            ora #decmode        ;ignore decimal mode bit
1549 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
154b : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
154e : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                
                                set_stat 0
                       >            load_flag 0
1550 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1552 : 48              >            pha         ;use stack to load status
1553 : 28              >            plp
                        
1554 : ac1802                   ldy abs1  
1557 : 08                       php         ;test stores do not alter flags
1558 : 98                       tya
1559 : 49c3                     eor #$c3
155b : a8                       tay
155c : 28                       plp
155d : 840c                     sty zpt  
155f : 08                       php         ;flags after load/store sequence
1560 : 49c3                     eor #$c3
1562 : a8                       tay
1563 : c415                     cpy zp1     ;test result
                                trap_ne
1565 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1567 : 68                       pla         ;load status
                                eor_flag 0
1568 : 0908            >            ora #decmode        ;ignore decimal mode bit
156a : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
156c : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
156f : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1571 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1573 : 48              >            pha         ;use stack to load status
1574 : 28              >            plp
                        
1575 : ac1902                   ldy abs1+1
1578 : 08                       php         ;test stores do not alter flags
1579 : 98                       tya
157a : 49c3                     eor #$c3
157c : a8                       tay
157d : 28                       plp
157e : 840d                     sty zpt+1
1580 : 08                       php         ;flags after load/store sequence
1581 : 49c3                     eor #$c3
1583 : a8                       tay
1584 : c416                     cpy zp1+1   ;test result
                                trap_ne
1586 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1588 : 68                       pla         ;load status
                                eor_flag 0
1589 : 0908            >            ora #decmode        ;ignore decimal mode bit
158b : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
158d : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1590 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1592 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1594 : 48              >            pha         ;use stack to load status
1595 : 28              >            plp
                        
1596 : ac1a02                   ldy abs1+2
1599 : 08                       php         ;test stores do not alter flags
159a : 98                       tya
159b : 49c3                     eor #$c3
159d : a8                       tay
159e : 28                       plp
159f : 840e                     sty zpt+2
15a1 : 08                       php         ;flags after load/store sequence
15a2 : 49c3                     eor #$c3
15a4 : a8                       tay
15a5 : c417                     cpy zp1+2   ;test result
                                trap_ne
15a7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
15a9 : 68                       pla         ;load status
                                eor_flag 0
15aa : 0908            >            ora #decmode        ;ignore decimal mode bit
15ac : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
15ae : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
15b1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
15b3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
15b5 : 48              >            pha         ;use stack to load status
15b6 : 28              >            plp
                        
15b7 : ac1b02                   ldy abs1+3
15ba : 08                       php         ;test stores do not alter flags
15bb : 98                       tya
15bc : 49c3                     eor #$c3
15be : a8                       tay
15bf : 28                       plp
15c0 : 840f                     sty zpt+3
15c2 : 08                       php         ;flags after load/store sequence
15c3 : 49c3                     eor #$c3
15c5 : a8                       tay
15c6 : c418                     cpy zp1+3   ;test result
                                trap_ne
15c8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
15ca : 68                       pla         ;load status
                                eor_flag 0
15cb : 0908            >            ora #decmode        ;ignore decimal mode bit
15cd : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
15cf : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
15d2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
15d4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
15d6 : 48              >            pha         ;use stack to load status
15d7 : 28              >            plp
                        
15d8 : ac1802                   ldy abs1  
15db : 08                       php         ;test stores do not alter flags
15dc : 98                       tya
15dd : 49c3                     eor #$c3
15df : a8                       tay
15e0 : 28                       plp
15e1 : 840c                     sty zpt  
15e3 : 08                       php         ;flags after load/store sequence
15e4 : 49c3                     eor #$c3
15e6 : a8                       tay
15e7 : c515                     cmp zp1     ;test result
                                trap_ne
15e9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
15eb : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
15ec : 0908            >            ora #decmode        ;ignore decimal mode bit
15ee : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
15f0 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
15f3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
15f5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
15f7 : 48              >            pha         ;use stack to load status
15f8 : 28              >            plp
                        
15f9 : ac1902                   ldy abs1+1
15fc : 08                       php         ;test stores do not alter flags
15fd : 98                       tya
15fe : 49c3                     eor #$c3
1600 : a8                       tay
1601 : 28                       plp
1602 : 840d                     sty zpt+1
1604 : 08                       php         ;flags after load/store sequence
1605 : 49c3                     eor #$c3
1607 : a8                       tay
1608 : c516                     cmp zp1+1   ;test result
                                trap_ne
160a : d0fe            >        bne *           ;failed not equal (non zero)
                        
160c : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
160d : 0908            >            ora #decmode        ;ignore decimal mode bit
160f : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1611 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1614 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1616 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1618 : 48              >            pha         ;use stack to load status
1619 : 28              >            plp
                        
161a : ac1a02                   ldy abs1+2
161d : 08                       php         ;test stores do not alter flags
161e : 98                       tya
161f : 49c3                     eor #$c3
1621 : a8                       tay
1622 : 28                       plp
1623 : 840e                     sty zpt+2
1625 : 08                       php         ;flags after load/store sequence
1626 : 49c3                     eor #$c3
1628 : a8                       tay
1629 : c517                     cmp zp1+2   ;test result
                                trap_ne
162b : d0fe            >        bne *           ;failed not equal (non zero)
                        
162d : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
162e : 0908            >            ora #decmode        ;ignore decimal mode bit
1630 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1632 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1635 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1637 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1639 : 48              >            pha         ;use stack to load status
163a : 28              >            plp
                        
163b : ac1b02                   ldy abs1+3
163e : 08                       php         ;test stores do not alter flags
163f : 98                       tya
1640 : 49c3                     eor #$c3
1642 : a8                       tay
1643 : 28                       plp
1644 : 840f                     sty zpt+3
1646 : 08                       php         ;flags after load/store sequence
1647 : 49c3                     eor #$c3
1649 : a8                       tay
164a : c518                     cmp zp1+3   ;test result
                                trap_ne
164c : d0fe            >        bne *           ;failed not equal (non zero)
                        
164e : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
164f : 0908            >            ora #decmode        ;ignore decimal mode bit
1651 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1653 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
1656 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                        
                                set_stat 0
                       >            load_flag 0
1658 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
165a : 48              >            pha         ;use stack to load status
165b : 28              >            plp
                        
165c : a0c3                     ldy #$c3  
165e : 08                       php
165f : cc1802                   cpy abs1    ;test result
                                trap_ne
1662 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1664 : 68                       pla         ;load status
                                eor_flag 0
1665 : 0908            >            ora #decmode        ;ignore decimal mode bit
1667 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1669 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
166c : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
166e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1670 : 48              >            pha         ;use stack to load status
1671 : 28              >            plp
                        
1672 : a082                     ldy #$82
1674 : 08                       php
1675 : cc1902                   cpy abs1+1  ;test result
                                trap_ne
1678 : d0fe            >        bne *           ;failed not equal (non zero)
                        
167a : 68                       pla         ;load status
                                eor_flag 0
167b : 0908            >            ora #decmode        ;ignore decimal mode bit
167d : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
167f : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1682 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1684 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1686 : 48              >            pha         ;use stack to load status
1687 : 28              >            plp
                        
1688 : a041                     ldy #$41
168a : 08                       php
168b : cc1a02                   cpy abs1+2  ;test result
                                trap_ne
168e : d0fe            >        bne *           ;failed not equal (non zero)
                        
1690 : 68                       pla         ;load status
                                eor_flag 0
1691 : 0908            >            ora #decmode        ;ignore decimal mode bit
1693 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1695 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1698 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
169a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
169c : 48              >            pha         ;use stack to load status
169d : 28              >            plp
                        
169e : a000                     ldy #0
16a0 : 08                       php
16a1 : cc1b02                   cpy abs1+3  ;test result
                                trap_ne
16a4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
16a6 : 68                       pla         ;load status
                                eor_flag 0
16a7 : 0908            >            ora #decmode        ;ignore decimal mode bit
16a9 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
16ab : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
16ae : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
16b0 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
16b2 : 48              >            pha         ;use stack to load status
16b3 : 28              >            plp
                        
16b4 : a0c3                     ldy #$c3  
16b6 : 08                       php
16b7 : cc1802                   cpy abs1    ;test result
                                trap_ne
16ba : d0fe            >        bne *           ;failed not equal (non zero)
                        
16bc : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
16bd : 0908            >            ora #decmode        ;ignore decimal mode bit
16bf : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
16c1 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
16c4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
16c6 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
16c8 : 48              >            pha         ;use stack to load status
16c9 : 28              >            plp
                        
16ca : a082                     ldy #$82
16cc : 08                       php
16cd : cc1902                   cpy abs1+1  ;test result
                                trap_ne
16d0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
16d2 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
16d3 : 0908            >            ora #decmode        ;ignore decimal mode bit
16d5 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
16d7 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
16da : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
16dc : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
16de : 48              >            pha         ;use stack to load status
16df : 28              >            plp
                        
16e0 : a041                     ldy #$41
16e2 : 08                       php
16e3 : cc1a02                   cpy abs1+2   ;test result
                                trap_ne
16e6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
16e8 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
16e9 : 0908            >            ora #decmode        ;ignore decimal mode bit
16eb : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
16ed : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
16f0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
16f2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
16f4 : 48              >            pha         ;use stack to load status
16f5 : 28              >            plp
                        
16f6 : a000                     ldy #0
16f8 : 08                       php
16f9 : cc1b02                   cpy abs1+3  ;test result
                                trap_ne
16fc : d0fe            >        bne *           ;failed not equal (non zero)
                        
16fe : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
16ff : 0908            >            ora #decmode        ;ignore decimal mode bit
1701 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1703 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
1706 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                
1708 : a000                     ldy #0
170a : a50c                     lda zpt  
170c : 49c3                     eor #$c3
170e : c515                     cmp zp1  
                                trap_ne     ;store to zp   data
1710 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1712 : 840c                     sty zpt     ;clear                
1714 : ad0302                   lda abst  
1717 : 49c3                     eor #$c3
1719 : cd1802                   cmp abs1  
                                trap_ne     ;store to abs   data
171c : d0fe            >        bne *           ;failed not equal (non zero)
                        
171e : 8c0302                   sty abst    ;clear                
1721 : a50d                     lda zpt+1
1723 : 49c3                     eor #$c3
1725 : c516                     cmp zp1+1
                                trap_ne     ;store to zp+1 data
1727 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1729 : 840d                     sty zpt+1   ;clear                
172b : ad0402                   lda abst+1
172e : 49c3                     eor #$c3
1730 : cd1902                   cmp abs1+1
                                trap_ne     ;store to abs+1 data
1733 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1735 : 8c0402                   sty abst+1  ;clear                
1738 : a50e                     lda zpt+2
173a : 49c3                     eor #$c3
173c : c517                     cmp zp1+2
                                trap_ne     ;store to zp+2 data
173e : d0fe            >        bne *           ;failed not equal (non zero)
                        
1740 : 840e                     sty zpt+2   ;clear                
1742 : ad0502                   lda abst+2
1745 : 49c3                     eor #$c3
1747 : cd1a02                   cmp abs1+2
                                trap_ne     ;store to abs+2 data
174a : d0fe            >        bne *           ;failed not equal (non zero)
                        
174c : 8c0502                   sty abst+2  ;clear                
174f : a50f                     lda zpt+3
1751 : 49c3                     eor #$c3
1753 : c518                     cmp zp1+3
                                trap_ne     ;store to zp+3 data
1755 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1757 : 840f                     sty zpt+3   ;clear                
1759 : ad0602                   lda abst+3
175c : 49c3                     eor #$c3
175e : cd1b02                   cmp abs1+3
                                trap_ne     ;store to abs+3 data
1761 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1763 : 8c0602                   sty abst+3  ;clear                
                                next_test
1766 : ad0002          >            lda test_case   ;previous test
1769 : c914            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
176b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0015 =                 >test_num = test_num + 1
176d : a915            >            lda #test_num   ;*** next tests' number
176f : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing load / store accumulator LDA / STA all addressing modes
                        ; LDA / STA - zp,x / abs,x
1772 : a203                     ldx #3
1774 :                  tldax    
                                set_stat 0
                       >            load_flag 0
1774 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1776 : 48              >            pha         ;use stack to load status
1777 : 28              >            plp
                        
1778 : b515                     lda zp1,x
177a : 08                       php         ;test stores do not alter flags
177b : 49c3                     eor #$c3
177d : 28                       plp
177e : 9d0302                   sta abst,x
1781 : 08                       php         ;flags after load/store sequence
1782 : 49c3                     eor #$c3
1784 : dd1802                   cmp abs1,x  ;test result
                                trap_ne
1787 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1789 : 68                       pla         ;load status
                                eor_flag 0
178a : 0908            >            ora #decmode        ;ignore decimal mode bit
178c : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
178e : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
1791 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1793 : ca                       dex
1794 : 10de                     bpl tldax                  
                        
1796 : a203                     ldx #3
1798 :                  tldax1   
                                set_stat $ff
                       >            load_flag $ff
1798 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
179a : 48              >            pha         ;use stack to load status
179b : 28              >            plp
                        
179c : b515                     lda zp1,x
179e : 08                       php         ;test stores do not alter flags
179f : 49c3                     eor #$c3
17a1 : 28                       plp
17a2 : 9d0302                   sta abst,x
17a5 : 08                       php         ;flags after load/store sequence
17a6 : 49c3                     eor #$c3
17a8 : dd1802                   cmp abs1,x   ;test result
                                trap_ne
17ab : d0fe            >        bne *           ;failed not equal (non zero)
                        
17ad : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
17ae : 0908            >            ora #decmode        ;ignore decimal mode bit
17b0 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
17b2 : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
17b5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
17b7 : ca                       dex
17b8 : 10de                     bpl tldax1                  
                        
17ba : a203                     ldx #3
17bc :                  tldax2   
                                set_stat 0
                       >            load_flag 0
17bc : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
17be : 48              >            pha         ;use stack to load status
17bf : 28              >            plp
                        
17c0 : bd1802                   lda abs1,x
17c3 : 08                       php         ;test stores do not alter flags
17c4 : 49c3                     eor #$c3
17c6 : 28                       plp
17c7 : 950c                     sta zpt,x
17c9 : 08                       php         ;flags after load/store sequence
17ca : 49c3                     eor #$c3
17cc : d515                     cmp zp1,x   ;test result
                                trap_ne
17ce : d0fe            >        bne *           ;failed not equal (non zero)
                        
17d0 : 68                       pla         ;load status
                                eor_flag 0
17d1 : 0908            >            ora #decmode        ;ignore decimal mode bit
17d3 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
17d5 : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
17d8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
17da : ca                       dex
17db : 10df                     bpl tldax2                  
                        
17dd : a203                     ldx #3
17df :                  tldax3
                                set_stat $ff
                       >            load_flag $ff
17df : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
17e1 : 48              >            pha         ;use stack to load status
17e2 : 28              >            plp
                        
17e3 : bd1802                   lda abs1,x
17e6 : 08                       php         ;test stores do not alter flags
17e7 : 49c3                     eor #$c3
17e9 : 28                       plp
17ea : 950c                     sta zpt,x
17ec : 08                       php         ;flags after load/store sequence
17ed : 49c3                     eor #$c3
17ef : d515                     cmp zp1,x   ;test result
                                trap_ne
17f1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
17f3 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
17f4 : 0908            >            ora #decmode        ;ignore decimal mode bit
17f6 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
17f8 : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
17fb : d0fe            >        bne *           ;failed not equal (non zero)
                        
17fd : ca                       dex
17fe : 10df                     bpl tldax3
                        
1800 : a203                     ldx #3      ;testing store result
1802 : a000                     ldy #0
1804 : b50c             tstax   lda zpt,x
1806 : 49c3                     eor #$c3
1808 : d515                     cmp zp1,x
                                trap_ne     ;store to zp,x data
180a : d0fe            >        bne *           ;failed not equal (non zero)
                        
180c : 940c                     sty zpt,x   ;clear                
180e : bd0302                   lda abst,x
1811 : 49c3                     eor #$c3
1813 : dd1802                   cmp abs1,x
                                trap_ne     ;store to abs,x data
1816 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1818 : 8a                       txa
1819 : 9d0302                   sta abst,x  ;clear                
181c : ca                       dex
181d : 10e5                     bpl tstax
                                next_test
181f : ad0002          >            lda test_case   ;previous test
1822 : c915            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1824 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0016 =                 >test_num = test_num + 1
1826 : a916            >            lda #test_num   ;*** next tests' number
1828 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDA / STA - (zp),y / abs,y / (zp,x)
182b : a003                     ldy #3
182d :                  tlday    
                                set_stat 0
                       >            load_flag 0
182d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
182f : 48              >            pha         ;use stack to load status
1830 : 28              >            plp
                        
1831 : b126                     lda (ind1),y
1833 : 08                       php         ;test stores do not alter flags
1834 : 49c3                     eor #$c3
1836 : 28                       plp
1837 : 990302                   sta abst,y
183a : 08                       php         ;flags after load/store sequence
183b : 49c3                     eor #$c3
183d : d91802                   cmp abs1,y  ;test result
                                trap_ne
1840 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1842 : 68                       pla         ;load status
                                eor_flag 0
1843 : 0908            >            ora #decmode        ;ignore decimal mode bit
1845 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1847 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
184a : d0fe            >        bne *           ;failed not equal (non zero)
                        
184c : 88                       dey
184d : 10de                     bpl tlday                  
                        
184f : a003                     ldy #3
1851 :                  tlday1   
                                set_stat $ff
                       >            load_flag $ff
1851 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1853 : 48              >            pha         ;use stack to load status
1854 : 28              >            plp
                        
1855 : b126                     lda (ind1),y
1857 : 08                       php         ;test stores do not alter flags
1858 : 49c3                     eor #$c3
185a : 28                       plp
185b : 990302                   sta abst,y
185e : 08                       php         ;flags after load/store sequence
185f : 49c3                     eor #$c3
1861 : d91802                   cmp abs1,y  ;test result
                                trap_ne
1864 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1866 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1867 : 0908            >            ora #decmode        ;ignore decimal mode bit
1869 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
186b : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
186e : d0fe            >        bne *           ;failed not equal (non zero)
                        
1870 : 88                       dey
1871 : 10de                     bpl tlday1                  
                        
1873 : a003                     ldy #3      ;testing store result
1875 : a200                     ldx #0
1877 : b90302           tstay   lda abst,y
187a : 49c3                     eor #$c3
187c : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
187f : d0fe            >        bne *           ;failed not equal (non zero)
                        
1881 : 8a                       txa
1882 : 990302                   sta abst,y  ;clear                
1885 : 88                       dey
1886 : 10ef                     bpl tstay
                        
1888 : a003                     ldy #3
188a :                  tlday2   
                                set_stat 0
                       >            load_flag 0
188a : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
188c : 48              >            pha         ;use stack to load status
188d : 28              >            plp
                        
188e : b91802                   lda abs1,y
1891 : 08                       php         ;test stores do not alter flags
1892 : 49c3                     eor #$c3
1894 : 28                       plp
1895 : 9132                     sta (indt),y
1897 : 08                       php         ;flags after load/store sequence
1898 : 49c3                     eor #$c3
189a : d126                     cmp (ind1),y    ;test result
                                trap_ne
189c : d0fe            >        bne *           ;failed not equal (non zero)
                        
189e : 68                       pla         ;load status
                                eor_flag 0
189f : 0908            >            ora #decmode        ;ignore decimal mode bit
18a1 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
18a3 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
18a6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
18a8 : 88                       dey
18a9 : 10df                     bpl tlday2                  
                        
18ab : a003                     ldy #3
18ad :                  tlday3   
                                set_stat $ff
                       >            load_flag $ff
18ad : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
18af : 48              >            pha         ;use stack to load status
18b0 : 28              >            plp
                        
18b1 : b91802                   lda abs1,y
18b4 : 08                       php         ;test stores do not alter flags
18b5 : 49c3                     eor #$c3
18b7 : 28                       plp
18b8 : 9132                     sta (indt),y
18ba : 08                       php         ;flags after load/store sequence
18bb : 49c3                     eor #$c3
18bd : d126                     cmp (ind1),y   ;test result
                                trap_ne
18bf : d0fe            >        bne *           ;failed not equal (non zero)
                        
18c1 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
18c2 : 0908            >            ora #decmode        ;ignore decimal mode bit
18c4 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
18c6 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
18c9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
18cb : 88                       dey
18cc : 10df                     bpl tlday3
                                
18ce : a003                     ldy #3      ;testing store result
18d0 : a200                     ldx #0
18d2 : b90302           tstay1  lda abst,y
18d5 : 49c3                     eor #$c3
18d7 : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
18da : d0fe            >        bne *           ;failed not equal (non zero)
                        
18dc : 8a                       txa
18dd : 990302                   sta abst,y  ;clear                
18e0 : 88                       dey
18e1 : 10ef                     bpl tstay1
                                
18e3 : a206                     ldx #6
18e5 : a003                     ldy #3
18e7 :                  tldax4   
                                set_stat 0
                       >            load_flag 0
18e7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
18e9 : 48              >            pha         ;use stack to load status
18ea : 28              >            plp
                        
18eb : a126                     lda (ind1,x)
18ed : 08                       php         ;test stores do not alter flags
18ee : 49c3                     eor #$c3
18f0 : 28                       plp
18f1 : 8132                     sta (indt,x)
18f3 : 08                       php         ;flags after load/store sequence
18f4 : 49c3                     eor #$c3
18f6 : d91802                   cmp abs1,y  ;test result
                                trap_ne
18f9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
18fb : 68                       pla         ;load status
                                eor_flag 0
18fc : 0908            >            ora #decmode        ;ignore decimal mode bit
18fe : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1900 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
1903 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1905 : ca                       dex
1906 : ca                       dex
1907 : 88                       dey
1908 : 10dd                     bpl tldax4                  
                        
190a : a206                     ldx #6
190c : a003                     ldy #3
190e :                  tldax5
                                set_stat $ff
                       >            load_flag $ff
190e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1910 : 48              >            pha         ;use stack to load status
1911 : 28              >            plp
                        
1912 : a126                     lda (ind1,x)
1914 : 08                       php         ;test stores do not alter flags
1915 : 49c3                     eor #$c3
1917 : 28                       plp
1918 : 8132                     sta (indt,x)
191a : 08                       php         ;flags after load/store sequence
191b : 49c3                     eor #$c3
191d : d91802                   cmp abs1,y  ;test result
                                trap_ne
1920 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1922 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1923 : 0908            >            ora #decmode        ;ignore decimal mode bit
1925 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1927 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
192a : d0fe            >        bne *           ;failed not equal (non zero)
                        
192c : ca                       dex
192d : ca                       dex
192e : 88                       dey
192f : 10dd                     bpl tldax5
                        
1931 : a003                     ldy #3      ;testing store result
1933 : a200                     ldx #0
1935 : b90302           tstay2  lda abst,y
1938 : 49c3                     eor #$c3
193a : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
193d : d0fe            >        bne *           ;failed not equal (non zero)
                        
193f : 8a                       txa
1940 : 990302                   sta abst,y  ;clear                
1943 : 88                       dey
1944 : 10ef                     bpl tstay2
                                next_test
1946 : ad0002          >            lda test_case   ;previous test
1949 : c916            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
194b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0017 =                 >test_num = test_num + 1
194d : a917            >            lda #test_num   ;*** next tests' number
194f : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; indexed wraparound test (only zp should wrap)
1952 : a2fd                     ldx #3+$fa
1954 : b51b             tldax6  lda zp1-$fa&$ff,x   ;wrap on indexed zp
1956 : 9d0901                   sta abst-$fa,x      ;no STX abs,x!
1959 : ca                       dex
195a : e0fa                     cpx #$fa
195c : b0f6                     bcs tldax6                  
195e : a2fd                     ldx #3+$fa
1960 : bd1e01           tldax7  lda abs1-$fa,x      ;no wrap on indexed abs
1963 : 9512                     sta zpt-$fa&$ff,x
1965 : ca                       dex
1966 : e0fa                     cpx #$fa
1968 : b0f6                     bcs tldax7
                                                  
196a : a203                     ldx #3      ;testing wraparound result
196c : a000                     ldy #0
196e : b50c             tstax1  lda zpt,x
1970 : d515                     cmp zp1,x
                                trap_ne     ;store to zp,x data
1972 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1974 : 940c                     sty zpt,x   ;clear                
1976 : bd0302                   lda abst,x
1979 : dd1802                   cmp abs1,x
                                trap_ne     ;store to abs,x data
197c : d0fe            >        bne *           ;failed not equal (non zero)
                        
197e : 8a                       txa
197f : 9d0302                   sta abst,x  ;clear                
1982 : ca                       dex
1983 : 10e9                     bpl tstax1
                        
1985 : a0fb                     ldy #3+$f8
1987 : a2fe                     ldx #6+$f8
1989 : a12e             tlday4  lda (ind1-$f8&$ff,x) ;wrap on indexed zp indirect
198b : 990b01                   sta abst-$f8,y
198e : ca                       dex
198f : ca                       dex
1990 : 88                       dey
1991 : c0f8                     cpy #$f8
1993 : b0f4                     bcs tlday4
1995 : a003                     ldy #3      ;testing wraparound result
1997 : a200                     ldx #0
1999 : b90302           tstay4  lda abst,y
199c : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
199f : d0fe            >        bne *           ;failed not equal (non zero)
                        
19a1 : 8a                       txa
19a2 : 990302                   sta abst,y  ;clear                
19a5 : 88                       dey
19a6 : 10f1                     bpl tstay4
                                
19a8 : a0fb                     ldy #3+$f8
19aa : b92001           tlday5  lda abs1-$f8,y  ;no wrap on indexed abs
19ad : 913a                     sta (inwt),y
19af : 88                       dey
19b0 : c0f8                     cpy #$f8
19b2 : b0f6                     bcs tlday5                  
19b4 : a003                     ldy #3      ;testing wraparound result
19b6 : a200                     ldx #0
19b8 : b90302           tstay5  lda abst,y
19bb : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
19be : d0fe            >        bne *           ;failed not equal (non zero)
                        
19c0 : 8a                       txa
19c1 : 990302                   sta abst,y  ;clear                
19c4 : 88                       dey
19c5 : 10f1                     bpl tstay5
                        
19c7 : a0fb                     ldy #3+$f8
19c9 : a2fe                     ldx #6+$f8
19cb : b130             tlday6  lda (inw1),y    ;no wrap on zp indirect indexed 
19cd : 813a                     sta (indt-$f8&$ff,x)
19cf : ca                       dex
19d0 : ca                       dex
19d1 : 88                       dey
19d2 : c0f8                     cpy #$f8
19d4 : b0f5                     bcs tlday6
19d6 : a003                     ldy #3      ;testing wraparound result
19d8 : a200                     ldx #0
19da : b90302           tstay6  lda abst,y
19dd : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
19e0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
19e2 : 8a                       txa
19e3 : 990302                   sta abst,y  ;clear                
19e6 : 88                       dey
19e7 : 10f1                     bpl tstay6
                                next_test
19e9 : ad0002          >            lda test_case   ;previous test
19ec : c917            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
19ee : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0018 =                 >test_num = test_num + 1
19f0 : a918            >            lda #test_num   ;*** next tests' number
19f2 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; LDA / STA - zp / abs / #
                                set_stat 0  
                       >            load_flag 0  
19f5 : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
19f7 : 48              >            pha         ;use stack to load status
19f8 : 28              >            plp
                        
19f9 : a515                     lda zp1
19fb : 08                       php         ;test stores do not alter flags
19fc : 49c3                     eor #$c3
19fe : 28                       plp
19ff : 8d0302                   sta abst
1a02 : 08                       php         ;flags after load/store sequence
1a03 : 49c3                     eor #$c3
1a05 : c9c3                     cmp #$c3    ;test result
                                trap_ne
1a07 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1a09 : 68                       pla         ;load status
                                eor_flag 0
1a0a : 0908            >            ora #decmode        ;ignore decimal mode bit
1a0c : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1a0e : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1a11 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1a13 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1a15 : 48              >            pha         ;use stack to load status
1a16 : 28              >            plp
                        
1a17 : a516                     lda zp1+1
1a19 : 08                       php         ;test stores do not alter flags
1a1a : 49c3                     eor #$c3
1a1c : 28                       plp
1a1d : 8d0402                   sta abst+1
1a20 : 08                       php         ;flags after load/store sequence
1a21 : 49c3                     eor #$c3
1a23 : c982                     cmp #$82    ;test result
                                trap_ne
1a25 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1a27 : 68                       pla         ;load status
                                eor_flag 0
1a28 : 0908            >            ora #decmode        ;ignore decimal mode bit
1a2a : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1a2c : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1a2f : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1a31 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1a33 : 48              >            pha         ;use stack to load status
1a34 : 28              >            plp
                        
1a35 : a517                     lda zp1+2
1a37 : 08                       php         ;test stores do not alter flags
1a38 : 49c3                     eor #$c3
1a3a : 28                       plp
1a3b : 8d0502                   sta abst+2
1a3e : 08                       php         ;flags after load/store sequence
1a3f : 49c3                     eor #$c3
1a41 : c941                     cmp #$41    ;test result
                                trap_ne
1a43 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1a45 : 68                       pla         ;load status
                                eor_flag 0
1a46 : 0908            >            ora #decmode        ;ignore decimal mode bit
1a48 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1a4a : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1a4d : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1a4f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1a51 : 48              >            pha         ;use stack to load status
1a52 : 28              >            plp
                        
1a53 : a518                     lda zp1+3
1a55 : 08                       php         ;test stores do not alter flags
1a56 : 49c3                     eor #$c3
1a58 : 28                       plp
1a59 : 8d0602                   sta abst+3
1a5c : 08                       php         ;flags after load/store sequence
1a5d : 49c3                     eor #$c3
1a5f : c900                     cmp #0      ;test result
                                trap_ne
1a61 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1a63 : 68                       pla         ;load status
                                eor_flag 0
1a64 : 0908            >            ora #decmode        ;ignore decimal mode bit
1a66 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1a68 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
1a6b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1a6d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1a6f : 48              >            pha         ;use stack to load status
1a70 : 28              >            plp
                        
1a71 : a515                     lda zp1  
1a73 : 08                       php         ;test stores do not alter flags
1a74 : 49c3                     eor #$c3
1a76 : 28                       plp
1a77 : 8d0302                   sta abst  
1a7a : 08                       php         ;flags after load/store sequence
1a7b : 49c3                     eor #$c3
1a7d : c9c3                     cmp #$c3    ;test result
                                trap_ne
1a7f : d0fe            >        bne *           ;failed not equal (non zero)
                        
1a81 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1a82 : 0908            >            ora #decmode        ;ignore decimal mode bit
1a84 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1a86 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1a89 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1a8b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1a8d : 48              >            pha         ;use stack to load status
1a8e : 28              >            plp
                        
1a8f : a516                     lda zp1+1
1a91 : 08                       php         ;test stores do not alter flags
1a92 : 49c3                     eor #$c3
1a94 : 28                       plp
1a95 : 8d0402                   sta abst+1
1a98 : 08                       php         ;flags after load/store sequence
1a99 : 49c3                     eor #$c3
1a9b : c982                     cmp #$82    ;test result
                                trap_ne
1a9d : d0fe            >        bne *           ;failed not equal (non zero)
                        
1a9f : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1aa0 : 0908            >            ora #decmode        ;ignore decimal mode bit
1aa2 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1aa4 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1aa7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1aa9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1aab : 48              >            pha         ;use stack to load status
1aac : 28              >            plp
                        
1aad : a517                     lda zp1+2
1aaf : 08                       php         ;test stores do not alter flags
1ab0 : 49c3                     eor #$c3
1ab2 : 28                       plp
1ab3 : 8d0502                   sta abst+2
1ab6 : 08                       php         ;flags after load/store sequence
1ab7 : 49c3                     eor #$c3
1ab9 : c941                     cmp #$41    ;test result
                                trap_ne
1abb : d0fe            >        bne *           ;failed not equal (non zero)
                        
1abd : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1abe : 0908            >            ora #decmode        ;ignore decimal mode bit
1ac0 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1ac2 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1ac5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1ac7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1ac9 : 48              >            pha         ;use stack to load status
1aca : 28              >            plp
                        
1acb : a518                     lda zp1+3
1acd : 08                       php         ;test stores do not alter flags
1ace : 49c3                     eor #$c3
1ad0 : 28                       plp
1ad1 : 8d0602                   sta abst+3
1ad4 : 08                       php         ;flags after load/store sequence
1ad5 : 49c3                     eor #$c3
1ad7 : c900                     cmp #0      ;test result
                                trap_ne
1ad9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1adb : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1adc : 0908            >            ora #decmode        ;ignore decimal mode bit
1ade : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1ae0 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
1ae3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1ae5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1ae7 : 48              >            pha         ;use stack to load status
1ae8 : 28              >            plp
                        
1ae9 : ad1802                   lda abs1  
1aec : 08                       php         ;test stores do not alter flags
1aed : 49c3                     eor #$c3
1aef : 28                       plp
1af0 : 850c                     sta zpt  
1af2 : 08                       php         ;flags after load/store sequence
1af3 : 49c3                     eor #$c3
1af5 : c515                     cmp zp1     ;test result
                                trap_ne
1af7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1af9 : 68                       pla         ;load status
                                eor_flag 0
1afa : 0908            >            ora #decmode        ;ignore decimal mode bit
1afc : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1afe : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1b01 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1b03 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1b05 : 48              >            pha         ;use stack to load status
1b06 : 28              >            plp
                        
1b07 : ad1902                   lda abs1+1
1b0a : 08                       php         ;test stores do not alter flags
1b0b : 49c3                     eor #$c3
1b0d : 28                       plp
1b0e : 850d                     sta zpt+1
1b10 : 08                       php         ;flags after load/store sequence
1b11 : 49c3                     eor #$c3
1b13 : c516                     cmp zp1+1   ;test result
                                trap_ne
1b15 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b17 : 68                       pla         ;load status
                                eor_flag 0
1b18 : 0908            >            ora #decmode        ;ignore decimal mode bit
1b1a : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1b1c : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1b1f : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1b21 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1b23 : 48              >            pha         ;use stack to load status
1b24 : 28              >            plp
                        
1b25 : ad1a02                   lda abs1+2
1b28 : 08                       php         ;test stores do not alter flags
1b29 : 49c3                     eor #$c3
1b2b : 28                       plp
1b2c : 850e                     sta zpt+2
1b2e : 08                       php         ;flags after load/store sequence
1b2f : 49c3                     eor #$c3
1b31 : c517                     cmp zp1+2   ;test result
                                trap_ne
1b33 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b35 : 68                       pla         ;load status
                                eor_flag 0
1b36 : 0908            >            ora #decmode        ;ignore decimal mode bit
1b38 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1b3a : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1b3d : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1b3f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1b41 : 48              >            pha         ;use stack to load status
1b42 : 28              >            plp
                        
1b43 : ad1b02                   lda abs1+3
1b46 : 08                       php         ;test stores do not alter flags
1b47 : 49c3                     eor #$c3
1b49 : 28                       plp
1b4a : 850f                     sta zpt+3
1b4c : 08                       php         ;flags after load/store sequence
1b4d : 49c3                     eor #$c3
1b4f : c518                     cmp zp1+3   ;test result
                                trap_ne
1b51 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b53 : 68                       pla         ;load status
                                eor_flag 0
1b54 : 0908            >            ora #decmode        ;ignore decimal mode bit
1b56 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1b58 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
1b5b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1b5d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1b5f : 48              >            pha         ;use stack to load status
1b60 : 28              >            plp
                        
1b61 : ad1802                   lda abs1  
1b64 : 08                       php         ;test stores do not alter flags
1b65 : 49c3                     eor #$c3
1b67 : 28                       plp
1b68 : 850c                     sta zpt  
1b6a : 08                       php         ;flags after load/store sequence
1b6b : 49c3                     eor #$c3
1b6d : c515                     cmp zp1     ;test result
                                trap_ne
1b6f : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b71 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1b72 : 0908            >            ora #decmode        ;ignore decimal mode bit
1b74 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1b76 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1b79 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1b7b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1b7d : 48              >            pha         ;use stack to load status
1b7e : 28              >            plp
                        
1b7f : ad1902                   lda abs1+1
1b82 : 08                       php         ;test stores do not alter flags
1b83 : 49c3                     eor #$c3
1b85 : 28                       plp
1b86 : 850d                     sta zpt+1
1b88 : 08                       php         ;flags after load/store sequence
1b89 : 49c3                     eor #$c3
1b8b : c516                     cmp zp1+1   ;test result
                                trap_ne
1b8d : d0fe            >        bne *           ;failed not equal (non zero)
                        
1b8f : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1b90 : 0908            >            ora #decmode        ;ignore decimal mode bit
1b92 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1b94 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1b97 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1b99 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1b9b : 48              >            pha         ;use stack to load status
1b9c : 28              >            plp
                        
1b9d : ad1a02                   lda abs1+2
1ba0 : 08                       php         ;test stores do not alter flags
1ba1 : 49c3                     eor #$c3
1ba3 : 28                       plp
1ba4 : 850e                     sta zpt+2
1ba6 : 08                       php         ;flags after load/store sequence
1ba7 : 49c3                     eor #$c3
1ba9 : c517                     cmp zp1+2   ;test result
                                trap_ne
1bab : d0fe            >        bne *           ;failed not equal (non zero)
                        
1bad : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1bae : 0908            >            ora #decmode        ;ignore decimal mode bit
1bb0 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1bb2 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1bb5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1bb7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1bb9 : 48              >            pha         ;use stack to load status
1bba : 28              >            plp
                        
1bbb : ad1b02                   lda abs1+3
1bbe : 08                       php         ;test stores do not alter flags
1bbf : 49c3                     eor #$c3
1bc1 : 28                       plp
1bc2 : 850f                     sta zpt+3
1bc4 : 08                       php         ;flags after load/store sequence
1bc5 : 49c3                     eor #$c3
1bc7 : c518                     cmp zp1+3   ;test result
                                trap_ne
1bc9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1bcb : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1bcc : 0908            >            ora #decmode        ;ignore decimal mode bit
1bce : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1bd0 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
1bd3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0  
                       >            load_flag 0  
1bd5 : a900            >            lda #0               ;allow test to change I-flag (no mask)
                       >
1bd7 : 48              >            pha         ;use stack to load status
1bd8 : 28              >            plp
                        
1bd9 : a9c3                     lda #$c3
1bdb : 08                       php
1bdc : cd1802                   cmp abs1    ;test result
                                trap_ne
1bdf : d0fe            >        bne *           ;failed not equal (non zero)
                        
1be1 : 68                       pla         ;load status
                                eor_flag 0
1be2 : 0908            >            ora #decmode        ;ignore decimal mode bit
1be4 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1be6 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1be9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1beb : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1bed : 48              >            pha         ;use stack to load status
1bee : 28              >            plp
                        
1bef : a982                     lda #$82
1bf1 : 08                       php
1bf2 : cd1902                   cmp abs1+1  ;test result
                                trap_ne
1bf5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1bf7 : 68                       pla         ;load status
                                eor_flag 0
1bf8 : 0908            >            ora #decmode        ;ignore decimal mode bit
1bfa : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1bfc : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1bff : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1c01 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1c03 : 48              >            pha         ;use stack to load status
1c04 : 28              >            plp
                        
1c05 : a941                     lda #$41
1c07 : 08                       php
1c08 : cd1a02                   cmp abs1+2  ;test result
                                trap_ne
1c0b : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c0d : 68                       pla         ;load status
                                eor_flag 0
1c0e : 0908            >            ora #decmode        ;ignore decimal mode bit
1c10 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1c12 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1c15 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat 0
                       >            load_flag 0
1c17 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1c19 : 48              >            pha         ;use stack to load status
1c1a : 28              >            plp
                        
1c1b : a900                     lda #0
1c1d : 08                       php
1c1e : cd1b02                   cmp abs1+3  ;test result
                                trap_ne
1c21 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c23 : 68                       pla         ;load status
                                eor_flag 0
1c24 : 0908            >            ora #decmode        ;ignore decimal mode bit
1c26 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                        
1c28 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
1c2b : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
                                set_stat $ff
                       >            load_flag $ff
1c2d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1c2f : 48              >            pha         ;use stack to load status
1c30 : 28              >            plp
                        
1c31 : a9c3                     lda #$c3  
1c33 : 08                       php
1c34 : cd1802                   cmp abs1    ;test result
                                trap_ne
1c37 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c39 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1c3a : 0908            >            ora #decmode        ;ignore decimal mode bit
1c3c : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1c3e : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
1c41 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1c43 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1c45 : 48              >            pha         ;use stack to load status
1c46 : 28              >            plp
                        
1c47 : a982                     lda #$82
1c49 : 08                       php
1c4a : cd1902                   cmp abs1+1  ;test result
                                trap_ne
1c4d : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c4f : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1c50 : 0908            >            ora #decmode        ;ignore decimal mode bit
1c52 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1c54 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
1c57 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1c59 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1c5b : 48              >            pha         ;use stack to load status
1c5c : 28              >            plp
                        
1c5d : a941                     lda #$41
1c5f : 08                       php
1c60 : cd1a02                   cmp abs1+2  ;test result
                                trap_ne
1c63 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c65 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1c66 : 0908            >            ora #decmode        ;ignore decimal mode bit
1c68 : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1c6a : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
1c6d : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
1c6f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1c71 : 48              >            pha         ;use stack to load status
1c72 : 28              >            plp
                        
1c73 : a900                     lda #0
1c75 : 08                       php
1c76 : cd1b02                   cmp abs1+3  ;test result
                                trap_ne
1c79 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c7b : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
1c7c : 0908            >            ora #decmode        ;ignore decimal mode bit
1c7e : 497d            >            eor #lo~fnz |faod        ;invert expected flags + always on bits
                        
1c80 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
1c83 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                        
1c85 : a200                     ldx #0
1c87 : a50c                     lda zpt  
1c89 : 49c3                     eor #$c3
1c8b : c515                     cmp zp1  
                                trap_ne     ;store to zp data
1c8d : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c8f : 860c                     stx zpt     ;clear                
1c91 : ad0302                   lda abst  
1c94 : 49c3                     eor #$c3
1c96 : cd1802                   cmp abs1  
                                trap_ne     ;store to abs data
1c99 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1c9b : 8e0302                   stx abst    ;clear                
1c9e : a50d                     lda zpt+1
1ca0 : 49c3                     eor #$c3
1ca2 : c516                     cmp zp1+1
                                trap_ne     ;store to zp data
1ca4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1ca6 : 860d                     stx zpt+1   ;clear                
1ca8 : ad0402                   lda abst+1
1cab : 49c3                     eor #$c3
1cad : cd1902                   cmp abs1+1
                                trap_ne     ;store to abs data
1cb0 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1cb2 : 8e0402                   stx abst+1  ;clear                
1cb5 : a50e                     lda zpt+2
1cb7 : 49c3                     eor #$c3
1cb9 : c517                     cmp zp1+2
                                trap_ne     ;store to zp data
1cbb : d0fe            >        bne *           ;failed not equal (non zero)
                        
1cbd : 860e                     stx zpt+2   ;clear                
1cbf : ad0502                   lda abst+2
1cc2 : 49c3                     eor #$c3
1cc4 : cd1a02                   cmp abs1+2
                                trap_ne     ;store to abs data
1cc7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1cc9 : 8e0502                   stx abst+2  ;clear                
1ccc : a50f                     lda zpt+3
1cce : 49c3                     eor #$c3
1cd0 : c518                     cmp zp1+3
                                trap_ne     ;store to zp data
1cd2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
1cd4 : 860f                     stx zpt+3   ;clear                
1cd6 : ad0602                   lda abst+3
1cd9 : 49c3                     eor #$c3
1cdb : cd1b02                   cmp abs1+3
                                trap_ne     ;store to abs data
1cde : d0fe            >        bne *           ;failed not equal (non zero)
                        
1ce0 : 8e0602                   stx abst+3  ;clear                
                                next_test
1ce3 : ad0002          >            lda test_case   ;previous test
1ce6 : c918            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1ce8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0019 =                 >test_num = test_num + 1
1cea : a919            >            lda #test_num   ;*** next tests' number
1cec : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing bit test & compares BIT CPX CPY CMP all addressing modes
                        ; BIT - zp / abs
                                set_a $ff,0
                       >            load_flag 0
1cef : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1cf1 : 48              >            pha         ;use stack to load status
1cf2 : a9ff            >            lda #$ff     ;precharge accu
1cf4 : 28              >            plp
                        
1cf5 : 2418                     bit zp1+3   ;00 - should set Z / clear  NV
                                tst_a $ff,fz 
1cf7 : 08              >            php         ;save flags
1cf8 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
1cfa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1cfc : 68              >            pla         ;load status
1cfd : 48              >            pha
                       >            cmp_flag fz 
1cfe : 0908            >            ora #decmode        ;ignore decimal mode bit
1d00 : c93a            >            cmp #(fz |faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1d02 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d04 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
1d05 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1d07 : 48              >            pha         ;use stack to load status
1d08 : a901            >            lda #1     ;precharge accu
1d0a : 28              >            plp
                        
1d0b : 2417                     bit zp1+2   ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
1d0d : 08              >            php         ;save flags
1d0e : c901            >            cmp #1     ;test result
                       >            trap_ne
1d10 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d12 : 68              >            pla         ;load status
1d13 : 48              >            pha
                       >            cmp_flag fv
1d14 : 0908            >            ora #decmode        ;ignore decimal mode bit
1d16 : c978            >            cmp #(fv|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1d18 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d1a : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
1d1b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1d1d : 48              >            pha         ;use stack to load status
1d1e : a901            >            lda #1     ;precharge accu
1d20 : 28              >            plp
                        
1d21 : 2416                     bit zp1+1   ;82 - should set N (M7) & Z / clear V
                                tst_a 1,fnz
1d23 : 08              >            php         ;save flags
1d24 : c901            >            cmp #1     ;test result
                       >            trap_ne
1d26 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d28 : 68              >            pla         ;load status
1d29 : 48              >            pha
                       >            cmp_flag fnz
1d2a : 0908            >            ora #decmode        ;ignore decimal mode bit
1d2c : c9ba            >            cmp #(fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1d2e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d30 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
1d31 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1d33 : 48              >            pha         ;use stack to load status
1d34 : a901            >            lda #1     ;precharge accu
1d36 : 28              >            plp
                        
1d37 : 2415                     bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,fnv
1d39 : 08              >            php         ;save flags
1d3a : c901            >            cmp #1     ;test result
                       >            trap_ne
1d3c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d3e : 68              >            pla         ;load status
1d3f : 48              >            pha
                       >            cmp_flag fnv
1d40 : 0908            >            ora #decmode        ;ignore decimal mode bit
1d42 : c9f8            >            cmp #(fnv|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1d44 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d46 : 28              >            plp         ;restore status
                        
                                
                                set_a $ff,$ff
                       >            load_flag $ff
1d47 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1d49 : 48              >            pha         ;use stack to load status
1d4a : a9ff            >            lda #$ff     ;precharge accu
1d4c : 28              >            plp
                        
1d4d : 2418                     bit zp1+3   ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv 
1d4f : 08              >            php         ;save flags
1d50 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
1d52 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d54 : 68              >            pla         ;load status
1d55 : 48              >            pha
                       >            cmp_flag ~fnv 
1d56 : 0908            >            ora #decmode        ;ignore decimal mode bit
1d58 : c93f            >            cmp #(~fnv |faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1d5a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d5c : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
1d5d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1d5f : 48              >            pha         ;use stack to load status
1d60 : a901            >            lda #1     ;precharge accu
1d62 : 28              >            plp
                        
1d63 : 2417                     bit zp1+2   ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
1d65 : 08              >            php         ;save flags
1d66 : c901            >            cmp #1     ;test result
                       >            trap_ne
1d68 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d6a : 68              >            pla         ;load status
1d6b : 48              >            pha
                       >            cmp_flag ~fnz
1d6c : 0908            >            ora #decmode        ;ignore decimal mode bit
1d6e : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1d70 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d72 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
1d73 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1d75 : 48              >            pha         ;use stack to load status
1d76 : a901            >            lda #1     ;precharge accu
1d78 : 28              >            plp
                        
1d79 : 2416                     bit zp1+1   ;82 - should set N (M7) & Z / clear V
                                tst_a 1,~fv
1d7b : 08              >            php         ;save flags
1d7c : c901            >            cmp #1     ;test result
                       >            trap_ne
1d7e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d80 : 68              >            pla         ;load status
1d81 : 48              >            pha
                       >            cmp_flag ~fv
1d82 : 0908            >            ora #decmode        ;ignore decimal mode bit
1d84 : c9bf            >            cmp #(~fv|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1d86 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d88 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
1d89 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1d8b : 48              >            pha         ;use stack to load status
1d8c : a901            >            lda #1     ;precharge accu
1d8e : 28              >            plp
                        
1d8f : 2415                     bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,~fz
1d91 : 08              >            php         ;save flags
1d92 : c901            >            cmp #1     ;test result
                       >            trap_ne
1d94 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d96 : 68              >            pla         ;load status
1d97 : 48              >            pha
                       >            cmp_flag ~fz
1d98 : 0908            >            ora #decmode        ;ignore decimal mode bit
1d9a : c9fd            >            cmp #(~fz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1d9c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1d9e : 28              >            plp         ;restore status
                        
                                
                                set_a $ff,0
                       >            load_flag 0
1d9f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1da1 : 48              >            pha         ;use stack to load status
1da2 : a9ff            >            lda #$ff     ;precharge accu
1da4 : 28              >            plp
                        
1da5 : 2c1b02                   bit abs1+3  ;00 - should set Z / clear  NV
                                tst_a $ff,fz 
1da8 : 08              >            php         ;save flags
1da9 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
1dab : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1dad : 68              >            pla         ;load status
1dae : 48              >            pha
                       >            cmp_flag fz 
1daf : 0908            >            ora #decmode        ;ignore decimal mode bit
1db1 : c93a            >            cmp #(fz |faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1db3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1db5 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
1db6 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1db8 : 48              >            pha         ;use stack to load status
1db9 : a901            >            lda #1     ;precharge accu
1dbb : 28              >            plp
                        
1dbc : 2c1a02                   bit abs1+2  ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
1dbf : 08              >            php         ;save flags
1dc0 : c901            >            cmp #1     ;test result
                       >            trap_ne
1dc2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1dc4 : 68              >            pla         ;load status
1dc5 : 48              >            pha
                       >            cmp_flag fv
1dc6 : 0908            >            ora #decmode        ;ignore decimal mode bit
1dc8 : c978            >            cmp #(fv|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1dca : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1dcc : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
1dcd : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1dcf : 48              >            pha         ;use stack to load status
1dd0 : a901            >            lda #1     ;precharge accu
1dd2 : 28              >            plp
                        
1dd3 : 2c1902                   bit abs1+1  ;82 - should set N (M7) & Z / clear V
                                tst_a 1,fnz
1dd6 : 08              >            php         ;save flags
1dd7 : c901            >            cmp #1     ;test result
                       >            trap_ne
1dd9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1ddb : 68              >            pla         ;load status
1ddc : 48              >            pha
                       >            cmp_flag fnz
1ddd : 0908            >            ora #decmode        ;ignore decimal mode bit
1ddf : c9ba            >            cmp #(fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1de1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1de3 : 28              >            plp         ;restore status
                        
                                set_a 1,0
                       >            load_flag 0
1de4 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1de6 : 48              >            pha         ;use stack to load status
1de7 : a901            >            lda #1     ;precharge accu
1de9 : 28              >            plp
                        
1dea : 2c1802                   bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,fnv
1ded : 08              >            php         ;save flags
1dee : c901            >            cmp #1     ;test result
                       >            trap_ne
1df0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1df2 : 68              >            pla         ;load status
1df3 : 48              >            pha
                       >            cmp_flag fnv
1df4 : 0908            >            ora #decmode        ;ignore decimal mode bit
1df6 : c9f8            >            cmp #(fnv|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1df8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1dfa : 28              >            plp         ;restore status
                        
                                
                                set_a $ff,$ff
                       >            load_flag $ff
1dfb : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1dfd : 48              >            pha         ;use stack to load status
1dfe : a9ff            >            lda #$ff     ;precharge accu
1e00 : 28              >            plp
                        
1e01 : 2c1b02                   bit abs1+3  ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv 
1e04 : 08              >            php         ;save flags
1e05 : c9ff            >            cmp #$ff     ;test result
                       >            trap_ne
1e07 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e09 : 68              >            pla         ;load status
1e0a : 48              >            pha
                       >            cmp_flag ~fnv 
1e0b : 0908            >            ora #decmode        ;ignore decimal mode bit
1e0d : c93f            >            cmp #(~fnv |faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1e0f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e11 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
1e12 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1e14 : 48              >            pha         ;use stack to load status
1e15 : a901            >            lda #1     ;precharge accu
1e17 : 28              >            plp
                        
1e18 : 2c1a02                   bit abs1+2  ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
1e1b : 08              >            php         ;save flags
1e1c : c901            >            cmp #1     ;test result
                       >            trap_ne
1e1e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e20 : 68              >            pla         ;load status
1e21 : 48              >            pha
                       >            cmp_flag ~fnz
1e22 : 0908            >            ora #decmode        ;ignore decimal mode bit
1e24 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1e26 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e28 : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
1e29 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1e2b : 48              >            pha         ;use stack to load status
1e2c : a901            >            lda #1     ;precharge accu
1e2e : 28              >            plp
                        
1e2f : 2c1902                   bit abs1+1  ;82 - should set N (M7) & Z / clear V
                                tst_a 1,~fv
1e32 : 08              >            php         ;save flags
1e33 : c901            >            cmp #1     ;test result
                       >            trap_ne
1e35 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e37 : 68              >            pla         ;load status
1e38 : 48              >            pha
                       >            cmp_flag ~fv
1e39 : 0908            >            ora #decmode        ;ignore decimal mode bit
1e3b : c9bf            >            cmp #(~fv|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1e3d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e3f : 28              >            plp         ;restore status
                        
                                set_a 1,$ff
                       >            load_flag $ff
1e40 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1e42 : 48              >            pha         ;use stack to load status
1e43 : a901            >            lda #1     ;precharge accu
1e45 : 28              >            plp
                        
1e46 : 2c1802                   bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,~fz
1e49 : 08              >            php         ;save flags
1e4a : c901            >            cmp #1     ;test result
                       >            trap_ne
1e4c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e4e : 68              >            pla         ;load status
1e4f : 48              >            pha
                       >            cmp_flag ~fz
1e50 : 0908            >            ora #decmode        ;ignore decimal mode bit
1e52 : c9fd            >            cmp #(~fz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1e54 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e56 : 28              >            plp         ;restore status
                        
                                next_test
1e57 : ad0002          >            lda test_case   ;previous test
1e5a : c919            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1e5c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001a =                 >test_num = test_num + 1
1e5e : a91a            >            lda #test_num   ;*** next tests' number
1e60 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; CPX - zp / abs / #         
                                set_x $80,0
                       >            load_flag 0
1e63 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1e65 : 48              >            pha         ;use stack to load status
1e66 : a280            >            ldx #$80     ;precharge index x
1e68 : 28              >            plp
                        
1e69 : e419                     cpx zp7f
                                tst_stat fc
1e6b : 08              >            php         ;save status
1e6c : 68              >            pla         ;use stack to retrieve status
1e6d : 48              >            pha
                       >            cmp_flag fc
1e6e : 0908            >            ora #decmode        ;ignore decimal mode bit
1e70 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1e72 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e74 : 28              >            plp         ;restore status
                        
1e75 : ca                       dex
1e76 : e419                     cpx zp7f
                                tst_stat fzc
1e78 : 08              >            php         ;save status
1e79 : 68              >            pla         ;use stack to retrieve status
1e7a : 48              >            pha
                       >            cmp_flag fzc
1e7b : 0908            >            ora #decmode        ;ignore decimal mode bit
1e7d : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1e7f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e81 : 28              >            plp         ;restore status
                        
1e82 : ca                       dex
1e83 : e419                     cpx zp7f
                                tst_x $7e,fn
1e85 : 08              >            php         ;save flags
1e86 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
1e88 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e8a : 68              >            pla         ;load status
1e8b : 48              >            pha
                       >            cmp_flag fn
1e8c : 0908            >            ora #decmode        ;ignore decimal mode bit
1e8e : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1e90 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1e92 : 28              >            plp         ;restore status
                        
                                set_x $80,$ff
                       >            load_flag $ff
1e93 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1e95 : 48              >            pha         ;use stack to load status
1e96 : a280            >            ldx #$80     ;precharge index x
1e98 : 28              >            plp
                        
1e99 : e419                     cpx zp7f
                                tst_stat ~fnz
1e9b : 08              >            php         ;save status
1e9c : 68              >            pla         ;use stack to retrieve status
1e9d : 48              >            pha
                       >            cmp_flag ~fnz
1e9e : 0908            >            ora #decmode        ;ignore decimal mode bit
1ea0 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1ea2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1ea4 : 28              >            plp         ;restore status
                        
1ea5 : ca                       dex
1ea6 : e419                     cpx zp7f
                                tst_stat ~fn
1ea8 : 08              >            php         ;save status
1ea9 : 68              >            pla         ;use stack to retrieve status
1eaa : 48              >            pha
                       >            cmp_flag ~fn
1eab : 0908            >            ora #decmode        ;ignore decimal mode bit
1ead : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1eaf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1eb1 : 28              >            plp         ;restore status
                        
1eb2 : ca                       dex
1eb3 : e419                     cpx zp7f
                                tst_x $7e,~fzc
1eb5 : 08              >            php         ;save flags
1eb6 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
1eb8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1eba : 68              >            pla         ;load status
1ebb : 48              >            pha
                       >            cmp_flag ~fzc
1ebc : 0908            >            ora #decmode        ;ignore decimal mode bit
1ebe : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1ec0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1ec2 : 28              >            plp         ;restore status
                        
                        
                                set_x $80,0
                       >            load_flag 0
1ec3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1ec5 : 48              >            pha         ;use stack to load status
1ec6 : a280            >            ldx #$80     ;precharge index x
1ec8 : 28              >            plp
                        
1ec9 : ec1c02                   cpx abs7f
                                tst_stat fc
1ecc : 08              >            php         ;save status
1ecd : 68              >            pla         ;use stack to retrieve status
1ece : 48              >            pha
                       >            cmp_flag fc
1ecf : 0908            >            ora #decmode        ;ignore decimal mode bit
1ed1 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1ed3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1ed5 : 28              >            plp         ;restore status
                        
1ed6 : ca                       dex
1ed7 : ec1c02                   cpx abs7f
                                tst_stat fzc
1eda : 08              >            php         ;save status
1edb : 68              >            pla         ;use stack to retrieve status
1edc : 48              >            pha
                       >            cmp_flag fzc
1edd : 0908            >            ora #decmode        ;ignore decimal mode bit
1edf : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1ee1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1ee3 : 28              >            plp         ;restore status
                        
1ee4 : ca                       dex
1ee5 : ec1c02                   cpx abs7f
                                tst_x $7e,fn
1ee8 : 08              >            php         ;save flags
1ee9 : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
1eeb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1eed : 68              >            pla         ;load status
1eee : 48              >            pha
                       >            cmp_flag fn
1eef : 0908            >            ora #decmode        ;ignore decimal mode bit
1ef1 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1ef3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1ef5 : 28              >            plp         ;restore status
                        
                                set_x $80,$ff
                       >            load_flag $ff
1ef6 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1ef8 : 48              >            pha         ;use stack to load status
1ef9 : a280            >            ldx #$80     ;precharge index x
1efb : 28              >            plp
                        
1efc : ec1c02                   cpx abs7f
                                tst_stat ~fnz
1eff : 08              >            php         ;save status
1f00 : 68              >            pla         ;use stack to retrieve status
1f01 : 48              >            pha
                       >            cmp_flag ~fnz
1f02 : 0908            >            ora #decmode        ;ignore decimal mode bit
1f04 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1f06 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f08 : 28              >            plp         ;restore status
                        
1f09 : ca                       dex
1f0a : ec1c02                   cpx abs7f
                                tst_stat ~fn
1f0d : 08              >            php         ;save status
1f0e : 68              >            pla         ;use stack to retrieve status
1f0f : 48              >            pha
                       >            cmp_flag ~fn
1f10 : 0908            >            ora #decmode        ;ignore decimal mode bit
1f12 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1f14 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f16 : 28              >            plp         ;restore status
                        
1f17 : ca                       dex
1f18 : ec1c02                   cpx abs7f
                                tst_x $7e,~fzc
1f1b : 08              >            php         ;save flags
1f1c : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
1f1e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f20 : 68              >            pla         ;load status
1f21 : 48              >            pha
                       >            cmp_flag ~fzc
1f22 : 0908            >            ora #decmode        ;ignore decimal mode bit
1f24 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1f26 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f28 : 28              >            plp         ;restore status
                        
                        
                                set_x $80,0
                       >            load_flag 0
1f29 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1f2b : 48              >            pha         ;use stack to load status
1f2c : a280            >            ldx #$80     ;precharge index x
1f2e : 28              >            plp
                        
1f2f : e07f                     cpx #$7f
                                tst_stat fc
1f31 : 08              >            php         ;save status
1f32 : 68              >            pla         ;use stack to retrieve status
1f33 : 48              >            pha
                       >            cmp_flag fc
1f34 : 0908            >            ora #decmode        ;ignore decimal mode bit
1f36 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1f38 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f3a : 28              >            plp         ;restore status
                        
1f3b : ca                       dex
1f3c : e07f                     cpx #$7f
                                tst_stat fzc
1f3e : 08              >            php         ;save status
1f3f : 68              >            pla         ;use stack to retrieve status
1f40 : 48              >            pha
                       >            cmp_flag fzc
1f41 : 0908            >            ora #decmode        ;ignore decimal mode bit
1f43 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1f45 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f47 : 28              >            plp         ;restore status
                        
1f48 : ca                       dex
1f49 : e07f                     cpx #$7f
                                tst_x $7e,fn
1f4b : 08              >            php         ;save flags
1f4c : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
1f4e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f50 : 68              >            pla         ;load status
1f51 : 48              >            pha
                       >            cmp_flag fn
1f52 : 0908            >            ora #decmode        ;ignore decimal mode bit
1f54 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1f56 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f58 : 28              >            plp         ;restore status
                        
                                set_x $80,$ff
                       >            load_flag $ff
1f59 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1f5b : 48              >            pha         ;use stack to load status
1f5c : a280            >            ldx #$80     ;precharge index x
1f5e : 28              >            plp
                        
1f5f : e07f                     cpx #$7f
                                tst_stat ~fnz
1f61 : 08              >            php         ;save status
1f62 : 68              >            pla         ;use stack to retrieve status
1f63 : 48              >            pha
                       >            cmp_flag ~fnz
1f64 : 0908            >            ora #decmode        ;ignore decimal mode bit
1f66 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1f68 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f6a : 28              >            plp         ;restore status
                        
1f6b : ca                       dex
1f6c : e07f                     cpx #$7f
                                tst_stat ~fn
1f6e : 08              >            php         ;save status
1f6f : 68              >            pla         ;use stack to retrieve status
1f70 : 48              >            pha
                       >            cmp_flag ~fn
1f71 : 0908            >            ora #decmode        ;ignore decimal mode bit
1f73 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1f75 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f77 : 28              >            plp         ;restore status
                        
1f78 : ca                       dex
1f79 : e07f                     cpx #$7f
                                tst_x $7e,~fzc
1f7b : 08              >            php         ;save flags
1f7c : e07e            >            cpx #$7e     ;test result
                       >            trap_ne
1f7e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f80 : 68              >            pla         ;load status
1f81 : 48              >            pha
                       >            cmp_flag ~fzc
1f82 : 0908            >            ora #decmode        ;ignore decimal mode bit
1f84 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1f86 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1f88 : 28              >            plp         ;restore status
                        
                                next_test
1f89 : ad0002          >            lda test_case   ;previous test
1f8c : c91a            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
1f8e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001b =                 >test_num = test_num + 1
1f90 : a91b            >            lda #test_num   ;*** next tests' number
1f92 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; CPY - zp / abs / #         
                                set_y $80,0
                       >            load_flag 0
1f95 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1f97 : 48              >            pha         ;use stack to load status
1f98 : a080            >            ldy #$80     ;precharge index y
1f9a : 28              >            plp
                        
1f9b : c419                     cpy zp7f
                                tst_stat fc
1f9d : 08              >            php         ;save status
1f9e : 68              >            pla         ;use stack to retrieve status
1f9f : 48              >            pha
                       >            cmp_flag fc
1fa0 : 0908            >            ora #decmode        ;ignore decimal mode bit
1fa2 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1fa4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1fa6 : 28              >            plp         ;restore status
                        
1fa7 : 88                       dey
1fa8 : c419                     cpy zp7f
                                tst_stat fzc
1faa : 08              >            php         ;save status
1fab : 68              >            pla         ;use stack to retrieve status
1fac : 48              >            pha
                       >            cmp_flag fzc
1fad : 0908            >            ora #decmode        ;ignore decimal mode bit
1faf : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1fb1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1fb3 : 28              >            plp         ;restore status
                        
1fb4 : 88                       dey
1fb5 : c419                     cpy zp7f
                                tst_y $7e,fn
1fb7 : 08              >            php         ;save flags
1fb8 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
1fba : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1fbc : 68              >            pla         ;load status
1fbd : 48              >            pha
                       >            cmp_flag fn
1fbe : 0908            >            ora #decmode        ;ignore decimal mode bit
1fc0 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1fc2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1fc4 : 28              >            plp         ;restore status
                        
                                set_y $80,$ff
                       >            load_flag $ff
1fc5 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
1fc7 : 48              >            pha         ;use stack to load status
1fc8 : a080            >            ldy #$80     ;precharge index y
1fca : 28              >            plp
                        
1fcb : c419                     cpy zp7f
                                tst_stat ~fnz
1fcd : 08              >            php         ;save status
1fce : 68              >            pla         ;use stack to retrieve status
1fcf : 48              >            pha
                       >            cmp_flag ~fnz
1fd0 : 0908            >            ora #decmode        ;ignore decimal mode bit
1fd2 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1fd4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1fd6 : 28              >            plp         ;restore status
                        
1fd7 : 88                       dey
1fd8 : c419                     cpy zp7f
                                tst_stat ~fn
1fda : 08              >            php         ;save status
1fdb : 68              >            pla         ;use stack to retrieve status
1fdc : 48              >            pha
                       >            cmp_flag ~fn
1fdd : 0908            >            ora #decmode        ;ignore decimal mode bit
1fdf : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1fe1 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1fe3 : 28              >            plp         ;restore status
                        
1fe4 : 88                       dey
1fe5 : c419                     cpy zp7f
                                tst_y $7e,~fzc
1fe7 : 08              >            php         ;save flags
1fe8 : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
1fea : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1fec : 68              >            pla         ;load status
1fed : 48              >            pha
                       >            cmp_flag ~fzc
1fee : 0908            >            ora #decmode        ;ignore decimal mode bit
1ff0 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
1ff2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
1ff4 : 28              >            plp         ;restore status
                        
                        
                                set_y $80,0
                       >            load_flag 0
1ff5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
1ff7 : 48              >            pha         ;use stack to load status
1ff8 : a080            >            ldy #$80     ;precharge index y
1ffa : 28              >            plp
                        
1ffb : cc1c02                   cpy abs7f
                                tst_stat fc
1ffe : 08              >            php         ;save status
1fff : 68              >            pla         ;use stack to retrieve status
2000 : 48              >            pha
                       >            cmp_flag fc
2001 : 0908            >            ora #decmode        ;ignore decimal mode bit
2003 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2005 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2007 : 28              >            plp         ;restore status
                        
2008 : 88                       dey
2009 : cc1c02                   cpy abs7f
                                tst_stat fzc
200c : 08              >            php         ;save status
200d : 68              >            pla         ;use stack to retrieve status
200e : 48              >            pha
                       >            cmp_flag fzc
200f : 0908            >            ora #decmode        ;ignore decimal mode bit
2011 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2013 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2015 : 28              >            plp         ;restore status
                        
2016 : 88                       dey
2017 : cc1c02                   cpy abs7f
                                tst_y $7e,fn
201a : 08              >            php         ;save flags
201b : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
201d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
201f : 68              >            pla         ;load status
2020 : 48              >            pha
                       >            cmp_flag fn
2021 : 0908            >            ora #decmode        ;ignore decimal mode bit
2023 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2025 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2027 : 28              >            plp         ;restore status
                        
                                set_y $80,$ff
                       >            load_flag $ff
2028 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
202a : 48              >            pha         ;use stack to load status
202b : a080            >            ldy #$80     ;precharge index y
202d : 28              >            plp
                        
202e : cc1c02                   cpy abs7f
                                tst_stat ~fnz
2031 : 08              >            php         ;save status
2032 : 68              >            pla         ;use stack to retrieve status
2033 : 48              >            pha
                       >            cmp_flag ~fnz
2034 : 0908            >            ora #decmode        ;ignore decimal mode bit
2036 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2038 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
203a : 28              >            plp         ;restore status
                        
203b : 88                       dey
203c : cc1c02                   cpy abs7f
                                tst_stat ~fn
203f : 08              >            php         ;save status
2040 : 68              >            pla         ;use stack to retrieve status
2041 : 48              >            pha
                       >            cmp_flag ~fn
2042 : 0908            >            ora #decmode        ;ignore decimal mode bit
2044 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2046 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2048 : 28              >            plp         ;restore status
                        
2049 : 88                       dey
204a : cc1c02                   cpy abs7f
                                tst_y $7e,~fzc
204d : 08              >            php         ;save flags
204e : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
2050 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2052 : 68              >            pla         ;load status
2053 : 48              >            pha
                       >            cmp_flag ~fzc
2054 : 0908            >            ora #decmode        ;ignore decimal mode bit
2056 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2058 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
205a : 28              >            plp         ;restore status
                        
                        
                                set_y $80,0
                       >            load_flag 0
205b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
205d : 48              >            pha         ;use stack to load status
205e : a080            >            ldy #$80     ;precharge index y
2060 : 28              >            plp
                        
2061 : c07f                     cpy #$7f
                                tst_stat fc
2063 : 08              >            php         ;save status
2064 : 68              >            pla         ;use stack to retrieve status
2065 : 48              >            pha
                       >            cmp_flag fc
2066 : 0908            >            ora #decmode        ;ignore decimal mode bit
2068 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
206a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
206c : 28              >            plp         ;restore status
                        
206d : 88                       dey
206e : c07f                     cpy #$7f
                                tst_stat fzc
2070 : 08              >            php         ;save status
2071 : 68              >            pla         ;use stack to retrieve status
2072 : 48              >            pha
                       >            cmp_flag fzc
2073 : 0908            >            ora #decmode        ;ignore decimal mode bit
2075 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2077 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2079 : 28              >            plp         ;restore status
                        
207a : 88                       dey
207b : c07f                     cpy #$7f
                                tst_y $7e,fn
207d : 08              >            php         ;save flags
207e : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
2080 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2082 : 68              >            pla         ;load status
2083 : 48              >            pha
                       >            cmp_flag fn
2084 : 0908            >            ora #decmode        ;ignore decimal mode bit
2086 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2088 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
208a : 28              >            plp         ;restore status
                        
                                set_y $80,$ff
                       >            load_flag $ff
208b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
208d : 48              >            pha         ;use stack to load status
208e : a080            >            ldy #$80     ;precharge index y
2090 : 28              >            plp
                        
2091 : c07f                     cpy #$7f
                                tst_stat ~fnz
2093 : 08              >            php         ;save status
2094 : 68              >            pla         ;use stack to retrieve status
2095 : 48              >            pha
                       >            cmp_flag ~fnz
2096 : 0908            >            ora #decmode        ;ignore decimal mode bit
2098 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
209a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
209c : 28              >            plp         ;restore status
                        
209d : 88                       dey
209e : c07f                     cpy #$7f
                                tst_stat ~fn
20a0 : 08              >            php         ;save status
20a1 : 68              >            pla         ;use stack to retrieve status
20a2 : 48              >            pha
                       >            cmp_flag ~fn
20a3 : 0908            >            ora #decmode        ;ignore decimal mode bit
20a5 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
20a7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
20a9 : 28              >            plp         ;restore status
                        
20aa : 88                       dey
20ab : c07f                     cpy #$7f
                                tst_y $7e,~fzc
20ad : 08              >            php         ;save flags
20ae : c07e            >            cpy #$7e     ;test result
                       >            trap_ne
20b0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
20b2 : 68              >            pla         ;load status
20b3 : 48              >            pha
                       >            cmp_flag ~fzc
20b4 : 0908            >            ora #decmode        ;ignore decimal mode bit
20b6 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
20b8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
20ba : 28              >            plp         ;restore status
                        
                                next_test
20bb : ad0002          >            lda test_case   ;previous test
20be : c91b            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
20c0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001c =                 >test_num = test_num + 1
20c2 : a91c            >            lda #test_num   ;*** next tests' number
20c4 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; CMP - zp / abs / #         
                                set_a $80,0
                       >            load_flag 0
20c7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
20c9 : 48              >            pha         ;use stack to load status
20ca : a980            >            lda #$80     ;precharge accu
20cc : 28              >            plp
                        
20cd : c519                     cmp zp7f
                                tst_a $80,fc
20cf : 08              >            php         ;save flags
20d0 : c980            >            cmp #$80     ;test result
                       >            trap_ne
20d2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
20d4 : 68              >            pla         ;load status
20d5 : 48              >            pha
                       >            cmp_flag fc
20d6 : 0908            >            ora #decmode        ;ignore decimal mode bit
20d8 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
20da : d0fe            >        bne *           ;failed not equal (non zero)
                       >
20dc : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
20dd : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
20df : 48              >            pha         ;use stack to load status
20e0 : a97f            >            lda #$7f     ;precharge accu
20e2 : 28              >            plp
                        
20e3 : c519                     cmp zp7f
                                tst_a $7f,fzc
20e5 : 08              >            php         ;save flags
20e6 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
20e8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
20ea : 68              >            pla         ;load status
20eb : 48              >            pha
                       >            cmp_flag fzc
20ec : 0908            >            ora #decmode        ;ignore decimal mode bit
20ee : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
20f0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
20f2 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
20f3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
20f5 : 48              >            pha         ;use stack to load status
20f6 : a97e            >            lda #$7e     ;precharge accu
20f8 : 28              >            plp
                        
20f9 : c519                     cmp zp7f
                                tst_a $7e,fn
20fb : 08              >            php         ;save flags
20fc : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
20fe : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2100 : 68              >            pla         ;load status
2101 : 48              >            pha
                       >            cmp_flag fn
2102 : 0908            >            ora #decmode        ;ignore decimal mode bit
2104 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2106 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2108 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
2109 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
210b : 48              >            pha         ;use stack to load status
210c : a980            >            lda #$80     ;precharge accu
210e : 28              >            plp
                        
210f : c519                     cmp zp7f
                                tst_a $80,~fnz
2111 : 08              >            php         ;save flags
2112 : c980            >            cmp #$80     ;test result
                       >            trap_ne
2114 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2116 : 68              >            pla         ;load status
2117 : 48              >            pha
                       >            cmp_flag ~fnz
2118 : 0908            >            ora #decmode        ;ignore decimal mode bit
211a : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
211c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
211e : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
211f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2121 : 48              >            pha         ;use stack to load status
2122 : a97f            >            lda #$7f     ;precharge accu
2124 : 28              >            plp
                        
2125 : c519                     cmp zp7f
                                tst_a $7f,~fn
2127 : 08              >            php         ;save flags
2128 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
212a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
212c : 68              >            pla         ;load status
212d : 48              >            pha
                       >            cmp_flag ~fn
212e : 0908            >            ora #decmode        ;ignore decimal mode bit
2130 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2132 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2134 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
2135 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2137 : 48              >            pha         ;use stack to load status
2138 : a97e            >            lda #$7e     ;precharge accu
213a : 28              >            plp
                        
213b : c519                     cmp zp7f
                                tst_a $7e,~fzc
213d : 08              >            php         ;save flags
213e : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2140 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2142 : 68              >            pla         ;load status
2143 : 48              >            pha
                       >            cmp_flag ~fzc
2144 : 0908            >            ora #decmode        ;ignore decimal mode bit
2146 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2148 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
214a : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
214b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
214d : 48              >            pha         ;use stack to load status
214e : a980            >            lda #$80     ;precharge accu
2150 : 28              >            plp
                        
2151 : cd1c02                   cmp abs7f
                                tst_a $80,fc
2154 : 08              >            php         ;save flags
2155 : c980            >            cmp #$80     ;test result
                       >            trap_ne
2157 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2159 : 68              >            pla         ;load status
215a : 48              >            pha
                       >            cmp_flag fc
215b : 0908            >            ora #decmode        ;ignore decimal mode bit
215d : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
215f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2161 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
2162 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2164 : 48              >            pha         ;use stack to load status
2165 : a97f            >            lda #$7f     ;precharge accu
2167 : 28              >            plp
                        
2168 : cd1c02                   cmp abs7f
                                tst_a $7f,fzc
216b : 08              >            php         ;save flags
216c : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
216e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2170 : 68              >            pla         ;load status
2171 : 48              >            pha
                       >            cmp_flag fzc
2172 : 0908            >            ora #decmode        ;ignore decimal mode bit
2174 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2176 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2178 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
2179 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
217b : 48              >            pha         ;use stack to load status
217c : a97e            >            lda #$7e     ;precharge accu
217e : 28              >            plp
                        
217f : cd1c02                   cmp abs7f
                                tst_a $7e,fn
2182 : 08              >            php         ;save flags
2183 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2185 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2187 : 68              >            pla         ;load status
2188 : 48              >            pha
                       >            cmp_flag fn
2189 : 0908            >            ora #decmode        ;ignore decimal mode bit
218b : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
218d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
218f : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
2190 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2192 : 48              >            pha         ;use stack to load status
2193 : a980            >            lda #$80     ;precharge accu
2195 : 28              >            plp
                        
2196 : cd1c02                   cmp abs7f
                                tst_a $80,~fnz
2199 : 08              >            php         ;save flags
219a : c980            >            cmp #$80     ;test result
                       >            trap_ne
219c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
219e : 68              >            pla         ;load status
219f : 48              >            pha
                       >            cmp_flag ~fnz
21a0 : 0908            >            ora #decmode        ;ignore decimal mode bit
21a2 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
21a4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
21a6 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
21a7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
21a9 : 48              >            pha         ;use stack to load status
21aa : a97f            >            lda #$7f     ;precharge accu
21ac : 28              >            plp
                        
21ad : cd1c02                   cmp abs7f
                                tst_a $7f,~fn
21b0 : 08              >            php         ;save flags
21b1 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
21b3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
21b5 : 68              >            pla         ;load status
21b6 : 48              >            pha
                       >            cmp_flag ~fn
21b7 : 0908            >            ora #decmode        ;ignore decimal mode bit
21b9 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
21bb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
21bd : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
21be : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
21c0 : 48              >            pha         ;use stack to load status
21c1 : a97e            >            lda #$7e     ;precharge accu
21c3 : 28              >            plp
                        
21c4 : cd1c02                   cmp abs7f
                                tst_a $7e,~fzc
21c7 : 08              >            php         ;save flags
21c8 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
21ca : d0fe            >        bne *           ;failed not equal (non zero)
                       >
21cc : 68              >            pla         ;load status
21cd : 48              >            pha
                       >            cmp_flag ~fzc
21ce : 0908            >            ora #decmode        ;ignore decimal mode bit
21d0 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
21d2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
21d4 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
21d5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
21d7 : 48              >            pha         ;use stack to load status
21d8 : a980            >            lda #$80     ;precharge accu
21da : 28              >            plp
                        
21db : c97f                     cmp #$7f
                                tst_a $80,fc
21dd : 08              >            php         ;save flags
21de : c980            >            cmp #$80     ;test result
                       >            trap_ne
21e0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
21e2 : 68              >            pla         ;load status
21e3 : 48              >            pha
                       >            cmp_flag fc
21e4 : 0908            >            ora #decmode        ;ignore decimal mode bit
21e6 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
21e8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
21ea : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
21eb : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
21ed : 48              >            pha         ;use stack to load status
21ee : a97f            >            lda #$7f     ;precharge accu
21f0 : 28              >            plp
                        
21f1 : c97f                     cmp #$7f
                                tst_a $7f,fzc
21f3 : 08              >            php         ;save flags
21f4 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
21f6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
21f8 : 68              >            pla         ;load status
21f9 : 48              >            pha
                       >            cmp_flag fzc
21fa : 0908            >            ora #decmode        ;ignore decimal mode bit
21fc : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
21fe : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2200 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
2201 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2203 : 48              >            pha         ;use stack to load status
2204 : a97e            >            lda #$7e     ;precharge accu
2206 : 28              >            plp
                        
2207 : c97f                     cmp #$7f
                                tst_a $7e,fn
2209 : 08              >            php         ;save flags
220a : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
220c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
220e : 68              >            pla         ;load status
220f : 48              >            pha
                       >            cmp_flag fn
2210 : 0908            >            ora #decmode        ;ignore decimal mode bit
2212 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2214 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2216 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
2217 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2219 : 48              >            pha         ;use stack to load status
221a : a980            >            lda #$80     ;precharge accu
221c : 28              >            plp
                        
221d : c97f                     cmp #$7f
                                tst_a $80,~fnz
221f : 08              >            php         ;save flags
2220 : c980            >            cmp #$80     ;test result
                       >            trap_ne
2222 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2224 : 68              >            pla         ;load status
2225 : 48              >            pha
                       >            cmp_flag ~fnz
2226 : 0908            >            ora #decmode        ;ignore decimal mode bit
2228 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
222a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
222c : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
222d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
222f : 48              >            pha         ;use stack to load status
2230 : a97f            >            lda #$7f     ;precharge accu
2232 : 28              >            plp
                        
2233 : c97f                     cmp #$7f
                                tst_a $7f,~fn
2235 : 08              >            php         ;save flags
2236 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2238 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
223a : 68              >            pla         ;load status
223b : 48              >            pha
                       >            cmp_flag ~fn
223c : 0908            >            ora #decmode        ;ignore decimal mode bit
223e : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2240 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2242 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
2243 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2245 : 48              >            pha         ;use stack to load status
2246 : a97e            >            lda #$7e     ;precharge accu
2248 : 28              >            plp
                        
2249 : c97f                     cmp #$7f
                                tst_a $7e,~fzc
224b : 08              >            php         ;save flags
224c : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
224e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2250 : 68              >            pla         ;load status
2251 : 48              >            pha
                       >            cmp_flag ~fzc
2252 : 0908            >            ora #decmode        ;ignore decimal mode bit
2254 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2256 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2258 : 28              >            plp         ;restore status
                        
                        
2259 : a204                     ldx #4          ;with indexing by X
                                set_a $80,0
                       >            load_flag 0
225b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
225d : 48              >            pha         ;use stack to load status
225e : a980            >            lda #$80     ;precharge accu
2260 : 28              >            plp
                        
2261 : d515                     cmp zp1,x
                                tst_a $80,fc
2263 : 08              >            php         ;save flags
2264 : c980            >            cmp #$80     ;test result
                       >            trap_ne
2266 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2268 : 68              >            pla         ;load status
2269 : 48              >            pha
                       >            cmp_flag fc
226a : 0908            >            ora #decmode        ;ignore decimal mode bit
226c : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
226e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2270 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
2271 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2273 : 48              >            pha         ;use stack to load status
2274 : a97f            >            lda #$7f     ;precharge accu
2276 : 28              >            plp
                        
2277 : d515                     cmp zp1,x
                                tst_a $7f,fzc
2279 : 08              >            php         ;save flags
227a : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
227c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
227e : 68              >            pla         ;load status
227f : 48              >            pha
                       >            cmp_flag fzc
2280 : 0908            >            ora #decmode        ;ignore decimal mode bit
2282 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2284 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2286 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
2287 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2289 : 48              >            pha         ;use stack to load status
228a : a97e            >            lda #$7e     ;precharge accu
228c : 28              >            plp
                        
228d : d515                     cmp zp1,x
                                tst_a $7e,fn
228f : 08              >            php         ;save flags
2290 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2292 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2294 : 68              >            pla         ;load status
2295 : 48              >            pha
                       >            cmp_flag fn
2296 : 0908            >            ora #decmode        ;ignore decimal mode bit
2298 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
229a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
229c : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
229d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
229f : 48              >            pha         ;use stack to load status
22a0 : a980            >            lda #$80     ;precharge accu
22a2 : 28              >            plp
                        
22a3 : d515                     cmp zp1,x
                                tst_a $80,~fnz
22a5 : 08              >            php         ;save flags
22a6 : c980            >            cmp #$80     ;test result
                       >            trap_ne
22a8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
22aa : 68              >            pla         ;load status
22ab : 48              >            pha
                       >            cmp_flag ~fnz
22ac : 0908            >            ora #decmode        ;ignore decimal mode bit
22ae : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
22b0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
22b2 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
22b3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
22b5 : 48              >            pha         ;use stack to load status
22b6 : a97f            >            lda #$7f     ;precharge accu
22b8 : 28              >            plp
                        
22b9 : d515                     cmp zp1,x
                                tst_a $7f,~fn
22bb : 08              >            php         ;save flags
22bc : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
22be : d0fe            >        bne *           ;failed not equal (non zero)
                       >
22c0 : 68              >            pla         ;load status
22c1 : 48              >            pha
                       >            cmp_flag ~fn
22c2 : 0908            >            ora #decmode        ;ignore decimal mode bit
22c4 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
22c6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
22c8 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
22c9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
22cb : 48              >            pha         ;use stack to load status
22cc : a97e            >            lda #$7e     ;precharge accu
22ce : 28              >            plp
                        
22cf : d515                     cmp zp1,x
                                tst_a $7e,~fzc
22d1 : 08              >            php         ;save flags
22d2 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
22d4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
22d6 : 68              >            pla         ;load status
22d7 : 48              >            pha
                       >            cmp_flag ~fzc
22d8 : 0908            >            ora #decmode        ;ignore decimal mode bit
22da : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
22dc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
22de : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
22df : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
22e1 : 48              >            pha         ;use stack to load status
22e2 : a980            >            lda #$80     ;precharge accu
22e4 : 28              >            plp
                        
22e5 : dd1802                   cmp abs1,x
                                tst_a $80,fc
22e8 : 08              >            php         ;save flags
22e9 : c980            >            cmp #$80     ;test result
                       >            trap_ne
22eb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
22ed : 68              >            pla         ;load status
22ee : 48              >            pha
                       >            cmp_flag fc
22ef : 0908            >            ora #decmode        ;ignore decimal mode bit
22f1 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
22f3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
22f5 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
22f6 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
22f8 : 48              >            pha         ;use stack to load status
22f9 : a97f            >            lda #$7f     ;precharge accu
22fb : 28              >            plp
                        
22fc : dd1802                   cmp abs1,x
                                tst_a $7f,fzc
22ff : 08              >            php         ;save flags
2300 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2302 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2304 : 68              >            pla         ;load status
2305 : 48              >            pha
                       >            cmp_flag fzc
2306 : 0908            >            ora #decmode        ;ignore decimal mode bit
2308 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
230a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
230c : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
230d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
230f : 48              >            pha         ;use stack to load status
2310 : a97e            >            lda #$7e     ;precharge accu
2312 : 28              >            plp
                        
2313 : dd1802                   cmp abs1,x
                                tst_a $7e,fn
2316 : 08              >            php         ;save flags
2317 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2319 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
231b : 68              >            pla         ;load status
231c : 48              >            pha
                       >            cmp_flag fn
231d : 0908            >            ora #decmode        ;ignore decimal mode bit
231f : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2321 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2323 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
2324 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2326 : 48              >            pha         ;use stack to load status
2327 : a980            >            lda #$80     ;precharge accu
2329 : 28              >            plp
                        
232a : dd1802                   cmp abs1,x
                                tst_a $80,~fnz
232d : 08              >            php         ;save flags
232e : c980            >            cmp #$80     ;test result
                       >            trap_ne
2330 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2332 : 68              >            pla         ;load status
2333 : 48              >            pha
                       >            cmp_flag ~fnz
2334 : 0908            >            ora #decmode        ;ignore decimal mode bit
2336 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2338 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
233a : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
233b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
233d : 48              >            pha         ;use stack to load status
233e : a97f            >            lda #$7f     ;precharge accu
2340 : 28              >            plp
                        
2341 : dd1802                   cmp abs1,x
                                tst_a $7f,~fn
2344 : 08              >            php         ;save flags
2345 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2347 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2349 : 68              >            pla         ;load status
234a : 48              >            pha
                       >            cmp_flag ~fn
234b : 0908            >            ora #decmode        ;ignore decimal mode bit
234d : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
234f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2351 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
2352 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2354 : 48              >            pha         ;use stack to load status
2355 : a97e            >            lda #$7e     ;precharge accu
2357 : 28              >            plp
                        
2358 : dd1802                   cmp abs1,x
                                tst_a $7e,~fzc
235b : 08              >            php         ;save flags
235c : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
235e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2360 : 68              >            pla         ;load status
2361 : 48              >            pha
                       >            cmp_flag ~fzc
2362 : 0908            >            ora #decmode        ;ignore decimal mode bit
2364 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2366 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2368 : 28              >            plp         ;restore status
                        
                        
2369 : a004                     ldy #4          ;with indexing by Y
236b : a208                     ldx #8          ;with indexed indirect
                                set_a $80,0
                       >            load_flag 0
236d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
236f : 48              >            pha         ;use stack to load status
2370 : a980            >            lda #$80     ;precharge accu
2372 : 28              >            plp
                        
2373 : d91802                   cmp abs1,y
                                tst_a $80,fc
2376 : 08              >            php         ;save flags
2377 : c980            >            cmp #$80     ;test result
                       >            trap_ne
2379 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
237b : 68              >            pla         ;load status
237c : 48              >            pha
                       >            cmp_flag fc
237d : 0908            >            ora #decmode        ;ignore decimal mode bit
237f : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2381 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2383 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
2384 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2386 : 48              >            pha         ;use stack to load status
2387 : a97f            >            lda #$7f     ;precharge accu
2389 : 28              >            plp
                        
238a : d91802                   cmp abs1,y
                                tst_a $7f,fzc
238d : 08              >            php         ;save flags
238e : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2390 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2392 : 68              >            pla         ;load status
2393 : 48              >            pha
                       >            cmp_flag fzc
2394 : 0908            >            ora #decmode        ;ignore decimal mode bit
2396 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2398 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
239a : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
239b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
239d : 48              >            pha         ;use stack to load status
239e : a97e            >            lda #$7e     ;precharge accu
23a0 : 28              >            plp
                        
23a1 : d91802                   cmp abs1,y
                                tst_a $7e,fn
23a4 : 08              >            php         ;save flags
23a5 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
23a7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
23a9 : 68              >            pla         ;load status
23aa : 48              >            pha
                       >            cmp_flag fn
23ab : 0908            >            ora #decmode        ;ignore decimal mode bit
23ad : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
23af : d0fe            >        bne *           ;failed not equal (non zero)
                       >
23b1 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
23b2 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
23b4 : 48              >            pha         ;use stack to load status
23b5 : a980            >            lda #$80     ;precharge accu
23b7 : 28              >            plp
                        
23b8 : d91802                   cmp abs1,y
                                tst_a $80,~fnz
23bb : 08              >            php         ;save flags
23bc : c980            >            cmp #$80     ;test result
                       >            trap_ne
23be : d0fe            >        bne *           ;failed not equal (non zero)
                       >
23c0 : 68              >            pla         ;load status
23c1 : 48              >            pha
                       >            cmp_flag ~fnz
23c2 : 0908            >            ora #decmode        ;ignore decimal mode bit
23c4 : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
23c6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
23c8 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
23c9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
23cb : 48              >            pha         ;use stack to load status
23cc : a97f            >            lda #$7f     ;precharge accu
23ce : 28              >            plp
                        
23cf : d91802                   cmp abs1,y
                                tst_a $7f,~fn
23d2 : 08              >            php         ;save flags
23d3 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
23d5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
23d7 : 68              >            pla         ;load status
23d8 : 48              >            pha
                       >            cmp_flag ~fn
23d9 : 0908            >            ora #decmode        ;ignore decimal mode bit
23db : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
23dd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
23df : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
23e0 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
23e2 : 48              >            pha         ;use stack to load status
23e3 : a97e            >            lda #$7e     ;precharge accu
23e5 : 28              >            plp
                        
23e6 : d91802                   cmp abs1,y
                                tst_a $7e,~fzc
23e9 : 08              >            php         ;save flags
23ea : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
23ec : d0fe            >        bne *           ;failed not equal (non zero)
                       >
23ee : 68              >            pla         ;load status
23ef : 48              >            pha
                       >            cmp_flag ~fzc
23f0 : 0908            >            ora #decmode        ;ignore decimal mode bit
23f2 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
23f4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
23f6 : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
23f7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
23f9 : 48              >            pha         ;use stack to load status
23fa : a980            >            lda #$80     ;precharge accu
23fc : 28              >            plp
                        
23fd : c126                     cmp (ind1,x)
                                tst_a $80,fc
23ff : 08              >            php         ;save flags
2400 : c980            >            cmp #$80     ;test result
                       >            trap_ne
2402 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2404 : 68              >            pla         ;load status
2405 : 48              >            pha
                       >            cmp_flag fc
2406 : 0908            >            ora #decmode        ;ignore decimal mode bit
2408 : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
240a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
240c : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
240d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
240f : 48              >            pha         ;use stack to load status
2410 : a97f            >            lda #$7f     ;precharge accu
2412 : 28              >            plp
                        
2413 : c126                     cmp (ind1,x)
                                tst_a $7f,fzc
2415 : 08              >            php         ;save flags
2416 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
2418 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
241a : 68              >            pla         ;load status
241b : 48              >            pha
                       >            cmp_flag fzc
241c : 0908            >            ora #decmode        ;ignore decimal mode bit
241e : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2420 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2422 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
2423 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2425 : 48              >            pha         ;use stack to load status
2426 : a97e            >            lda #$7e     ;precharge accu
2428 : 28              >            plp
                        
2429 : c126                     cmp (ind1,x)
                                tst_a $7e,fn
242b : 08              >            php         ;save flags
242c : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
242e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2430 : 68              >            pla         ;load status
2431 : 48              >            pha
                       >            cmp_flag fn
2432 : 0908            >            ora #decmode        ;ignore decimal mode bit
2434 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2436 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2438 : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
2439 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
243b : 48              >            pha         ;use stack to load status
243c : a980            >            lda #$80     ;precharge accu
243e : 28              >            plp
                        
243f : c126                     cmp (ind1,x)
                                tst_a $80,~fnz
2441 : 08              >            php         ;save flags
2442 : c980            >            cmp #$80     ;test result
                       >            trap_ne
2444 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2446 : 68              >            pla         ;load status
2447 : 48              >            pha
                       >            cmp_flag ~fnz
2448 : 0908            >            ora #decmode        ;ignore decimal mode bit
244a : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
244c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
244e : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
244f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2451 : 48              >            pha         ;use stack to load status
2452 : a97f            >            lda #$7f     ;precharge accu
2454 : 28              >            plp
                        
2455 : c126                     cmp (ind1,x)
                                tst_a $7f,~fn
2457 : 08              >            php         ;save flags
2458 : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
245a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
245c : 68              >            pla         ;load status
245d : 48              >            pha
                       >            cmp_flag ~fn
245e : 0908            >            ora #decmode        ;ignore decimal mode bit
2460 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2462 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2464 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
2465 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2467 : 48              >            pha         ;use stack to load status
2468 : a97e            >            lda #$7e     ;precharge accu
246a : 28              >            plp
                        
246b : c126                     cmp (ind1,x)
                                tst_a $7e,~fzc
246d : 08              >            php         ;save flags
246e : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
2470 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2472 : 68              >            pla         ;load status
2473 : 48              >            pha
                       >            cmp_flag ~fzc
2474 : 0908            >            ora #decmode        ;ignore decimal mode bit
2476 : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
2478 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
247a : 28              >            plp         ;restore status
                        
                        
                                set_a $80,0
                       >            load_flag 0
247b : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
247d : 48              >            pha         ;use stack to load status
247e : a980            >            lda #$80     ;precharge accu
2480 : 28              >            plp
                        
2481 : d126                     cmp (ind1),y
                                tst_a $80,fc
2483 : 08              >            php         ;save flags
2484 : c980            >            cmp #$80     ;test result
                       >            trap_ne
2486 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2488 : 68              >            pla         ;load status
2489 : 48              >            pha
                       >            cmp_flag fc
248a : 0908            >            ora #decmode        ;ignore decimal mode bit
248c : c939            >            cmp #(fc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
248e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2490 : 28              >            plp         ;restore status
                        
                                set_a $7f,0
                       >            load_flag 0
2491 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2493 : 48              >            pha         ;use stack to load status
2494 : a97f            >            lda #$7f     ;precharge accu
2496 : 28              >            plp
                        
2497 : d126                     cmp (ind1),y
                                tst_a $7f,fzc
2499 : 08              >            php         ;save flags
249a : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
249c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
249e : 68              >            pla         ;load status
249f : 48              >            pha
                       >            cmp_flag fzc
24a0 : 0908            >            ora #decmode        ;ignore decimal mode bit
24a2 : c93b            >            cmp #(fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
24a4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
24a6 : 28              >            plp         ;restore status
                        
                                set_a $7e,0
                       >            load_flag 0
24a7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
24a9 : 48              >            pha         ;use stack to load status
24aa : a97e            >            lda #$7e     ;precharge accu
24ac : 28              >            plp
                        
24ad : d126                     cmp (ind1),y
                                tst_a $7e,fn
24af : 08              >            php         ;save flags
24b0 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
24b2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
24b4 : 68              >            pla         ;load status
24b5 : 48              >            pha
                       >            cmp_flag fn
24b6 : 0908            >            ora #decmode        ;ignore decimal mode bit
24b8 : c9b8            >            cmp #(fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
24ba : d0fe            >        bne *           ;failed not equal (non zero)
                       >
24bc : 28              >            plp         ;restore status
                        
                                set_a $80,$ff
                       >            load_flag $ff
24bd : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
24bf : 48              >            pha         ;use stack to load status
24c0 : a980            >            lda #$80     ;precharge accu
24c2 : 28              >            plp
                        
24c3 : d126                     cmp (ind1),y
                                tst_a $80,~fnz
24c5 : 08              >            php         ;save flags
24c6 : c980            >            cmp #$80     ;test result
                       >            trap_ne
24c8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
24ca : 68              >            pla         ;load status
24cb : 48              >            pha
                       >            cmp_flag ~fnz
24cc : 0908            >            ora #decmode        ;ignore decimal mode bit
24ce : c97d            >            cmp #(~fnz|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
24d0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
24d2 : 28              >            plp         ;restore status
                        
                                set_a $7f,$ff
                       >            load_flag $ff
24d3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
24d5 : 48              >            pha         ;use stack to load status
24d6 : a97f            >            lda #$7f     ;precharge accu
24d8 : 28              >            plp
                        
24d9 : d126                     cmp (ind1),y
                                tst_a $7f,~fn
24db : 08              >            php         ;save flags
24dc : c97f            >            cmp #$7f     ;test result
                       >            trap_ne
24de : d0fe            >        bne *           ;failed not equal (non zero)
                       >
24e0 : 68              >            pla         ;load status
24e1 : 48              >            pha
                       >            cmp_flag ~fn
24e2 : 0908            >            ora #decmode        ;ignore decimal mode bit
24e4 : c97f            >            cmp #(~fn|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
24e6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
24e8 : 28              >            plp         ;restore status
                        
                                set_a $7e,$ff
                       >            load_flag $ff
24e9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
24eb : 48              >            pha         ;use stack to load status
24ec : a97e            >            lda #$7e     ;precharge accu
24ee : 28              >            plp
                        
24ef : d126                     cmp (ind1),y
                                tst_a $7e,~fzc
24f1 : 08              >            php         ;save flags
24f2 : c97e            >            cmp #$7e     ;test result
                       >            trap_ne
24f4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
24f6 : 68              >            pla         ;load status
24f7 : 48              >            pha
                       >            cmp_flag ~fzc
24f8 : 0908            >            ora #decmode        ;ignore decimal mode bit
24fa : c9fc            >            cmp #(~fzc|faod)&m8   ;expected flags + always on bits
                       >
                       >            trap_ne
24fc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
24fe : 28              >            plp         ;restore status
                        
                                next_test
24ff : ad0002          >            lda test_case   ;previous test
2502 : c91c            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2504 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001d =                 >test_num = test_num + 1
2506 : a91d            >            lda #test_num   ;*** next tests' number
2508 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing shifts - ASL LSR ROL ROR all addressing modes
                        ; shifts - accumulator
250b : a205                     ldx #5
250d :                  tasl
                                set_ax zps,0
                       >            load_flag 0
250d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
250f : 48              >            pha         ;use stack to load status
2510 : b513            >            lda zps,x    ;precharge accu
2512 : 28              >            plp
                        
2513 : 0a                       asl a
                                tst_ax rASL,fASL,0
2514 : 08              >            php         ;save flags
2515 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
2518 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
251a : 68              >            pla         ;load status
                       >            eor_flag 0
251b : 0908            >            ora #decmode        ;ignore decimal mode bit
251d : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
251f : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne     ;
2522 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2524 : ca                       dex
2525 : 10e6                     bpl tasl
2527 : a205                     ldx #5
2529 :                  tasl1
                                set_ax zps,$ff
                       >            load_flag $ff
2529 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
252b : 48              >            pha         ;use stack to load status
252c : b513            >            lda zps,x    ;precharge accu
252e : 28              >            plp
                        
252f : 0a                       asl a
                                tst_ax rASL,fASL,$ff-fnzc
2530 : 08              >            php         ;save flags
2531 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
2534 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2536 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2537 : 0908            >            ora #decmode        ;ignore decimal mode bit
2539 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
253b : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne     ;
253e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2540 : ca                       dex
2541 : 10e6                     bpl tasl1
                        
2543 : a205                     ldx #5
2545 :                  tlsr
                                set_ax zps,0
                       >            load_flag 0
2545 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2547 : 48              >            pha         ;use stack to load status
2548 : b513            >            lda zps,x    ;precharge accu
254a : 28              >            plp
                        
254b : 4a                       lsr a
                                tst_ax rLSR,fLSR,0
254c : 08              >            php         ;save flags
254d : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
2550 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2552 : 68              >            pla         ;load status
                       >            eor_flag 0
2553 : 0908            >            ora #decmode        ;ignore decimal mode bit
2555 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2557 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne     ;
255a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
255c : ca                       dex
255d : 10e6                     bpl tlsr
255f : a205                     ldx #5
2561 :                  tlsr1
                                set_ax zps,$ff
                       >            load_flag $ff
2561 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2563 : 48              >            pha         ;use stack to load status
2564 : b513            >            lda zps,x    ;precharge accu
2566 : 28              >            plp
                        
2567 : 4a                       lsr a
                                tst_ax rLSR,fLSR,$ff-fnzc
2568 : 08              >            php         ;save flags
2569 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
256c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
256e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
256f : 0908            >            ora #decmode        ;ignore decimal mode bit
2571 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2573 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne     ;
2576 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2578 : ca                       dex
2579 : 10e6                     bpl tlsr1
                        
257b : a205                     ldx #5
257d :                  trol
                                set_ax zps,0
                       >            load_flag 0
257d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
257f : 48              >            pha         ;use stack to load status
2580 : b513            >            lda zps,x    ;precharge accu
2582 : 28              >            plp
                        
2583 : 2a                       rol a
                                tst_ax rROL,fROL,0
2584 : 08              >            php         ;save flags
2585 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
2588 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
258a : 68              >            pla         ;load status
                       >            eor_flag 0
258b : 0908            >            ora #decmode        ;ignore decimal mode bit
258d : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
258f : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne     ;
2592 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2594 : ca                       dex
2595 : 10e6                     bpl trol
2597 : a205                     ldx #5
2599 :                  trol1
                                set_ax zps,$ff-fc
                       >            load_flag $ff-fc
2599 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
259b : 48              >            pha         ;use stack to load status
259c : b513            >            lda zps,x    ;precharge accu
259e : 28              >            plp
                        
259f : 2a                       rol a
                                tst_ax rROL,fROL,$ff-fnzc
25a0 : 08              >            php         ;save flags
25a1 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
25a4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
25a6 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
25a7 : 0908            >            ora #decmode        ;ignore decimal mode bit
25a9 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
25ab : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne     ;
25ae : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
25b0 : ca                       dex
25b1 : 10e6                     bpl trol1
                        
25b3 : a205                     ldx #5
25b5 :                  trolc
                                set_ax zps,fc
                       >            load_flag fc
25b5 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
25b7 : 48              >            pha         ;use stack to load status
25b8 : b513            >            lda zps,x    ;precharge accu
25ba : 28              >            plp
                        
25bb : 2a                       rol a
                                tst_ax rROLc,fROLc,0
25bc : 08              >            php         ;save flags
25bd : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
25c0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
25c2 : 68              >            pla         ;load status
                       >            eor_flag 0
25c3 : 0908            >            ora #decmode        ;ignore decimal mode bit
25c5 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
25c7 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne     ;
25ca : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
25cc : ca                       dex
25cd : 10e6                     bpl trolc
25cf : a205                     ldx #5
25d1 :                  trolc1
                                set_ax zps,$ff
                       >            load_flag $ff
25d1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
25d3 : 48              >            pha         ;use stack to load status
25d4 : b513            >            lda zps,x    ;precharge accu
25d6 : 28              >            plp
                        
25d7 : 2a                       rol a
                                tst_ax rROLc,fROLc,$ff-fnzc
25d8 : 08              >            php         ;save flags
25d9 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
25dc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
25de : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
25df : 0908            >            ora #decmode        ;ignore decimal mode bit
25e1 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
25e3 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne     ;
25e6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
25e8 : ca                       dex
25e9 : 10e6                     bpl trolc1
                        
25eb : a205                     ldx #5
25ed :                  tror
                                set_ax zps,0
                       >            load_flag 0
25ed : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
25ef : 48              >            pha         ;use stack to load status
25f0 : b513            >            lda zps,x    ;precharge accu
25f2 : 28              >            plp
                        
25f3 : 6a                       ror a
                                tst_ax rROR,fROR,0
25f4 : 08              >            php         ;save flags
25f5 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
25f8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
25fa : 68              >            pla         ;load status
                       >            eor_flag 0
25fb : 0908            >            ora #decmode        ;ignore decimal mode bit
25fd : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
25ff : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne     ;
2602 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2604 : ca                       dex
2605 : 10e6                     bpl tror
2607 : a205                     ldx #5
2609 :                  tror1
                                set_ax zps,$ff-fc
                       >            load_flag $ff-fc
2609 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
260b : 48              >            pha         ;use stack to load status
260c : b513            >            lda zps,x    ;precharge accu
260e : 28              >            plp
                        
260f : 6a                       ror a
                                tst_ax rROR,fROR,$ff-fnzc
2610 : 08              >            php         ;save flags
2611 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
2614 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2616 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2617 : 0908            >            ora #decmode        ;ignore decimal mode bit
2619 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
261b : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne     ;
261e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2620 : ca                       dex
2621 : 10e6                     bpl tror1
                        
2623 : a205                     ldx #5
2625 :                  trorc
                                set_ax zps,fc
                       >            load_flag fc
2625 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
2627 : 48              >            pha         ;use stack to load status
2628 : b513            >            lda zps,x    ;precharge accu
262a : 28              >            plp
                        
262b : 6a                       ror a
                                tst_ax rRORc,fRORc,0
262c : 08              >            php         ;save flags
262d : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
2630 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2632 : 68              >            pla         ;load status
                       >            eor_flag 0
2633 : 0908            >            ora #decmode        ;ignore decimal mode bit
2635 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2637 : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne     ;
263a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
263c : ca                       dex
263d : 10e6                     bpl trorc
263f : a205                     ldx #5
2641 :                  trorc1
                                set_ax zps,$ff
                       >            load_flag $ff
2641 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2643 : 48              >            pha         ;use stack to load status
2644 : b513            >            lda zps,x    ;precharge accu
2646 : 28              >            plp
                        
2647 : 6a                       ror a
                                tst_ax rRORc,fRORc,$ff-fnzc
2648 : 08              >            php         ;save flags
2649 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
264c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
264e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
264f : 0908            >            ora #decmode        ;ignore decimal mode bit
2651 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2653 : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne     ;
2656 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2658 : ca                       dex
2659 : 10e6                     bpl trorc1
                                next_test
265b : ad0002          >            lda test_case   ;previous test
265e : c91d            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2660 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001e =                 >test_num = test_num + 1
2662 : a91e            >            lda #test_num   ;*** next tests' number
2664 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; shifts - zeropage
2667 : a205                     ldx #5
2669 :                  tasl2
                                set_z zps,0
                       >            load_flag 0
2669 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
266b : 48              >            pha         ;use stack to load status
266c : b513            >            lda zps,x    ;load to zeropage
266e : 850c            >            sta zpt
2670 : 28              >            plp
                        
2671 : 060c                     asl zpt
                                tst_z rASL,fASL,0
2673 : 08              >            php         ;save flags
2674 : a50c            >            lda zpt
2676 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
2679 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
267b : 68              >            pla         ;load status
                       >            eor_flag 0
267c : 0908            >            ora #decmode        ;ignore decimal mode bit
267e : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2680 : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
2683 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2685 : ca                       dex
2686 : 10e1                     bpl tasl2
2688 : a205                     ldx #5
268a :                  tasl3
                                set_z zps,$ff
                       >            load_flag $ff
268a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
268c : 48              >            pha         ;use stack to load status
268d : b513            >            lda zps,x    ;load to zeropage
268f : 850c            >            sta zpt
2691 : 28              >            plp
                        
2692 : 060c                     asl zpt
                                tst_z rASL,fASL,$ff-fnzc
2694 : 08              >            php         ;save flags
2695 : a50c            >            lda zpt
2697 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
269a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
269c : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
269d : 0908            >            ora #decmode        ;ignore decimal mode bit
269f : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
26a1 : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
26a4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
26a6 : ca                       dex
26a7 : 10e1                     bpl tasl3
                        
26a9 : a205                     ldx #5
26ab :                  tlsr2
                                set_z zps,0
                       >            load_flag 0
26ab : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
26ad : 48              >            pha         ;use stack to load status
26ae : b513            >            lda zps,x    ;load to zeropage
26b0 : 850c            >            sta zpt
26b2 : 28              >            plp
                        
26b3 : 460c                     lsr zpt
                                tst_z rLSR,fLSR,0
26b5 : 08              >            php         ;save flags
26b6 : a50c            >            lda zpt
26b8 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
26bb : d0fe            >        bne *           ;failed not equal (non zero)
                       >
26bd : 68              >            pla         ;load status
                       >            eor_flag 0
26be : 0908            >            ora #decmode        ;ignore decimal mode bit
26c0 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
26c2 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
26c5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
26c7 : ca                       dex
26c8 : 10e1                     bpl tlsr2
26ca : a205                     ldx #5
26cc :                  tlsr3
                                set_z zps,$ff
                       >            load_flag $ff
26cc : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
26ce : 48              >            pha         ;use stack to load status
26cf : b513            >            lda zps,x    ;load to zeropage
26d1 : 850c            >            sta zpt
26d3 : 28              >            plp
                        
26d4 : 460c                     lsr zpt
                                tst_z rLSR,fLSR,$ff-fnzc
26d6 : 08              >            php         ;save flags
26d7 : a50c            >            lda zpt
26d9 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
26dc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
26de : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
26df : 0908            >            ora #decmode        ;ignore decimal mode bit
26e1 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
26e3 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
26e6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
26e8 : ca                       dex
26e9 : 10e1                     bpl tlsr3
                        
26eb : a205                     ldx #5
26ed :                  trol2
                                set_z zps,0
                       >            load_flag 0
26ed : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
26ef : 48              >            pha         ;use stack to load status
26f0 : b513            >            lda zps,x    ;load to zeropage
26f2 : 850c            >            sta zpt
26f4 : 28              >            plp
                        
26f5 : 260c                     rol zpt
                                tst_z rROL,fROL,0
26f7 : 08              >            php         ;save flags
26f8 : a50c            >            lda zpt
26fa : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
26fd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
26ff : 68              >            pla         ;load status
                       >            eor_flag 0
2700 : 0908            >            ora #decmode        ;ignore decimal mode bit
2702 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2704 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
2707 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2709 : ca                       dex
270a : 10e1                     bpl trol2
270c : a205                     ldx #5
270e :                  trol3
                                set_z zps,$ff-fc
                       >            load_flag $ff-fc
270e : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2710 : 48              >            pha         ;use stack to load status
2711 : b513            >            lda zps,x    ;load to zeropage
2713 : 850c            >            sta zpt
2715 : 28              >            plp
                        
2716 : 260c                     rol zpt
                                tst_z rROL,fROL,$ff-fnzc
2718 : 08              >            php         ;save flags
2719 : a50c            >            lda zpt
271b : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
271e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2720 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2721 : 0908            >            ora #decmode        ;ignore decimal mode bit
2723 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2725 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
2728 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
272a : ca                       dex
272b : 10e1                     bpl trol3
                        
272d : a205                     ldx #5
272f :                  trolc2
                                set_z zps,fc
                       >            load_flag fc
272f : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
2731 : 48              >            pha         ;use stack to load status
2732 : b513            >            lda zps,x    ;load to zeropage
2734 : 850c            >            sta zpt
2736 : 28              >            plp
                        
2737 : 260c                     rol zpt
                                tst_z rROLc,fROLc,0
2739 : 08              >            php         ;save flags
273a : a50c            >            lda zpt
273c : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
273f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2741 : 68              >            pla         ;load status
                       >            eor_flag 0
2742 : 0908            >            ora #decmode        ;ignore decimal mode bit
2744 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2746 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
2749 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
274b : ca                       dex
274c : 10e1                     bpl trolc2
274e : a205                     ldx #5
2750 :                  trolc3
                                set_z zps,$ff
                       >            load_flag $ff
2750 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2752 : 48              >            pha         ;use stack to load status
2753 : b513            >            lda zps,x    ;load to zeropage
2755 : 850c            >            sta zpt
2757 : 28              >            plp
                        
2758 : 260c                     rol zpt
                                tst_z rROLc,fROLc,$ff-fnzc
275a : 08              >            php         ;save flags
275b : a50c            >            lda zpt
275d : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
2760 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2762 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2763 : 0908            >            ora #decmode        ;ignore decimal mode bit
2765 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2767 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
276a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
276c : ca                       dex
276d : 10e1                     bpl trolc3
                        
276f : a205                     ldx #5
2771 :                  tror2
                                set_z zps,0
                       >            load_flag 0
2771 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2773 : 48              >            pha         ;use stack to load status
2774 : b513            >            lda zps,x    ;load to zeropage
2776 : 850c            >            sta zpt
2778 : 28              >            plp
                        
2779 : 660c                     ror zpt
                                tst_z rROR,fROR,0
277b : 08              >            php         ;save flags
277c : a50c            >            lda zpt
277e : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
2781 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2783 : 68              >            pla         ;load status
                       >            eor_flag 0
2784 : 0908            >            ora #decmode        ;ignore decimal mode bit
2786 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2788 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
278b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
278d : ca                       dex
278e : 10e1                     bpl tror2
2790 : a205                     ldx #5
2792 :                  tror3
                                set_z zps,$ff-fc
                       >            load_flag $ff-fc
2792 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2794 : 48              >            pha         ;use stack to load status
2795 : b513            >            lda zps,x    ;load to zeropage
2797 : 850c            >            sta zpt
2799 : 28              >            plp
                        
279a : 660c                     ror zpt
                                tst_z rROR,fROR,$ff-fnzc
279c : 08              >            php         ;save flags
279d : a50c            >            lda zpt
279f : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
27a2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
27a4 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
27a5 : 0908            >            ora #decmode        ;ignore decimal mode bit
27a7 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
27a9 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
27ac : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
27ae : ca                       dex
27af : 10e1                     bpl tror3
                        
27b1 : a205                     ldx #5
27b3 :                  trorc2
                                set_z zps,fc
                       >            load_flag fc
27b3 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
27b5 : 48              >            pha         ;use stack to load status
27b6 : b513            >            lda zps,x    ;load to zeropage
27b8 : 850c            >            sta zpt
27ba : 28              >            plp
                        
27bb : 660c                     ror zpt
                                tst_z rRORc,fRORc,0
27bd : 08              >            php         ;save flags
27be : a50c            >            lda zpt
27c0 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
27c3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
27c5 : 68              >            pla         ;load status
                       >            eor_flag 0
27c6 : 0908            >            ora #decmode        ;ignore decimal mode bit
27c8 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
27ca : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
27cd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
27cf : ca                       dex
27d0 : 10e1                     bpl trorc2
27d2 : a205                     ldx #5
27d4 :                  trorc3
                                set_z zps,$ff
                       >            load_flag $ff
27d4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
27d6 : 48              >            pha         ;use stack to load status
27d7 : b513            >            lda zps,x    ;load to zeropage
27d9 : 850c            >            sta zpt
27db : 28              >            plp
                        
27dc : 660c                     ror zpt
                                tst_z rRORc,fRORc,$ff-fnzc
27de : 08              >            php         ;save flags
27df : a50c            >            lda zpt
27e1 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
27e4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
27e6 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
27e7 : 0908            >            ora #decmode        ;ignore decimal mode bit
27e9 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
27eb : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
27ee : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
27f0 : ca                       dex
27f1 : 10e1                     bpl trorc3
                                next_test
27f3 : ad0002          >            lda test_case   ;previous test
27f6 : c91e            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
27f8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
001f =                 >test_num = test_num + 1
27fa : a91f            >            lda #test_num   ;*** next tests' number
27fc : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; shifts - absolute
27ff : a205                     ldx #5
2801 :                  tasl4
                                set_abs zps,0
                       >            load_flag 0
2801 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2803 : 48              >            pha         ;use stack to load status
2804 : b513            >            lda zps,x    ;load to memory
2806 : 8d0302          >            sta abst
2809 : 28              >            plp
                        
280a : 0e0302                   asl abst
                                tst_abs rASL,fASL,0
280d : 08              >            php         ;save flags
280e : ad0302          >            lda abst
2811 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
2814 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2816 : 68              >            pla         ;load status
                       >            eor_flag 0
2817 : 0908            >            ora #decmode        ;ignore decimal mode bit
2819 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
281b : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
281e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2820 : ca                       dex
2821 : 10de                     bpl tasl4
2823 : a205                     ldx #5
2825 :                  tasl5
                                set_abs zps,$ff
                       >            load_flag $ff
2825 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2827 : 48              >            pha         ;use stack to load status
2828 : b513            >            lda zps,x    ;load to memory
282a : 8d0302          >            sta abst
282d : 28              >            plp
                        
282e : 0e0302                   asl abst
                                tst_abs rASL,fASL,$ff-fnzc
2831 : 08              >            php         ;save flags
2832 : ad0302          >            lda abst
2835 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
2838 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
283a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
283b : 0908            >            ora #decmode        ;ignore decimal mode bit
283d : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
283f : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
2842 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2844 : ca                       dex
2845 : 10de                     bpl tasl5
                        
2847 : a205                     ldx #5
2849 :                  tlsr4
                                set_abs zps,0
                       >            load_flag 0
2849 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
284b : 48              >            pha         ;use stack to load status
284c : b513            >            lda zps,x    ;load to memory
284e : 8d0302          >            sta abst
2851 : 28              >            plp
                        
2852 : 4e0302                   lsr abst
                                tst_abs rLSR,fLSR,0
2855 : 08              >            php         ;save flags
2856 : ad0302          >            lda abst
2859 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
285c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
285e : 68              >            pla         ;load status
                       >            eor_flag 0
285f : 0908            >            ora #decmode        ;ignore decimal mode bit
2861 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2863 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
2866 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2868 : ca                       dex
2869 : 10de                     bpl tlsr4
286b : a205                     ldx #5
286d :                  tlsr5
                                set_abs zps,$ff
                       >            load_flag $ff
286d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
286f : 48              >            pha         ;use stack to load status
2870 : b513            >            lda zps,x    ;load to memory
2872 : 8d0302          >            sta abst
2875 : 28              >            plp
                        
2876 : 4e0302                   lsr abst
                                tst_abs rLSR,fLSR,$ff-fnzc
2879 : 08              >            php         ;save flags
287a : ad0302          >            lda abst
287d : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
2880 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2882 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2883 : 0908            >            ora #decmode        ;ignore decimal mode bit
2885 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2887 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
288a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
288c : ca                       dex
288d : 10de                     bpl tlsr5
                        
288f : a205                     ldx #5
2891 :                  trol4
                                set_abs zps,0
                       >            load_flag 0
2891 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2893 : 48              >            pha         ;use stack to load status
2894 : b513            >            lda zps,x    ;load to memory
2896 : 8d0302          >            sta abst
2899 : 28              >            plp
                        
289a : 2e0302                   rol abst
                                tst_abs rROL,fROL,0
289d : 08              >            php         ;save flags
289e : ad0302          >            lda abst
28a1 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
28a4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
28a6 : 68              >            pla         ;load status
                       >            eor_flag 0
28a7 : 0908            >            ora #decmode        ;ignore decimal mode bit
28a9 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
28ab : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
28ae : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
28b0 : ca                       dex
28b1 : 10de                     bpl trol4
28b3 : a205                     ldx #5
28b5 :                  trol5
                                set_abs zps,$ff-fc
                       >            load_flag $ff-fc
28b5 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
28b7 : 48              >            pha         ;use stack to load status
28b8 : b513            >            lda zps,x    ;load to memory
28ba : 8d0302          >            sta abst
28bd : 28              >            plp
                        
28be : 2e0302                   rol abst
                                tst_abs rROL,fROL,$ff-fnzc
28c1 : 08              >            php         ;save flags
28c2 : ad0302          >            lda abst
28c5 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
28c8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
28ca : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
28cb : 0908            >            ora #decmode        ;ignore decimal mode bit
28cd : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
28cf : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
28d2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
28d4 : ca                       dex
28d5 : 10de                     bpl trol5
                        
28d7 : a205                     ldx #5
28d9 :                  trolc4
                                set_abs zps,fc
                       >            load_flag fc
28d9 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
28db : 48              >            pha         ;use stack to load status
28dc : b513            >            lda zps,x    ;load to memory
28de : 8d0302          >            sta abst
28e1 : 28              >            plp
                        
28e2 : 2e0302                   rol abst
                                tst_abs rROLc,fROLc,0
28e5 : 08              >            php         ;save flags
28e6 : ad0302          >            lda abst
28e9 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
28ec : d0fe            >        bne *           ;failed not equal (non zero)
                       >
28ee : 68              >            pla         ;load status
                       >            eor_flag 0
28ef : 0908            >            ora #decmode        ;ignore decimal mode bit
28f1 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
28f3 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
28f6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
28f8 : ca                       dex
28f9 : 10de                     bpl trolc4
28fb : a205                     ldx #5
28fd :                  trolc5
                                set_abs zps,$ff
                       >            load_flag $ff
28fd : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
28ff : 48              >            pha         ;use stack to load status
2900 : b513            >            lda zps,x    ;load to memory
2902 : 8d0302          >            sta abst
2905 : 28              >            plp
                        
2906 : 2e0302                   rol abst
                                tst_abs rROLc,fROLc,$ff-fnzc
2909 : 08              >            php         ;save flags
290a : ad0302          >            lda abst
290d : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
2910 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2912 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2913 : 0908            >            ora #decmode        ;ignore decimal mode bit
2915 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2917 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
291a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
291c : ca                       dex
291d : 10de                     bpl trolc5
                        
291f : a205                     ldx #5
2921 :                  tror4
                                set_abs zps,0
                       >            load_flag 0
2921 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2923 : 48              >            pha         ;use stack to load status
2924 : b513            >            lda zps,x    ;load to memory
2926 : 8d0302          >            sta abst
2929 : 28              >            plp
                        
292a : 6e0302                   ror abst
                                tst_abs rROR,fROR,0
292d : 08              >            php         ;save flags
292e : ad0302          >            lda abst
2931 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
2934 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2936 : 68              >            pla         ;load status
                       >            eor_flag 0
2937 : 0908            >            ora #decmode        ;ignore decimal mode bit
2939 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
293b : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
293e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2940 : ca                       dex
2941 : 10de                     bpl tror4
2943 : a205                     ldx #5
2945 :                  tror5
                                set_abs zps,$ff-fc
                       >            load_flag $ff-fc
2945 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2947 : 48              >            pha         ;use stack to load status
2948 : b513            >            lda zps,x    ;load to memory
294a : 8d0302          >            sta abst
294d : 28              >            plp
                        
294e : 6e0302                   ror abst
                                tst_abs rROR,fROR,$ff-fnzc
2951 : 08              >            php         ;save flags
2952 : ad0302          >            lda abst
2955 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
2958 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
295a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
295b : 0908            >            ora #decmode        ;ignore decimal mode bit
295d : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
295f : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
2962 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2964 : ca                       dex
2965 : 10de                     bpl tror5
                        
2967 : a205                     ldx #5
2969 :                  trorc4
                                set_abs zps,fc
                       >            load_flag fc
2969 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
296b : 48              >            pha         ;use stack to load status
296c : b513            >            lda zps,x    ;load to memory
296e : 8d0302          >            sta abst
2971 : 28              >            plp
                        
2972 : 6e0302                   ror abst
                                tst_abs rRORc,fRORc,0
2975 : 08              >            php         ;save flags
2976 : ad0302          >            lda abst
2979 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
297c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
297e : 68              >            pla         ;load status
                       >            eor_flag 0
297f : 0908            >            ora #decmode        ;ignore decimal mode bit
2981 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2983 : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
2986 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2988 : ca                       dex
2989 : 10de                     bpl trorc4
298b : a205                     ldx #5
298d :                  trorc5
                                set_abs zps,$ff
                       >            load_flag $ff
298d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
298f : 48              >            pha         ;use stack to load status
2990 : b513            >            lda zps,x    ;load to memory
2992 : 8d0302          >            sta abst
2995 : 28              >            plp
                        
2996 : 6e0302                   ror abst
                                tst_abs rRORc,fRORc,$ff-fnzc
2999 : 08              >            php         ;save flags
299a : ad0302          >            lda abst
299d : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
29a0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
29a2 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
29a3 : 0908            >            ora #decmode        ;ignore decimal mode bit
29a5 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
29a7 : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
29aa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
29ac : ca                       dex
29ad : 10de                     bpl trorc5
                                next_test
29af : ad0002          >            lda test_case   ;previous test
29b2 : c91f            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
29b4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0020 =                 >test_num = test_num + 1
29b6 : a920            >            lda #test_num   ;*** next tests' number
29b8 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; shifts - zp indexed
29bb : a205                     ldx #5
29bd :                  tasl6
                                set_zx zps,0
                       >            load_flag 0
29bd : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
29bf : 48              >            pha         ;use stack to load status
29c0 : b513            >            lda zps,x    ;load to indexed zeropage
29c2 : 950c            >            sta zpt,x
29c4 : 28              >            plp
                        
29c5 : 160c                     asl zpt,x
                                tst_zx rASL,fASL,0
29c7 : 08              >            php         ;save flags
29c8 : b50c            >            lda zpt,x
29ca : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
29cd : d0fe            >        bne *           ;failed not equal (non zero)
                       >
29cf : 68              >            pla         ;load status
                       >            eor_flag 0
29d0 : 0908            >            ora #decmode        ;ignore decimal mode bit
29d2 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
29d4 : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
29d7 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
29d9 : ca                       dex
29da : 10e1                     bpl tasl6
29dc : a205                     ldx #5
29de :                  tasl7
                                set_zx zps,$ff
                       >            load_flag $ff
29de : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
29e0 : 48              >            pha         ;use stack to load status
29e1 : b513            >            lda zps,x    ;load to indexed zeropage
29e3 : 950c            >            sta zpt,x
29e5 : 28              >            plp
                        
29e6 : 160c                     asl zpt,x
                                tst_zx rASL,fASL,$ff-fnzc
29e8 : 08              >            php         ;save flags
29e9 : b50c            >            lda zpt,x
29eb : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
29ee : d0fe            >        bne *           ;failed not equal (non zero)
                       >
29f0 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
29f1 : 0908            >            ora #decmode        ;ignore decimal mode bit
29f3 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
29f5 : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
29f8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
29fa : ca                       dex
29fb : 10e1                     bpl tasl7
                        
29fd : a205                     ldx #5
29ff :                  tlsr6
                                set_zx zps,0
                       >            load_flag 0
29ff : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2a01 : 48              >            pha         ;use stack to load status
2a02 : b513            >            lda zps,x    ;load to indexed zeropage
2a04 : 950c            >            sta zpt,x
2a06 : 28              >            plp
                        
2a07 : 560c                     lsr zpt,x
                                tst_zx rLSR,fLSR,0
2a09 : 08              >            php         ;save flags
2a0a : b50c            >            lda zpt,x
2a0c : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
2a0f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2a11 : 68              >            pla         ;load status
                       >            eor_flag 0
2a12 : 0908            >            ora #decmode        ;ignore decimal mode bit
2a14 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2a16 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
2a19 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2a1b : ca                       dex
2a1c : 10e1                     bpl tlsr6
2a1e : a205                     ldx #5
2a20 :                  tlsr7
                                set_zx zps,$ff
                       >            load_flag $ff
2a20 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2a22 : 48              >            pha         ;use stack to load status
2a23 : b513            >            lda zps,x    ;load to indexed zeropage
2a25 : 950c            >            sta zpt,x
2a27 : 28              >            plp
                        
2a28 : 560c                     lsr zpt,x
                                tst_zx rLSR,fLSR,$ff-fnzc
2a2a : 08              >            php         ;save flags
2a2b : b50c            >            lda zpt,x
2a2d : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
2a30 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2a32 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2a33 : 0908            >            ora #decmode        ;ignore decimal mode bit
2a35 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2a37 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
2a3a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2a3c : ca                       dex
2a3d : 10e1                     bpl tlsr7
                        
2a3f : a205                     ldx #5
2a41 :                  trol6
                                set_zx zps,0
                       >            load_flag 0
2a41 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2a43 : 48              >            pha         ;use stack to load status
2a44 : b513            >            lda zps,x    ;load to indexed zeropage
2a46 : 950c            >            sta zpt,x
2a48 : 28              >            plp
                        
2a49 : 360c                     rol zpt,x
                                tst_zx rROL,fROL,0
2a4b : 08              >            php         ;save flags
2a4c : b50c            >            lda zpt,x
2a4e : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
2a51 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2a53 : 68              >            pla         ;load status
                       >            eor_flag 0
2a54 : 0908            >            ora #decmode        ;ignore decimal mode bit
2a56 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2a58 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
2a5b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2a5d : ca                       dex
2a5e : 10e1                     bpl trol6
2a60 : a205                     ldx #5
2a62 :                  trol7
                                set_zx zps,$ff-fc
                       >            load_flag $ff-fc
2a62 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2a64 : 48              >            pha         ;use stack to load status
2a65 : b513            >            lda zps,x    ;load to indexed zeropage
2a67 : 950c            >            sta zpt,x
2a69 : 28              >            plp
                        
2a6a : 360c                     rol zpt,x
                                tst_zx rROL,fROL,$ff-fnzc
2a6c : 08              >            php         ;save flags
2a6d : b50c            >            lda zpt,x
2a6f : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
2a72 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2a74 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2a75 : 0908            >            ora #decmode        ;ignore decimal mode bit
2a77 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2a79 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
2a7c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2a7e : ca                       dex
2a7f : 10e1                     bpl trol7
                        
2a81 : a205                     ldx #5
2a83 :                  trolc6
                                set_zx zps,fc
                       >            load_flag fc
2a83 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
2a85 : 48              >            pha         ;use stack to load status
2a86 : b513            >            lda zps,x    ;load to indexed zeropage
2a88 : 950c            >            sta zpt,x
2a8a : 28              >            plp
                        
2a8b : 360c                     rol zpt,x
                                tst_zx rROLc,fROLc,0
2a8d : 08              >            php         ;save flags
2a8e : b50c            >            lda zpt,x
2a90 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
2a93 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2a95 : 68              >            pla         ;load status
                       >            eor_flag 0
2a96 : 0908            >            ora #decmode        ;ignore decimal mode bit
2a98 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2a9a : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
2a9d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2a9f : ca                       dex
2aa0 : 10e1                     bpl trolc6
2aa2 : a205                     ldx #5
2aa4 :                  trolc7
                                set_zx zps,$ff
                       >            load_flag $ff
2aa4 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2aa6 : 48              >            pha         ;use stack to load status
2aa7 : b513            >            lda zps,x    ;load to indexed zeropage
2aa9 : 950c            >            sta zpt,x
2aab : 28              >            plp
                        
2aac : 360c                     rol zpt,x
                                tst_zx rROLc,fROLc,$ff-fnzc
2aae : 08              >            php         ;save flags
2aaf : b50c            >            lda zpt,x
2ab1 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
2ab4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2ab6 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2ab7 : 0908            >            ora #decmode        ;ignore decimal mode bit
2ab9 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2abb : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
2abe : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2ac0 : ca                       dex
2ac1 : 10e1                     bpl trolc7
                        
2ac3 : a205                     ldx #5
2ac5 :                  tror6
                                set_zx zps,0
                       >            load_flag 0
2ac5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2ac7 : 48              >            pha         ;use stack to load status
2ac8 : b513            >            lda zps,x    ;load to indexed zeropage
2aca : 950c            >            sta zpt,x
2acc : 28              >            plp
                        
2acd : 760c                     ror zpt,x
                                tst_zx rROR,fROR,0
2acf : 08              >            php         ;save flags
2ad0 : b50c            >            lda zpt,x
2ad2 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
2ad5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2ad7 : 68              >            pla         ;load status
                       >            eor_flag 0
2ad8 : 0908            >            ora #decmode        ;ignore decimal mode bit
2ada : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2adc : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
2adf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2ae1 : ca                       dex
2ae2 : 10e1                     bpl tror6
2ae4 : a205                     ldx #5
2ae6 :                  tror7
                                set_zx zps,$ff-fc
                       >            load_flag $ff-fc
2ae6 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2ae8 : 48              >            pha         ;use stack to load status
2ae9 : b513            >            lda zps,x    ;load to indexed zeropage
2aeb : 950c            >            sta zpt,x
2aed : 28              >            plp
                        
2aee : 760c                     ror zpt,x
                                tst_zx rROR,fROR,$ff-fnzc
2af0 : 08              >            php         ;save flags
2af1 : b50c            >            lda zpt,x
2af3 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
2af6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2af8 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2af9 : 0908            >            ora #decmode        ;ignore decimal mode bit
2afb : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2afd : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
2b00 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2b02 : ca                       dex
2b03 : 10e1                     bpl tror7
                        
2b05 : a205                     ldx #5
2b07 :                  trorc6
                                set_zx zps,fc
                       >            load_flag fc
2b07 : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
2b09 : 48              >            pha         ;use stack to load status
2b0a : b513            >            lda zps,x    ;load to indexed zeropage
2b0c : 950c            >            sta zpt,x
2b0e : 28              >            plp
                        
2b0f : 760c                     ror zpt,x
                                tst_zx rRORc,fRORc,0
2b11 : 08              >            php         ;save flags
2b12 : b50c            >            lda zpt,x
2b14 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
2b17 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2b19 : 68              >            pla         ;load status
                       >            eor_flag 0
2b1a : 0908            >            ora #decmode        ;ignore decimal mode bit
2b1c : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2b1e : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
2b21 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2b23 : ca                       dex
2b24 : 10e1                     bpl trorc6
2b26 : a205                     ldx #5
2b28 :                  trorc7
                                set_zx zps,$ff
                       >            load_flag $ff
2b28 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2b2a : 48              >            pha         ;use stack to load status
2b2b : b513            >            lda zps,x    ;load to indexed zeropage
2b2d : 950c            >            sta zpt,x
2b2f : 28              >            plp
                        
2b30 : 760c                     ror zpt,x
                                tst_zx rRORc,fRORc,$ff-fnzc
2b32 : 08              >            php         ;save flags
2b33 : b50c            >            lda zpt,x
2b35 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
2b38 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2b3a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2b3b : 0908            >            ora #decmode        ;ignore decimal mode bit
2b3d : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2b3f : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
2b42 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2b44 : ca                       dex
2b45 : 10e1                     bpl trorc7
                                next_test
2b47 : ad0002          >            lda test_case   ;previous test
2b4a : c920            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2b4c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0021 =                 >test_num = test_num + 1
2b4e : a921            >            lda #test_num   ;*** next tests' number
2b50 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                                
                        ; shifts - abs indexed
2b53 : a205                     ldx #5
2b55 :                  tasl8
                                set_absx zps,0
                       >            load_flag 0
2b55 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2b57 : 48              >            pha         ;use stack to load status
2b58 : b513            >            lda zps,x    ;load to indexed memory
2b5a : 9d0302          >            sta abst,x
2b5d : 28              >            plp
                        
2b5e : 1e0302                   asl abst,x
                                tst_absx rASL,fASL,0
2b61 : 08              >            php         ;save flags
2b62 : bd0302          >            lda abst,x
2b65 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
2b68 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2b6a : 68              >            pla         ;load status
                       >            eor_flag 0
2b6b : 0908            >            ora #decmode        ;ignore decimal mode bit
2b6d : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2b6f : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
2b72 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2b74 : ca                       dex
2b75 : 10de                     bpl tasl8
2b77 : a205                     ldx #5
2b79 :                  tasl9
                                set_absx zps,$ff
                       >            load_flag $ff
2b79 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2b7b : 48              >            pha         ;use stack to load status
2b7c : b513            >            lda zps,x    ;load to indexed memory
2b7e : 9d0302          >            sta abst,x
2b81 : 28              >            plp
                        
2b82 : 1e0302                   asl abst,x
                                tst_absx rASL,fASL,$ff-fnzc
2b85 : 08              >            php         ;save flags
2b86 : bd0302          >            lda abst,x
2b89 : dd2102          >            cmp rASL,x    ;test result
                       >            trap_ne
2b8c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2b8e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2b8f : 0908            >            ora #decmode        ;ignore decimal mode bit
2b91 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2b93 : dd3902          >            cmp fASL,x    ;test flags
                       >            trap_ne
2b96 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2b98 : ca                       dex
2b99 : 10de                     bpl tasl9
                        
2b9b : a205                     ldx #5
2b9d :                  tlsr8
                                set_absx zps,0
                       >            load_flag 0
2b9d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2b9f : 48              >            pha         ;use stack to load status
2ba0 : b513            >            lda zps,x    ;load to indexed memory
2ba2 : 9d0302          >            sta abst,x
2ba5 : 28              >            plp
                        
2ba6 : 5e0302                   lsr abst,x
                                tst_absx rLSR,fLSR,0
2ba9 : 08              >            php         ;save flags
2baa : bd0302          >            lda abst,x
2bad : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
2bb0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2bb2 : 68              >            pla         ;load status
                       >            eor_flag 0
2bb3 : 0908            >            ora #decmode        ;ignore decimal mode bit
2bb5 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2bb7 : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
2bba : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2bbc : ca                       dex
2bbd : 10de                     bpl tlsr8
2bbf : a205                     ldx #5
2bc1 :                  tlsr9
                                set_absx zps,$ff
                       >            load_flag $ff
2bc1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2bc3 : 48              >            pha         ;use stack to load status
2bc4 : b513            >            lda zps,x    ;load to indexed memory
2bc6 : 9d0302          >            sta abst,x
2bc9 : 28              >            plp
                        
2bca : 5e0302                   lsr abst,x
                                tst_absx rLSR,fLSR,$ff-fnzc
2bcd : 08              >            php         ;save flags
2bce : bd0302          >            lda abst,x
2bd1 : dd2d02          >            cmp rLSR,x    ;test result
                       >            trap_ne
2bd4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2bd6 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2bd7 : 0908            >            ora #decmode        ;ignore decimal mode bit
2bd9 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2bdb : dd4502          >            cmp fLSR,x    ;test flags
                       >            trap_ne
2bde : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2be0 : ca                       dex
2be1 : 10de                     bpl tlsr9
                        
2be3 : a205                     ldx #5
2be5 :                  trol8
                                set_absx zps,0
                       >            load_flag 0
2be5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2be7 : 48              >            pha         ;use stack to load status
2be8 : b513            >            lda zps,x    ;load to indexed memory
2bea : 9d0302          >            sta abst,x
2bed : 28              >            plp
                        
2bee : 3e0302                   rol abst,x
                                tst_absx rROL,fROL,0
2bf1 : 08              >            php         ;save flags
2bf2 : bd0302          >            lda abst,x
2bf5 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
2bf8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2bfa : 68              >            pla         ;load status
                       >            eor_flag 0
2bfb : 0908            >            ora #decmode        ;ignore decimal mode bit
2bfd : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2bff : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
2c02 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2c04 : ca                       dex
2c05 : 10de                     bpl trol8
2c07 : a205                     ldx #5
2c09 :                  trol9
                                set_absx zps,$ff-fc
                       >            load_flag $ff-fc
2c09 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2c0b : 48              >            pha         ;use stack to load status
2c0c : b513            >            lda zps,x    ;load to indexed memory
2c0e : 9d0302          >            sta abst,x
2c11 : 28              >            plp
                        
2c12 : 3e0302                   rol abst,x
                                tst_absx rROL,fROL,$ff-fnzc
2c15 : 08              >            php         ;save flags
2c16 : bd0302          >            lda abst,x
2c19 : dd2102          >            cmp rROL,x    ;test result
                       >            trap_ne
2c1c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2c1e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2c1f : 0908            >            ora #decmode        ;ignore decimal mode bit
2c21 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2c23 : dd3902          >            cmp fROL,x    ;test flags
                       >            trap_ne
2c26 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2c28 : ca                       dex
2c29 : 10de                     bpl trol9
                        
2c2b : a205                     ldx #5
2c2d :                  trolc8
                                set_absx zps,fc
                       >            load_flag fc
2c2d : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
2c2f : 48              >            pha         ;use stack to load status
2c30 : b513            >            lda zps,x    ;load to indexed memory
2c32 : 9d0302          >            sta abst,x
2c35 : 28              >            plp
                        
2c36 : 3e0302                   rol abst,x
                                tst_absx rROLc,fROLc,0
2c39 : 08              >            php         ;save flags
2c3a : bd0302          >            lda abst,x
2c3d : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
2c40 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2c42 : 68              >            pla         ;load status
                       >            eor_flag 0
2c43 : 0908            >            ora #decmode        ;ignore decimal mode bit
2c45 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2c47 : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
2c4a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2c4c : ca                       dex
2c4d : 10de                     bpl trolc8
2c4f : a205                     ldx #5
2c51 :                  trolc9
                                set_absx zps,$ff
                       >            load_flag $ff
2c51 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2c53 : 48              >            pha         ;use stack to load status
2c54 : b513            >            lda zps,x    ;load to indexed memory
2c56 : 9d0302          >            sta abst,x
2c59 : 28              >            plp
                        
2c5a : 3e0302                   rol abst,x
                                tst_absx rROLc,fROLc,$ff-fnzc
2c5d : 08              >            php         ;save flags
2c5e : bd0302          >            lda abst,x
2c61 : dd2702          >            cmp rROLc,x    ;test result
                       >            trap_ne
2c64 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2c66 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2c67 : 0908            >            ora #decmode        ;ignore decimal mode bit
2c69 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2c6b : dd3f02          >            cmp fROLc,x    ;test flags
                       >            trap_ne
2c6e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2c70 : ca                       dex
2c71 : 10de                     bpl trolc9
                        
2c73 : a205                     ldx #5
2c75 :                  tror8
                                set_absx zps,0
                       >            load_flag 0
2c75 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2c77 : 48              >            pha         ;use stack to load status
2c78 : b513            >            lda zps,x    ;load to indexed memory
2c7a : 9d0302          >            sta abst,x
2c7d : 28              >            plp
                        
2c7e : 7e0302                   ror abst,x
                                tst_absx rROR,fROR,0
2c81 : 08              >            php         ;save flags
2c82 : bd0302          >            lda abst,x
2c85 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
2c88 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2c8a : 68              >            pla         ;load status
                       >            eor_flag 0
2c8b : 0908            >            ora #decmode        ;ignore decimal mode bit
2c8d : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2c8f : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
2c92 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2c94 : ca                       dex
2c95 : 10de                     bpl tror8
2c97 : a205                     ldx #5
2c99 :                  tror9
                                set_absx zps,$ff-fc
                       >            load_flag $ff-fc
2c99 : a9fe            >            lda #$ff-fc             ;allow test to change I-flag (no mask)
                       >
2c9b : 48              >            pha         ;use stack to load status
2c9c : b513            >            lda zps,x    ;load to indexed memory
2c9e : 9d0302          >            sta abst,x
2ca1 : 28              >            plp
                        
2ca2 : 7e0302                   ror abst,x
                                tst_absx rROR,fROR,$ff-fnzc
2ca5 : 08              >            php         ;save flags
2ca6 : bd0302          >            lda abst,x
2ca9 : dd2d02          >            cmp rROR,x    ;test result
                       >            trap_ne
2cac : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2cae : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2caf : 0908            >            ora #decmode        ;ignore decimal mode bit
2cb1 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2cb3 : dd4502          >            cmp fROR,x    ;test flags
                       >            trap_ne
2cb6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2cb8 : ca                       dex
2cb9 : 10de                     bpl tror9
                        
2cbb : a205                     ldx #5
2cbd :                  trorc8
                                set_absx zps,fc
                       >            load_flag fc
2cbd : a901            >            lda #fc             ;allow test to change I-flag (no mask)
                       >
2cbf : 48              >            pha         ;use stack to load status
2cc0 : b513            >            lda zps,x    ;load to indexed memory
2cc2 : 9d0302          >            sta abst,x
2cc5 : 28              >            plp
                        
2cc6 : 7e0302                   ror abst,x
                                tst_absx rRORc,fRORc,0
2cc9 : 08              >            php         ;save flags
2cca : bd0302          >            lda abst,x
2ccd : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
2cd0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2cd2 : 68              >            pla         ;load status
                       >            eor_flag 0
2cd3 : 0908            >            ora #decmode        ;ignore decimal mode bit
2cd5 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2cd7 : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
2cda : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2cdc : ca                       dex
2cdd : 10de                     bpl trorc8
2cdf : a205                     ldx #5
2ce1 :                  trorc9
                                set_absx zps,$ff
                       >            load_flag $ff
2ce1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2ce3 : 48              >            pha         ;use stack to load status
2ce4 : b513            >            lda zps,x    ;load to indexed memory
2ce6 : 9d0302          >            sta abst,x
2ce9 : 28              >            plp
                        
2cea : 7e0302                   ror abst,x
                                tst_absx rRORc,fRORc,$ff-fnzc
2ced : 08              >            php         ;save flags
2cee : bd0302          >            lda abst,x
2cf1 : dd3302          >            cmp rRORc,x    ;test result
                       >            trap_ne
2cf4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2cf6 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnzc
2cf7 : 0908            >            ora #decmode        ;ignore decimal mode bit
2cf9 : 497c            >            eor #$ff-fnzc|faod        ;invert expected flags + always on bits
                       >
2cfb : dd4b02          >            cmp fRORc,x    ;test flags
                       >            trap_ne
2cfe : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2d00 : ca                       dex
2d01 : 10de                     bpl trorc9
                                next_test
2d03 : ad0002          >            lda test_case   ;previous test
2d06 : c921            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2d08 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0022 =                 >test_num = test_num + 1
2d0a : a922            >            lda #test_num   ;*** next tests' number
2d0c : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing memory increment/decrement - INC DEC all addressing modes
                        ; zeropage
2d0f : a200                     ldx #0
2d11 : a97e                     lda #$7e
2d13 : 850c                     sta zpt
2d15 :                  tinc    
                                set_stat 0
                       >            load_flag 0
2d15 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2d17 : 48              >            pha         ;use stack to load status
2d18 : 28              >            plp
                        
2d19 : e60c                     inc zpt
                                tst_z rINC,fINC,0
2d1b : 08              >            php         ;save flags
2d1c : a50c            >            lda zpt
2d1e : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
2d21 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2d23 : 68              >            pla         ;load status
                       >            eor_flag 0
2d24 : 0908            >            ora #decmode        ;ignore decimal mode bit
2d26 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2d28 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
2d2b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2d2d : e8                       inx
2d2e : e002                     cpx #2
2d30 : d004                     bne tinc1
2d32 : a9fe                     lda #$fe
2d34 : 850c                     sta zpt
2d36 : e005             tinc1   cpx #5
2d38 : d0db                     bne tinc
2d3a : ca                       dex
2d3b : e60c                     inc zpt
2d3d :                  tdec    
                                set_stat 0
                       >            load_flag 0
2d3d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2d3f : 48              >            pha         ;use stack to load status
2d40 : 28              >            plp
                        
2d41 : c60c                     dec zpt
                                tst_z rINC,fINC,0
2d43 : 08              >            php         ;save flags
2d44 : a50c            >            lda zpt
2d46 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
2d49 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2d4b : 68              >            pla         ;load status
                       >            eor_flag 0
2d4c : 0908            >            ora #decmode        ;ignore decimal mode bit
2d4e : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2d50 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
2d53 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2d55 : ca                       dex
2d56 : 300a                     bmi tdec1
2d58 : e001                     cpx #1
2d5a : d0e1                     bne tdec
2d5c : a981                     lda #$81
2d5e : 850c                     sta zpt
2d60 : d0db                     bne tdec
2d62 :                  tdec1
2d62 : a200                     ldx #0
2d64 : a97e                     lda #$7e
2d66 : 850c                     sta zpt
2d68 :                  tinc10    
                                set_stat $ff
                       >            load_flag $ff
2d68 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2d6a : 48              >            pha         ;use stack to load status
2d6b : 28              >            plp
                        
2d6c : e60c                     inc zpt
                                tst_z rINC,fINC,$ff-fnz
2d6e : 08              >            php         ;save flags
2d6f : a50c            >            lda zpt
2d71 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
2d74 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2d76 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
2d77 : 0908            >            ora #decmode        ;ignore decimal mode bit
2d79 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
2d7b : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
2d7e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2d80 : e8                       inx
2d81 : e002                     cpx #2
2d83 : d004                     bne tinc11
2d85 : a9fe                     lda #$fe
2d87 : 850c                     sta zpt
2d89 : e005             tinc11  cpx #5
2d8b : d0db                     bne tinc10
2d8d : ca                       dex
2d8e : e60c                     inc zpt
2d90 :                  tdec10    
                                set_stat $ff
                       >            load_flag $ff
2d90 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2d92 : 48              >            pha         ;use stack to load status
2d93 : 28              >            plp
                        
2d94 : c60c                     dec zpt
                                tst_z rINC,fINC,$ff-fnz
2d96 : 08              >            php         ;save flags
2d97 : a50c            >            lda zpt
2d99 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
2d9c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2d9e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
2d9f : 0908            >            ora #decmode        ;ignore decimal mode bit
2da1 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
2da3 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
2da6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2da8 : ca                       dex
2da9 : 300a                     bmi tdec11
2dab : e001                     cpx #1
2dad : d0e1                     bne tdec10
2daf : a981                     lda #$81
2db1 : 850c                     sta zpt
2db3 : d0db                     bne tdec10
2db5 :                  tdec11
                                next_test
2db5 : ad0002          >            lda test_case   ;previous test
2db8 : c922            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2dba : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0023 =                 >test_num = test_num + 1
2dbc : a923            >            lda #test_num   ;*** next tests' number
2dbe : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; absolute memory
2dc1 : a200                     ldx #0
2dc3 : a97e                     lda #$7e
2dc5 : 8d0302                   sta abst
2dc8 :                  tinc2    
                                set_stat 0
                       >            load_flag 0
2dc8 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2dca : 48              >            pha         ;use stack to load status
2dcb : 28              >            plp
                        
2dcc : ee0302                   inc abst
                                tst_abs rINC,fINC,0
2dcf : 08              >            php         ;save flags
2dd0 : ad0302          >            lda abst
2dd3 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
2dd6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2dd8 : 68              >            pla         ;load status
                       >            eor_flag 0
2dd9 : 0908            >            ora #decmode        ;ignore decimal mode bit
2ddb : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2ddd : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
2de0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2de2 : e8                       inx
2de3 : e002                     cpx #2
2de5 : d005                     bne tinc3
2de7 : a9fe                     lda #$fe
2de9 : 8d0302                   sta abst
2dec : e005             tinc3   cpx #5
2dee : d0d8                     bne tinc2
2df0 : ca                       dex
2df1 : ee0302                   inc abst
2df4 :                  tdec2    
                                set_stat 0
                       >            load_flag 0
2df4 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2df6 : 48              >            pha         ;use stack to load status
2df7 : 28              >            plp
                        
2df8 : ce0302                   dec abst
                                tst_abs rINC,fINC,0
2dfb : 08              >            php         ;save flags
2dfc : ad0302          >            lda abst
2dff : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
2e02 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2e04 : 68              >            pla         ;load status
                       >            eor_flag 0
2e05 : 0908            >            ora #decmode        ;ignore decimal mode bit
2e07 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2e09 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
2e0c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2e0e : ca                       dex
2e0f : 300b                     bmi tdec3
2e11 : e001                     cpx #1
2e13 : d0df                     bne tdec2
2e15 : a981                     lda #$81
2e17 : 8d0302                   sta abst
2e1a : d0d8                     bne tdec2
2e1c :                  tdec3
2e1c : a200                     ldx #0
2e1e : a97e                     lda #$7e
2e20 : 8d0302                   sta abst
2e23 :                  tinc12    
                                set_stat $ff
                       >            load_flag $ff
2e23 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2e25 : 48              >            pha         ;use stack to load status
2e26 : 28              >            plp
                        
2e27 : ee0302                   inc abst
                                tst_abs rINC,fINC,$ff-fnz
2e2a : 08              >            php         ;save flags
2e2b : ad0302          >            lda abst
2e2e : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
2e31 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2e33 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
2e34 : 0908            >            ora #decmode        ;ignore decimal mode bit
2e36 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
2e38 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
2e3b : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2e3d : e8                       inx
2e3e : e002                     cpx #2
2e40 : d005                     bne tinc13
2e42 : a9fe                     lda #$fe
2e44 : 8d0302                   sta abst
2e47 : e005             tinc13   cpx #5
2e49 : d0d8                     bne tinc12
2e4b : ca                       dex
2e4c : ee0302                   inc abst
2e4f :                  tdec12    
                                set_stat $ff
                       >            load_flag $ff
2e4f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2e51 : 48              >            pha         ;use stack to load status
2e52 : 28              >            plp
                        
2e53 : ce0302                   dec abst
                                tst_abs rINC,fINC,$ff-fnz
2e56 : 08              >            php         ;save flags
2e57 : ad0302          >            lda abst
2e5a : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
2e5d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2e5f : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
2e60 : 0908            >            ora #decmode        ;ignore decimal mode bit
2e62 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
2e64 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
2e67 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2e69 : ca                       dex
2e6a : 300b                     bmi tdec13
2e6c : e001                     cpx #1
2e6e : d0df                     bne tdec12
2e70 : a981                     lda #$81
2e72 : 8d0302                   sta abst
2e75 : d0d8                     bne tdec12
2e77 :                  tdec13
                                next_test
2e77 : ad0002          >            lda test_case   ;previous test
2e7a : c923            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2e7c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0024 =                 >test_num = test_num + 1
2e7e : a924            >            lda #test_num   ;*** next tests' number
2e80 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; zeropage indexed
2e83 : a200                     ldx #0
2e85 : a97e                     lda #$7e
2e87 : 950c             tinc4   sta zpt,x
                                set_stat 0
                       >            load_flag 0
2e89 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2e8b : 48              >            pha         ;use stack to load status
2e8c : 28              >            plp
                        
2e8d : f60c                     inc zpt,x
                                tst_zx rINC,fINC,0
2e8f : 08              >            php         ;save flags
2e90 : b50c            >            lda zpt,x
2e92 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
2e95 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2e97 : 68              >            pla         ;load status
                       >            eor_flag 0
2e98 : 0908            >            ora #decmode        ;ignore decimal mode bit
2e9a : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2e9c : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
2e9f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2ea1 : b50c                     lda zpt,x
2ea3 : e8                       inx
2ea4 : e002                     cpx #2
2ea6 : d002                     bne tinc5
2ea8 : a9fe                     lda #$fe
2eaa : e005             tinc5   cpx #5
2eac : d0d9                     bne tinc4
2eae : ca                       dex
2eaf : a902                     lda #2
2eb1 : 950c             tdec4   sta zpt,x 
                                set_stat 0
                       >            load_flag 0
2eb3 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2eb5 : 48              >            pha         ;use stack to load status
2eb6 : 28              >            plp
                        
2eb7 : d60c                     dec zpt,x
                                tst_zx rINC,fINC,0
2eb9 : 08              >            php         ;save flags
2eba : b50c            >            lda zpt,x
2ebc : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
2ebf : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2ec1 : 68              >            pla         ;load status
                       >            eor_flag 0
2ec2 : 0908            >            ora #decmode        ;ignore decimal mode bit
2ec4 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2ec6 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
2ec9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2ecb : b50c                     lda zpt,x
2ecd : ca                       dex
2ece : 3008                     bmi tdec5
2ed0 : e001                     cpx #1
2ed2 : d0dd                     bne tdec4
2ed4 : a981                     lda #$81
2ed6 : d0d9                     bne tdec4
2ed8 :                  tdec5
2ed8 : a200                     ldx #0
2eda : a97e                     lda #$7e
2edc : 950c             tinc14  sta zpt,x
                                set_stat $ff
                       >            load_flag $ff
2ede : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2ee0 : 48              >            pha         ;use stack to load status
2ee1 : 28              >            plp
                        
2ee2 : f60c                     inc zpt,x
                                tst_zx rINC,fINC,$ff-fnz
2ee4 : 08              >            php         ;save flags
2ee5 : b50c            >            lda zpt,x
2ee7 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
2eea : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2eec : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
2eed : 0908            >            ora #decmode        ;ignore decimal mode bit
2eef : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
2ef1 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
2ef4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2ef6 : b50c                     lda zpt,x
2ef8 : e8                       inx
2ef9 : e002                     cpx #2
2efb : d002                     bne tinc15
2efd : a9fe                     lda #$fe
2eff : e005             tinc15  cpx #5
2f01 : d0d9                     bne tinc14
2f03 : ca                       dex
2f04 : a902                     lda #2
2f06 : 950c             tdec14  sta zpt,x 
                                set_stat $ff
                       >            load_flag $ff
2f08 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2f0a : 48              >            pha         ;use stack to load status
2f0b : 28              >            plp
                        
2f0c : d60c                     dec zpt,x
                                tst_zx rINC,fINC,$ff-fnz
2f0e : 08              >            php         ;save flags
2f0f : b50c            >            lda zpt,x
2f11 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
2f14 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2f16 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
2f17 : 0908            >            ora #decmode        ;ignore decimal mode bit
2f19 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
2f1b : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
2f1e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2f20 : b50c                     lda zpt,x
2f22 : ca                       dex
2f23 : 3008                     bmi tdec15
2f25 : e001                     cpx #1
2f27 : d0dd                     bne tdec14
2f29 : a981                     lda #$81
2f2b : d0d9                     bne tdec14
2f2d :                  tdec15
                                next_test
2f2d : ad0002          >            lda test_case   ;previous test
2f30 : c924            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2f32 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0025 =                 >test_num = test_num + 1
2f34 : a925            >            lda #test_num   ;*** next tests' number
2f36 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; memory indexed
2f39 : a200                     ldx #0
2f3b : a97e                     lda #$7e
2f3d : 9d0302           tinc6   sta abst,x
                                set_stat 0
                       >            load_flag 0
2f40 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2f42 : 48              >            pha         ;use stack to load status
2f43 : 28              >            plp
                        
2f44 : fe0302                   inc abst,x
                                tst_absx rINC,fINC,0
2f47 : 08              >            php         ;save flags
2f48 : bd0302          >            lda abst,x
2f4b : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
2f4e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2f50 : 68              >            pla         ;load status
                       >            eor_flag 0
2f51 : 0908            >            ora #decmode        ;ignore decimal mode bit
2f53 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2f55 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
2f58 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2f5a : bd0302                   lda abst,x
2f5d : e8                       inx
2f5e : e002                     cpx #2
2f60 : d002                     bne tinc7
2f62 : a9fe                     lda #$fe
2f64 : e005             tinc7   cpx #5
2f66 : d0d5                     bne tinc6
2f68 : ca                       dex
2f69 : a902                     lda #2
2f6b : 9d0302           tdec6   sta abst,x 
                                set_stat 0
                       >            load_flag 0
2f6e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
2f70 : 48              >            pha         ;use stack to load status
2f71 : 28              >            plp
                        
2f72 : de0302                   dec abst,x
                                tst_absx rINC,fINC,0
2f75 : 08              >            php         ;save flags
2f76 : bd0302          >            lda abst,x
2f79 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
2f7c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2f7e : 68              >            pla         ;load status
                       >            eor_flag 0
2f7f : 0908            >            ora #decmode        ;ignore decimal mode bit
2f81 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
2f83 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
2f86 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2f88 : bd0302                   lda abst,x
2f8b : ca                       dex
2f8c : 3008                     bmi tdec7
2f8e : e001                     cpx #1
2f90 : d0d9                     bne tdec6
2f92 : a981                     lda #$81
2f94 : d0d5                     bne tdec6
2f96 :                  tdec7
2f96 : a200                     ldx #0
2f98 : a97e                     lda #$7e
2f9a : 9d0302           tinc16  sta abst,x
                                set_stat $ff
                       >            load_flag $ff
2f9d : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2f9f : 48              >            pha         ;use stack to load status
2fa0 : 28              >            plp
                        
2fa1 : fe0302                   inc abst,x
                                tst_absx rINC,fINC,$ff-fnz
2fa4 : 08              >            php         ;save flags
2fa5 : bd0302          >            lda abst,x
2fa8 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
2fab : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2fad : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
2fae : 0908            >            ora #decmode        ;ignore decimal mode bit
2fb0 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
2fb2 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
2fb5 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2fb7 : bd0302                   lda abst,x
2fba : e8                       inx
2fbb : e002                     cpx #2
2fbd : d002                     bne tinc17
2fbf : a9fe                     lda #$fe
2fc1 : e005             tinc17  cpx #5
2fc3 : d0d5                     bne tinc16
2fc5 : ca                       dex
2fc6 : a902                     lda #2
2fc8 : 9d0302           tdec16  sta abst,x 
                                set_stat $ff
                       >            load_flag $ff
2fcb : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
2fcd : 48              >            pha         ;use stack to load status
2fce : 28              >            plp
                        
2fcf : de0302                   dec abst,x
                                tst_absx rINC,fINC,$ff-fnz
2fd2 : 08              >            php         ;save flags
2fd3 : bd0302          >            lda abst,x
2fd6 : dd5102          >            cmp rINC,x    ;test result
                       >            trap_ne
2fd9 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
2fdb : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
2fdc : 0908            >            ora #decmode        ;ignore decimal mode bit
2fde : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
2fe0 : dd5602          >            cmp fINC,x    ;test flags
                       >            trap_ne
2fe3 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
2fe5 : bd0302                   lda abst,x
2fe8 : ca                       dex
2fe9 : 3008                     bmi tdec17
2feb : e001                     cpx #1
2fed : d0d9                     bne tdec16
2fef : a981                     lda #$81
2ff1 : d0d5                     bne tdec16
2ff3 :                  tdec17
                                next_test
2ff3 : ad0002          >            lda test_case   ;previous test
2ff6 : c925            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
2ff8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0026 =                 >test_num = test_num + 1
2ffa : a926            >            lda #test_num   ;*** next tests' number
2ffc : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; testing logical instructions - AND EOR ORA all addressing modes
                        ; AND
2fff : a203                     ldx #3          ;immediate
3001 : b51e             tand    lda zpAN,x
3003 : 8d0a02                   sta ex_andi+1   ;set AND # operand
                                set_ax  absANa,0
                       >            load_flag 0
3006 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3008 : 48              >            pha         ;use stack to load status
3009 : bd6b02          >            lda absANa,x    ;precharge accu
300c : 28              >            plp
                        
300d : 200902                   jsr ex_andi     ;execute AND # in RAM
                                tst_ax  absrlo,absflo,0
3010 : 08              >            php         ;save flags
3011 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3014 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3016 : 68              >            pla         ;load status
                       >            eor_flag 0
3017 : 0908            >            ora #decmode        ;ignore decimal mode bit
3019 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
301b : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
301e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3020 : ca                       dex
3021 : 10de                     bpl tand
3023 : a203                     ldx #3
3025 : b51e             tand1   lda zpAN,x
3027 : 8d0a02                   sta ex_andi+1   ;set AND # operand
                                set_ax  absANa,$ff
                       >            load_flag $ff
302a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
302c : 48              >            pha         ;use stack to load status
302d : bd6b02          >            lda absANa,x    ;precharge accu
3030 : 28              >            plp
                        
3031 : 200902                   jsr ex_andi     ;execute AND # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
3034 : 08              >            php         ;save flags
3035 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3038 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
303a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
303b : 0908            >            ora #decmode        ;ignore decimal mode bit
303d : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
303f : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3042 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3044 : ca                       dex
3045 : 10de                     bpl tand1
                            
3047 : a203                     ldx #3      ;zp
3049 : b51e             tand2   lda zpAN,x
304b : 850c                     sta zpt
                                set_ax  absANa,0
                       >            load_flag 0
304d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
304f : 48              >            pha         ;use stack to load status
3050 : bd6b02          >            lda absANa,x    ;precharge accu
3053 : 28              >            plp
                        
3054 : 250c                     and zpt
                                tst_ax  absrlo,absflo,0
3056 : 08              >            php         ;save flags
3057 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
305a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
305c : 68              >            pla         ;load status
                       >            eor_flag 0
305d : 0908            >            ora #decmode        ;ignore decimal mode bit
305f : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
3061 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3064 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3066 : ca                       dex
3067 : 10e0                     bpl tand2
3069 : a203                     ldx #3
306b : b51e             tand3   lda zpAN,x
306d : 850c                     sta zpt
                                set_ax  absANa,$ff
                       >            load_flag $ff
306f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3071 : 48              >            pha         ;use stack to load status
3072 : bd6b02          >            lda absANa,x    ;precharge accu
3075 : 28              >            plp
                        
3076 : 250c                     and zpt
                                tst_ax  absrlo,absflo,$ff-fnz
3078 : 08              >            php         ;save flags
3079 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
307c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
307e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
307f : 0908            >            ora #decmode        ;ignore decimal mode bit
3081 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
3083 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3086 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3088 : ca                       dex
3089 : 10e0                     bpl tand3
                        
308b : a203                     ldx #3      ;abs
308d : b51e             tand4   lda zpAN,x
308f : 8d0302                   sta abst
                                set_ax  absANa,0
                       >            load_flag 0
3092 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3094 : 48              >            pha         ;use stack to load status
3095 : bd6b02          >            lda absANa,x    ;precharge accu
3098 : 28              >            plp
                        
3099 : 2d0302                   and abst
                                tst_ax  absrlo,absflo,0
309c : 08              >            php         ;save flags
309d : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
30a0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
30a2 : 68              >            pla         ;load status
                       >            eor_flag 0
30a3 : 0908            >            ora #decmode        ;ignore decimal mode bit
30a5 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
30a7 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
30aa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
30ac : ca                       dex
30ad : 10de                     bpl tand4
30af : a203                     ldx #3
30b1 : b51e             tand5   lda zpAN,x
30b3 : 8d0302                   sta abst
                                set_ax  absANa,$ff
                       >            load_flag $ff
30b6 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
30b8 : 48              >            pha         ;use stack to load status
30b9 : bd6b02          >            lda absANa,x    ;precharge accu
30bc : 28              >            plp
                        
30bd : 2d0302                   and abst
                                tst_ax  absrlo,absflo,$ff-fnz
30c0 : 08              >            php         ;save flags
30c1 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
30c4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
30c6 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
30c7 : 0908            >            ora #decmode        ;ignore decimal mode bit
30c9 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
30cb : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
30ce : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
30d0 : ca                       dex
30d1 : 1002                     bpl tand6
                        
30d3 : a203                     ldx #3      ;zp,x
30d5 :                  tand6
                                set_ax  absANa,0
                       >            load_flag 0
30d5 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
30d7 : 48              >            pha         ;use stack to load status
30d8 : bd6b02          >            lda absANa,x    ;precharge accu
30db : 28              >            plp
                        
30dc : 351e                     and zpAN,x
                                tst_ax  absrlo,absflo,0
30de : 08              >            php         ;save flags
30df : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
30e2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
30e4 : 68              >            pla         ;load status
                       >            eor_flag 0
30e5 : 0908            >            ora #decmode        ;ignore decimal mode bit
30e7 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
30e9 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
30ec : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
30ee : ca                       dex
30ef : 10e4                     bpl tand6
30f1 : a203                     ldx #3
30f3 :                  tand7
                                set_ax  absANa,$ff
                       >            load_flag $ff
30f3 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
30f5 : 48              >            pha         ;use stack to load status
30f6 : bd6b02          >            lda absANa,x    ;precharge accu
30f9 : 28              >            plp
                        
30fa : 351e                     and zpAN,x
                                tst_ax  absrlo,absflo,$ff-fnz
30fc : 08              >            php         ;save flags
30fd : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3100 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3102 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3103 : 0908            >            ora #decmode        ;ignore decimal mode bit
3105 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
3107 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
310a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
310c : ca                       dex
310d : 10e4                     bpl tand7
                        
310f : a203                     ldx #3      ;abs,x
3111 :                  tand8
                                set_ax  absANa,0
                       >            load_flag 0
3111 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3113 : 48              >            pha         ;use stack to load status
3114 : bd6b02          >            lda absANa,x    ;precharge accu
3117 : 28              >            plp
                        
3118 : 3d5f02                   and absAN,x
                                tst_ax  absrlo,absflo,0
311b : 08              >            php         ;save flags
311c : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
311f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3121 : 68              >            pla         ;load status
                       >            eor_flag 0
3122 : 0908            >            ora #decmode        ;ignore decimal mode bit
3124 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
3126 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3129 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
312b : ca                       dex
312c : 10e3                     bpl tand8
312e : a203                     ldx #3
3130 :                  tand9
                                set_ax  absANa,$ff
                       >            load_flag $ff
3130 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3132 : 48              >            pha         ;use stack to load status
3133 : bd6b02          >            lda absANa,x    ;precharge accu
3136 : 28              >            plp
                        
3137 : 3d5f02                   and absAN,x
                                tst_ax  absrlo,absflo,$ff-fnz
313a : 08              >            php         ;save flags
313b : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
313e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3140 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3141 : 0908            >            ora #decmode        ;ignore decimal mode bit
3143 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
3145 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3148 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
314a : ca                       dex
314b : 10e3                     bpl tand9
                        
314d : a003                     ldy #3      ;abs,y
314f :                  tand10
                                set_ay  absANa,0
                       >            load_flag 0
314f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3151 : 48              >            pha         ;use stack to load status
3152 : b96b02          >            lda absANa,y    ;precharge accu
3155 : 28              >            plp
                        
3156 : 395f02                   and absAN,y
                                tst_ay  absrlo,absflo,0
3159 : 08              >            php         ;save flags
315a : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
315d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
315f : 68              >            pla         ;load status
                       >            eor_flag 0
3160 : 0908            >            ora #decmode        ;ignore decimal mode bit
3162 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
3164 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
3167 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3169 : 88                       dey
316a : 10e3                     bpl tand10
316c : a003                     ldy #3
316e :                  tand11
                                set_ay  absANa,$ff
                       >            load_flag $ff
316e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3170 : 48              >            pha         ;use stack to load status
3171 : b96b02          >            lda absANa,y    ;precharge accu
3174 : 28              >            plp
                        
3175 : 395f02                   and absAN,y
                                tst_ay  absrlo,absflo,$ff-fnz
3178 : 08              >            php         ;save flags
3179 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
317c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
317e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
317f : 0908            >            ora #decmode        ;ignore decimal mode bit
3181 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
3183 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
3186 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3188 : 88                       dey
3189 : 10e3                     bpl tand11
                        
318b : a206                     ldx #6      ;(zp,x)
318d : a003                     ldy #3
318f :                  tand12
                                set_ay  absANa,0
                       >            load_flag 0
318f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3191 : 48              >            pha         ;use stack to load status
3192 : b96b02          >            lda absANa,y    ;precharge accu
3195 : 28              >            plp
                        
3196 : 213c                     and (indAN,x)
                                tst_ay  absrlo,absflo,0
3198 : 08              >            php         ;save flags
3199 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
319c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
319e : 68              >            pla         ;load status
                       >            eor_flag 0
319f : 0908            >            ora #decmode        ;ignore decimal mode bit
31a1 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
31a3 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
31a6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
31a8 : ca                       dex
31a9 : ca                       dex
31aa : 88                       dey
31ab : 10e2                     bpl tand12
31ad : a206                     ldx #6
31af : a003                     ldy #3
31b1 :                  tand13
                                set_ay  absANa,$ff
                       >            load_flag $ff
31b1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
31b3 : 48              >            pha         ;use stack to load status
31b4 : b96b02          >            lda absANa,y    ;precharge accu
31b7 : 28              >            plp
                        
31b8 : 213c                     and (indAN,x)
                                tst_ay  absrlo,absflo,$ff-fnz
31ba : 08              >            php         ;save flags
31bb : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
31be : d0fe            >        bne *           ;failed not equal (non zero)
                       >
31c0 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
31c1 : 0908            >            ora #decmode        ;ignore decimal mode bit
31c3 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
31c5 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
31c8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
31ca : ca                       dex
31cb : ca                       dex
31cc : 88                       dey
31cd : 10e2                     bpl tand13
                        
31cf : a003                     ldy #3      ;(zp),y
31d1 :                  tand14
                                set_ay  absANa,0
                       >            load_flag 0
31d1 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
31d3 : 48              >            pha         ;use stack to load status
31d4 : b96b02          >            lda absANa,y    ;precharge accu
31d7 : 28              >            plp
                        
31d8 : 313c                     and (indAN),y
                                tst_ay  absrlo,absflo,0
31da : 08              >            php         ;save flags
31db : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
31de : d0fe            >        bne *           ;failed not equal (non zero)
                       >
31e0 : 68              >            pla         ;load status
                       >            eor_flag 0
31e1 : 0908            >            ora #decmode        ;ignore decimal mode bit
31e3 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
31e5 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
31e8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
31ea : 88                       dey
31eb : 10e4                     bpl tand14
31ed : a003                     ldy #3
31ef :                  tand15
                                set_ay  absANa,$ff
                       >            load_flag $ff
31ef : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
31f1 : 48              >            pha         ;use stack to load status
31f2 : b96b02          >            lda absANa,y    ;precharge accu
31f5 : 28              >            plp
                        
31f6 : 313c                     and (indAN),y
                                tst_ay  absrlo,absflo,$ff-fnz
31f8 : 08              >            php         ;save flags
31f9 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
31fc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
31fe : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
31ff : 0908            >            ora #decmode        ;ignore decimal mode bit
3201 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
3203 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
3206 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3208 : 88                       dey
3209 : 10e4                     bpl tand15
                                next_test
320b : ad0002          >            lda test_case   ;previous test
320e : c926            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
3210 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0027 =                 >test_num = test_num + 1
3212 : a927            >            lda #test_num   ;*** next tests' number
3214 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; EOR
3217 : a203                     ldx #3          ;immediate - self modifying code
3219 : b522             teor    lda zpEO,x
321b : 8d0d02                   sta ex_eori+1   ;set EOR # operand
                                set_ax  absEOa,0
                       >            load_flag 0
321e : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3220 : 48              >            pha         ;use stack to load status
3221 : bd6f02          >            lda absEOa,x    ;precharge accu
3224 : 28              >            plp
                        
3225 : 200c02                   jsr ex_eori     ;execute EOR # in RAM
                                tst_ax  absrlo,absflo,0
3228 : 08              >            php         ;save flags
3229 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
322c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
322e : 68              >            pla         ;load status
                       >            eor_flag 0
322f : 0908            >            ora #decmode        ;ignore decimal mode bit
3231 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
3233 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3236 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3238 : ca                       dex
3239 : 10de                     bpl teor
323b : a203                     ldx #3
323d : b522             teor1   lda zpEO,x
323f : 8d0d02                   sta ex_eori+1   ;set EOR # operand
                                set_ax  absEOa,$ff
                       >            load_flag $ff
3242 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3244 : 48              >            pha         ;use stack to load status
3245 : bd6f02          >            lda absEOa,x    ;precharge accu
3248 : 28              >            plp
                        
3249 : 200c02                   jsr ex_eori     ;execute EOR # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
324c : 08              >            php         ;save flags
324d : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3250 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3252 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3253 : 0908            >            ora #decmode        ;ignore decimal mode bit
3255 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
3257 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
325a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
325c : ca                       dex
325d : 10de                     bpl teor1
                            
325f : a203                     ldx #3      ;zp
3261 : b522             teor2    lda zpEO,x
3263 : 850c                     sta zpt
                                set_ax  absEOa,0
                       >            load_flag 0
3265 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3267 : 48              >            pha         ;use stack to load status
3268 : bd6f02          >            lda absEOa,x    ;precharge accu
326b : 28              >            plp
                        
326c : 450c                     eor zpt
                                tst_ax  absrlo,absflo,0
326e : 08              >            php         ;save flags
326f : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3272 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3274 : 68              >            pla         ;load status
                       >            eor_flag 0
3275 : 0908            >            ora #decmode        ;ignore decimal mode bit
3277 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
3279 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
327c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
327e : ca                       dex
327f : 10e0                     bpl teor2
3281 : a203                     ldx #3
3283 : b522             teor3   lda zpEO,x
3285 : 850c                     sta zpt
                                set_ax  absEOa,$ff
                       >            load_flag $ff
3287 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3289 : 48              >            pha         ;use stack to load status
328a : bd6f02          >            lda absEOa,x    ;precharge accu
328d : 28              >            plp
                        
328e : 450c                     eor zpt
                                tst_ax  absrlo,absflo,$ff-fnz
3290 : 08              >            php         ;save flags
3291 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3294 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3296 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3297 : 0908            >            ora #decmode        ;ignore decimal mode bit
3299 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
329b : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
329e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
32a0 : ca                       dex
32a1 : 10e0                     bpl teor3
                        
32a3 : a203                     ldx #3      ;abs
32a5 : b522             teor4   lda zpEO,x
32a7 : 8d0302                   sta abst
                                set_ax  absEOa,0
                       >            load_flag 0
32aa : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
32ac : 48              >            pha         ;use stack to load status
32ad : bd6f02          >            lda absEOa,x    ;precharge accu
32b0 : 28              >            plp
                        
32b1 : 4d0302                   eor abst
                                tst_ax  absrlo,absflo,0
32b4 : 08              >            php         ;save flags
32b5 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
32b8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
32ba : 68              >            pla         ;load status
                       >            eor_flag 0
32bb : 0908            >            ora #decmode        ;ignore decimal mode bit
32bd : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
32bf : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
32c2 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
32c4 : ca                       dex
32c5 : 10de                     bpl teor4
32c7 : a203                     ldx #3
32c9 : b522             teor5   lda zpEO,x
32cb : 8d0302                   sta abst
                                set_ax  absEOa,$ff
                       >            load_flag $ff
32ce : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
32d0 : 48              >            pha         ;use stack to load status
32d1 : bd6f02          >            lda absEOa,x    ;precharge accu
32d4 : 28              >            plp
                        
32d5 : 4d0302                   eor abst
                                tst_ax  absrlo,absflo,$ff-fnz
32d8 : 08              >            php         ;save flags
32d9 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
32dc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
32de : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
32df : 0908            >            ora #decmode        ;ignore decimal mode bit
32e1 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
32e3 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
32e6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
32e8 : ca                       dex
32e9 : 1002                     bpl teor6
                        
32eb : a203                     ldx #3      ;zp,x
32ed :                  teor6
                                set_ax  absEOa,0
                       >            load_flag 0
32ed : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
32ef : 48              >            pha         ;use stack to load status
32f0 : bd6f02          >            lda absEOa,x    ;precharge accu
32f3 : 28              >            plp
                        
32f4 : 5522                     eor zpEO,x
                                tst_ax  absrlo,absflo,0
32f6 : 08              >            php         ;save flags
32f7 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
32fa : d0fe            >        bne *           ;failed not equal (non zero)
                       >
32fc : 68              >            pla         ;load status
                       >            eor_flag 0
32fd : 0908            >            ora #decmode        ;ignore decimal mode bit
32ff : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
3301 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3304 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3306 : ca                       dex
3307 : 10e4                     bpl teor6
3309 : a203                     ldx #3
330b :                  teor7
                                set_ax  absEOa,$ff
                       >            load_flag $ff
330b : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
330d : 48              >            pha         ;use stack to load status
330e : bd6f02          >            lda absEOa,x    ;precharge accu
3311 : 28              >            plp
                        
3312 : 5522                     eor zpEO,x
                                tst_ax  absrlo,absflo,$ff-fnz
3314 : 08              >            php         ;save flags
3315 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3318 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
331a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
331b : 0908            >            ora #decmode        ;ignore decimal mode bit
331d : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
331f : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3322 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3324 : ca                       dex
3325 : 10e4                     bpl teor7
                        
3327 : a203                     ldx #3      ;abs,x
3329 :                  teor8
                                set_ax  absEOa,0
                       >            load_flag 0
3329 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
332b : 48              >            pha         ;use stack to load status
332c : bd6f02          >            lda absEOa,x    ;precharge accu
332f : 28              >            plp
                        
3330 : 5d6302                   eor absEO,x
                                tst_ax  absrlo,absflo,0
3333 : 08              >            php         ;save flags
3334 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3337 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3339 : 68              >            pla         ;load status
                       >            eor_flag 0
333a : 0908            >            ora #decmode        ;ignore decimal mode bit
333c : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
333e : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3341 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3343 : ca                       dex
3344 : 10e3                     bpl teor8
3346 : a203                     ldx #3
3348 :                  teor9
                                set_ax  absEOa,$ff
                       >            load_flag $ff
3348 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
334a : 48              >            pha         ;use stack to load status
334b : bd6f02          >            lda absEOa,x    ;precharge accu
334e : 28              >            plp
                        
334f : 5d6302                   eor absEO,x
                                tst_ax  absrlo,absflo,$ff-fnz
3352 : 08              >            php         ;save flags
3353 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3356 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3358 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3359 : 0908            >            ora #decmode        ;ignore decimal mode bit
335b : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
335d : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3360 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3362 : ca                       dex
3363 : 10e3                     bpl teor9
                        
3365 : a003                     ldy #3      ;abs,y
3367 :                  teor10
                                set_ay  absEOa,0
                       >            load_flag 0
3367 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3369 : 48              >            pha         ;use stack to load status
336a : b96f02          >            lda absEOa,y    ;precharge accu
336d : 28              >            plp
                        
336e : 596302                   eor absEO,y
                                tst_ay  absrlo,absflo,0
3371 : 08              >            php         ;save flags
3372 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3375 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3377 : 68              >            pla         ;load status
                       >            eor_flag 0
3378 : 0908            >            ora #decmode        ;ignore decimal mode bit
337a : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
337c : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
337f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3381 : 88                       dey
3382 : 10e3                     bpl teor10
3384 : a003                     ldy #3
3386 :                  teor11
                                set_ay  absEOa,$ff
                       >            load_flag $ff
3386 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3388 : 48              >            pha         ;use stack to load status
3389 : b96f02          >            lda absEOa,y    ;precharge accu
338c : 28              >            plp
                        
338d : 596302                   eor absEO,y
                                tst_ay  absrlo,absflo,$ff-fnz
3390 : 08              >            php         ;save flags
3391 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3394 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3396 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3397 : 0908            >            ora #decmode        ;ignore decimal mode bit
3399 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
339b : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
339e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
33a0 : 88                       dey
33a1 : 10e3                     bpl teor11
                        
33a3 : a206                     ldx #6      ;(zp,x)
33a5 : a003                     ldy #3
33a7 :                  teor12
                                set_ay  absEOa,0
                       >            load_flag 0
33a7 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
33a9 : 48              >            pha         ;use stack to load status
33aa : b96f02          >            lda absEOa,y    ;precharge accu
33ad : 28              >            plp
                        
33ae : 4144                     eor (indEO,x)
                                tst_ay  absrlo,absflo,0
33b0 : 08              >            php         ;save flags
33b1 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
33b4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
33b6 : 68              >            pla         ;load status
                       >            eor_flag 0
33b7 : 0908            >            ora #decmode        ;ignore decimal mode bit
33b9 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
33bb : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
33be : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
33c0 : ca                       dex
33c1 : ca                       dex
33c2 : 88                       dey
33c3 : 10e2                     bpl teor12
33c5 : a206                     ldx #6
33c7 : a003                     ldy #3
33c9 :                  teor13
                                set_ay  absEOa,$ff
                       >            load_flag $ff
33c9 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
33cb : 48              >            pha         ;use stack to load status
33cc : b96f02          >            lda absEOa,y    ;precharge accu
33cf : 28              >            plp
                        
33d0 : 4144                     eor (indEO,x)
                                tst_ay  absrlo,absflo,$ff-fnz
33d2 : 08              >            php         ;save flags
33d3 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
33d6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
33d8 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
33d9 : 0908            >            ora #decmode        ;ignore decimal mode bit
33db : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
33dd : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
33e0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
33e2 : ca                       dex
33e3 : ca                       dex
33e4 : 88                       dey
33e5 : 10e2                     bpl teor13
                        
33e7 : a003                     ldy #3      ;(zp),y
33e9 :                  teor14
                                set_ay  absEOa,0
                       >            load_flag 0
33e9 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
33eb : 48              >            pha         ;use stack to load status
33ec : b96f02          >            lda absEOa,y    ;precharge accu
33ef : 28              >            plp
                        
33f0 : 5144                     eor (indEO),y
                                tst_ay  absrlo,absflo,0
33f2 : 08              >            php         ;save flags
33f3 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
33f6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
33f8 : 68              >            pla         ;load status
                       >            eor_flag 0
33f9 : 0908            >            ora #decmode        ;ignore decimal mode bit
33fb : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
33fd : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
3400 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3402 : 88                       dey
3403 : 10e4                     bpl teor14
3405 : a003                     ldy #3
3407 :                  teor15
                                set_ay  absEOa,$ff
                       >            load_flag $ff
3407 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3409 : 48              >            pha         ;use stack to load status
340a : b96f02          >            lda absEOa,y    ;precharge accu
340d : 28              >            plp
                        
340e : 5144                     eor (indEO),y
                                tst_ay  absrlo,absflo,$ff-fnz
3410 : 08              >            php         ;save flags
3411 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
3414 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3416 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3417 : 0908            >            ora #decmode        ;ignore decimal mode bit
3419 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
341b : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
341e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3420 : 88                       dey
3421 : 10e4                     bpl teor15
                                next_test
3423 : ad0002          >            lda test_case   ;previous test
3426 : c927            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
3428 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0028 =                 >test_num = test_num + 1
342a : a928            >            lda #test_num   ;*** next tests' number
342c : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; OR
342f : a203                     ldx #3          ;immediate - self modifying code
3431 : b51a             tora    lda zpOR,x
3433 : 8d1002                   sta ex_orai+1   ;set ORA # operand
                                set_ax  absORa,0
                       >            load_flag 0
3436 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3438 : 48              >            pha         ;use stack to load status
3439 : bd6702          >            lda absORa,x    ;precharge accu
343c : 28              >            plp
                        
343d : 200f02                   jsr ex_orai     ;execute ORA # in RAM
                                tst_ax  absrlo,absflo,0
3440 : 08              >            php         ;save flags
3441 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3444 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3446 : 68              >            pla         ;load status
                       >            eor_flag 0
3447 : 0908            >            ora #decmode        ;ignore decimal mode bit
3449 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
344b : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
344e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3450 : ca                       dex
3451 : 10de                     bpl tora
3453 : a203                     ldx #3
3455 : b51a             tora1   lda zpOR,x
3457 : 8d1002                   sta ex_orai+1   ;set ORA # operand
                                set_ax  absORa,$ff
                       >            load_flag $ff
345a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
345c : 48              >            pha         ;use stack to load status
345d : bd6702          >            lda absORa,x    ;precharge accu
3460 : 28              >            plp
                        
3461 : 200f02                   jsr ex_orai     ;execute ORA # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
3464 : 08              >            php         ;save flags
3465 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3468 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
346a : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
346b : 0908            >            ora #decmode        ;ignore decimal mode bit
346d : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
346f : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3472 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3474 : ca                       dex
3475 : 10de                     bpl tora1
                            
3477 : a203                     ldx #3      ;zp
3479 : b51a             tora2   lda zpOR,x
347b : 850c                     sta zpt
                                set_ax  absORa,0
                       >            load_flag 0
347d : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
347f : 48              >            pha         ;use stack to load status
3480 : bd6702          >            lda absORa,x    ;precharge accu
3483 : 28              >            plp
                        
3484 : 050c                     ora zpt
                                tst_ax  absrlo,absflo,0
3486 : 08              >            php         ;save flags
3487 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
348a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
348c : 68              >            pla         ;load status
                       >            eor_flag 0
348d : 0908            >            ora #decmode        ;ignore decimal mode bit
348f : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
3491 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3494 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3496 : ca                       dex
3497 : 10e0                     bpl tora2
3499 : a203                     ldx #3
349b : b51a             tora3   lda zpOR,x
349d : 850c                     sta zpt
                                set_ax  absORa,$ff
                       >            load_flag $ff
349f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
34a1 : 48              >            pha         ;use stack to load status
34a2 : bd6702          >            lda absORa,x    ;precharge accu
34a5 : 28              >            plp
                        
34a6 : 050c                     ora zpt
                                tst_ax  absrlo,absflo,$ff-fnz
34a8 : 08              >            php         ;save flags
34a9 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
34ac : d0fe            >        bne *           ;failed not equal (non zero)
                       >
34ae : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
34af : 0908            >            ora #decmode        ;ignore decimal mode bit
34b1 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
34b3 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
34b6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
34b8 : ca                       dex
34b9 : 10e0                     bpl tora3
                        
34bb : a203                     ldx #3      ;abs
34bd : b51a             tora4   lda zpOR,x
34bf : 8d0302                   sta abst
                                set_ax  absORa,0
                       >            load_flag 0
34c2 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
34c4 : 48              >            pha         ;use stack to load status
34c5 : bd6702          >            lda absORa,x    ;precharge accu
34c8 : 28              >            plp
                        
34c9 : 0d0302                   ora abst
                                tst_ax  absrlo,absflo,0
34cc : 08              >            php         ;save flags
34cd : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
34d0 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
34d2 : 68              >            pla         ;load status
                       >            eor_flag 0
34d3 : 0908            >            ora #decmode        ;ignore decimal mode bit
34d5 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
34d7 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
34da : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
34dc : ca                       dex
34dd : 10de                     bpl tora4
34df : a203                     ldx #3
34e1 : b51a             tora5   lda zpOR,x
34e3 : 8d0302                   sta abst
                                set_ax  absORa,$ff
                       >            load_flag $ff
34e6 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
34e8 : 48              >            pha         ;use stack to load status
34e9 : bd6702          >            lda absORa,x    ;precharge accu
34ec : 28              >            plp
                        
34ed : 0d0302                   ora abst
                                tst_ax  absrlo,absflo,$ff-fnz
34f0 : 08              >            php         ;save flags
34f1 : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
34f4 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
34f6 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
34f7 : 0908            >            ora #decmode        ;ignore decimal mode bit
34f9 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
34fb : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
34fe : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3500 : ca                       dex
3501 : 1002                     bpl tora6
                        
3503 : a203                     ldx #3      ;zp,x
3505 :                  tora6
                                set_ax  absORa,0
                       >            load_flag 0
3505 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3507 : 48              >            pha         ;use stack to load status
3508 : bd6702          >            lda absORa,x    ;precharge accu
350b : 28              >            plp
                        
350c : 151a                     ora zpOR,x
                                tst_ax  absrlo,absflo,0
350e : 08              >            php         ;save flags
350f : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3512 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3514 : 68              >            pla         ;load status
                       >            eor_flag 0
3515 : 0908            >            ora #decmode        ;ignore decimal mode bit
3517 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
3519 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
351c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
351e : ca                       dex
351f : 10e4                     bpl tora6
3521 : a203                     ldx #3
3523 :                  tora7
                                set_ax  absORa,$ff
                       >            load_flag $ff
3523 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3525 : 48              >            pha         ;use stack to load status
3526 : bd6702          >            lda absORa,x    ;precharge accu
3529 : 28              >            plp
                        
352a : 151a                     ora zpOR,x
                                tst_ax  absrlo,absflo,$ff-fnz
352c : 08              >            php         ;save flags
352d : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
3530 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3532 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3533 : 0908            >            ora #decmode        ;ignore decimal mode bit
3535 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
3537 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
353a : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
353c : ca                       dex
353d : 10e4                     bpl tora7
                        
353f : a203                     ldx #3      ;abs,x
3541 :                  tora8
                                set_ax  absORa,0
                       >            load_flag 0
3541 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3543 : 48              >            pha         ;use stack to load status
3544 : bd6702          >            lda absORa,x    ;precharge accu
3547 : 28              >            plp
                        
3548 : 1d5b02                   ora absOR,x
                                tst_ax  absrlo,absflo,0
354b : 08              >            php         ;save flags
354c : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
354f : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3551 : 68              >            pla         ;load status
                       >            eor_flag 0
3552 : 0908            >            ora #decmode        ;ignore decimal mode bit
3554 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
3556 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3559 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
355b : ca                       dex
355c : 10e3                     bpl tora8
355e : a203                     ldx #3
3560 :                  tora9
                                set_ax  absORa,$ff
                       >            load_flag $ff
3560 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3562 : 48              >            pha         ;use stack to load status
3563 : bd6702          >            lda absORa,x    ;precharge accu
3566 : 28              >            plp
                        
3567 : 1d5b02                   ora absOR,x
                                tst_ax  absrlo,absflo,$ff-fnz
356a : 08              >            php         ;save flags
356b : dd7302          >            cmp absrlo,x    ;test result
                       >            trap_ne
356e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3570 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
3571 : 0908            >            ora #decmode        ;ignore decimal mode bit
3573 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
3575 : dd7702          >            cmp absflo,x    ;test flags
                       >            trap_ne     ;
3578 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
357a : ca                       dex
357b : 10e3                     bpl tora9
                        
357d : a003                     ldy #3      ;abs,y
357f :                  tora10
                                set_ay  absORa,0
                       >            load_flag 0
357f : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3581 : 48              >            pha         ;use stack to load status
3582 : b96702          >            lda absORa,y    ;precharge accu
3585 : 28              >            plp
                        
3586 : 195b02                   ora absOR,y
                                tst_ay  absrlo,absflo,0
3589 : 08              >            php         ;save flags
358a : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
358d : d0fe            >        bne *           ;failed not equal (non zero)
                       >
358f : 68              >            pla         ;load status
                       >            eor_flag 0
3590 : 0908            >            ora #decmode        ;ignore decimal mode bit
3592 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
3594 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
3597 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3599 : 88                       dey
359a : 10e3                     bpl tora10
359c : a003                     ldy #3
359e :                  tora11
                                set_ay  absORa,$ff
                       >            load_flag $ff
359e : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
35a0 : 48              >            pha         ;use stack to load status
35a1 : b96702          >            lda absORa,y    ;precharge accu
35a4 : 28              >            plp
                        
35a5 : 195b02                   ora absOR,y
                                tst_ay  absrlo,absflo,$ff-fnz
35a8 : 08              >            php         ;save flags
35a9 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
35ac : d0fe            >        bne *           ;failed not equal (non zero)
                       >
35ae : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
35af : 0908            >            ora #decmode        ;ignore decimal mode bit
35b1 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
35b3 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
35b6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
35b8 : 88                       dey
35b9 : 10e3                     bpl tora11
                        
35bb : a206                     ldx #6      ;(zp,x)
35bd : a003                     ldy #3
35bf :                  tora12
                                set_ay  absORa,0
                       >            load_flag 0
35bf : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
35c1 : 48              >            pha         ;use stack to load status
35c2 : b96702          >            lda absORa,y    ;precharge accu
35c5 : 28              >            plp
                        
35c6 : 014c                     ora (indOR,x)
                                tst_ay  absrlo,absflo,0
35c8 : 08              >            php         ;save flags
35c9 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
35cc : d0fe            >        bne *           ;failed not equal (non zero)
                       >
35ce : 68              >            pla         ;load status
                       >            eor_flag 0
35cf : 0908            >            ora #decmode        ;ignore decimal mode bit
35d1 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
35d3 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
35d6 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
35d8 : ca                       dex
35d9 : ca                       dex
35da : 88                       dey
35db : 10e2                     bpl tora12
35dd : a206                     ldx #6
35df : a003                     ldy #3
35e1 :                  tora13
                                set_ay  absORa,$ff
                       >            load_flag $ff
35e1 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
35e3 : 48              >            pha         ;use stack to load status
35e4 : b96702          >            lda absORa,y    ;precharge accu
35e7 : 28              >            plp
                        
35e8 : 014c                     ora (indOR,x)
                                tst_ay  absrlo,absflo,$ff-fnz
35ea : 08              >            php         ;save flags
35eb : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
35ee : d0fe            >        bne *           ;failed not equal (non zero)
                       >
35f0 : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
35f1 : 0908            >            ora #decmode        ;ignore decimal mode bit
35f3 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
35f5 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
35f8 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
35fa : ca                       dex
35fb : ca                       dex
35fc : 88                       dey
35fd : 10e2                     bpl tora13
                        
35ff : a003                     ldy #3      ;(zp),y
3601 :                  tora14
                                set_ay  absORa,0
                       >            load_flag 0
3601 : a900            >            lda #0             ;allow test to change I-flag (no mask)
                       >
3603 : 48              >            pha         ;use stack to load status
3604 : b96702          >            lda absORa,y    ;precharge accu
3607 : 28              >            plp
                        
3608 : 114c                     ora (indOR),y
                                tst_ay  absrlo,absflo,0
360a : 08              >            php         ;save flags
360b : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
360e : d0fe            >        bne *           ;failed not equal (non zero)
                       >
3610 : 68              >            pla         ;load status
                       >            eor_flag 0
3611 : 0908            >            ora #decmode        ;ignore decimal mode bit
3613 : 4938            >            eor #0|faod        ;invert expected flags + always on bits
                       >
3615 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
3618 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
361a : 88                       dey
361b : 10e4                     bpl tora14
361d : a003                     ldy #3
361f :                  tora15
                                set_ay  absORa,$ff
                       >            load_flag $ff
361f : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3621 : 48              >            pha         ;use stack to load status
3622 : b96702          >            lda absORa,y    ;precharge accu
3625 : 28              >            plp
                        
3626 : 114c                     ora (indOR),y
                                tst_ay  absrlo,absflo,$ff-fnz
3628 : 08              >            php         ;save flags
3629 : d97302          >            cmp absrlo,y    ;test result
                       >            trap_ne     ;
362c : d0fe            >        bne *           ;failed not equal (non zero)
                       >
362e : 68              >            pla         ;load status
                       >            eor_flag $ff-fnz
362f : 0908            >            ora #decmode        ;ignore decimal mode bit
3631 : 497d            >            eor #$ff-fnz|faod        ;invert expected flags + always on bits
                       >
3633 : d97702          >            cmp absflo,y    ;test flags
                       >            trap_ne
3636 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
                        
3638 : 88                       dey
3639 : 10e4                     bpl tora15
                            if I_flag = 3
363b : 58                       cli
                            endif                
                                next_test
363c : ad0002          >            lda test_case   ;previous test
363f : c928            >            cmp #test_num
                       >            trap_ne         ;test is out of sequence
3641 : d0fe            >        bne *           ;failed not equal (non zero)
                       >
0029 =                 >test_num = test_num + 1
3643 : a929            >            lda #test_num   ;*** next tests' number
3645 : 8d0002          >            sta test_case
                       >            ;check_ram       ;uncomment to find altered RAM after each test
                        
                        
                        ; full binary add/subtract test
                        ; iterates through all combinations of operands and carry input
                        ; uses increments/decrements to predict result & result flags
3648 : d8                       cld
3649 : a20e                     ldx #ad2        ;for indexed test
364b : a0ff                     ldy #$ff        ;max range
364d : a900                     lda #0          ;start with adding zeroes & no carry
364f : 850c                     sta adfc        ;carry in - for diag
3651 : 850d                     sta ad1         ;operand 1 - accumulator
3653 : 850e                     sta ad2         ;operand 2 - memory or immediate
3655 : 8d0302                   sta ada2        ;non zp
3658 : 850f                     sta adrl        ;expected result bits 0-7
365a : 8510                     sta adrh        ;expected result bit 8 (carry out)
365c : a9ff                     lda #$ff        ;complemented operand 2 for subtract
365e : 8512                     sta sb2
3660 : 8d0402                   sta sba2        ;non zp
3663 : a902                     lda #2          ;expected Z-flag
3665 : 8511                     sta adrf
3667 : 18               tadd    clc             ;test with carry clear
3668 : 20b336                   jsr chkadd
366b : e60c                     inc adfc        ;now with carry
366d : e60f                     inc adrl        ;result +1
366f : 08                       php             ;save N & Z from low result
3670 : 08                       php
3671 : 68                       pla             ;accu holds expected flags
3672 : 2982                     and #$82        ;mask N & Z
3674 : 28                       plp
3675 : d002                     bne tadd1
3677 : e610                     inc adrh        ;result bit 8 - carry
3679 : 0510             tadd1   ora adrh        ;merge C to expected flags
367b : 8511                     sta adrf        ;save expected flags except overflow
367d : 38                       sec             ;test with carry set
367e : 20b336                   jsr chkadd
3681 : c60c                     dec adfc        ;same for operand +1 but no carry
3683 : e60d                     inc ad1
3685 : d0e0                     bne tadd        ;iterate op1
3687 : a900                     lda #0          ;preset result to op2 when op1 = 0
3689 : 8510                     sta adrh
368b : ee0302                   inc ada2
368e : e60e                     inc ad2
3690 : 08                       php             ;save NZ as operand 2 becomes the new result
3691 : 68                       pla
3692 : 2982                     and #$82        ;mask N00000Z0
3694 : 8511                     sta adrf        ;no need to check carry as we are adding to 0
3696 : c612                     dec sb2         ;complement subtract operand 2
3698 : ce0402                   dec sba2
369b : a50e                     lda ad2         
369d : 850f                     sta adrl
369f : d0c6                     bne tadd        ;iterate op2
                            if disable_decimal < 1
                                next_test
                        
                        ; decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, N V Z flags are ignored
                        ; iterates through all valid combinations of operands and carry input
                        ; uses increments/decrements to predict result & carry flag
                                sed 
                                ldx #ad2        ;for indexed test
                                ldy #$ff        ;max range
                                lda #$99        ;start with adding 99 to 99 with carry
                                sta ad1         ;operand 1 - accumulator
                                sta ad2         ;operand 2 - memory or immediate
                                sta ada2        ;non zp
                                sta adrl        ;expected result bits 0-7
                                lda #1          ;set carry in & out
                                sta adfc        ;carry in - for diag
                                sta adrh        ;expected result bit 8 (carry out)
                                lda #0          ;complemented operand 2 for subtract
                                sta sb2
                                sta sba2        ;non zp
                        tdad    sec             ;test with carry set
                                jsr chkdad
                                dec adfc        ;now with carry clear
                                lda adrl        ;decimal adjust result
                                bne tdad1       ;skip clear carry & preset result 99 (9A-1)
                                dec adrh
                                lda #$99
                                sta adrl
                                bne tdad3
                        tdad1   and #$f         ;lower nibble mask
                                bne tdad2       ;no decimal adjust needed
                                dec adrl        ;decimal adjust (?0-6)
                                dec adrl
                                dec adrl
                                dec adrl
                                dec adrl
                                dec adrl
                        tdad2   dec adrl        ;result -1
                        tdad3   clc             ;test with carry clear
                                jsr chkdad
                                inc adfc        ;same for operand -1 but with carry
                                lda ad1         ;decimal adjust operand 1
                                beq tdad5       ;iterate operand 2
                                and #$f         ;lower nibble mask
                                bne tdad4       ;skip decimal adjust
                                dec ad1         ;decimal adjust (?0-6)
                                dec ad1
                                dec ad1
                                dec ad1
                                dec ad1
                                dec ad1
                        tdad4   dec ad1         ;operand 1 -1
                                jmp tdad        ;iterate op1
                        
                        tdad5   lda #$99        ;precharge op1 max
                                sta ad1
                                lda ad2         ;decimal adjust operand 2
                                beq tdad7       ;end of iteration
                                and #$f         ;lower nibble mask
                                bne tdad6       ;skip decimal adjust
                                dec ad2         ;decimal adjust (?0-6)
                                dec ad2
                                dec ad2
                                dec ad2
                                dec ad2
                                dec ad2
                                inc sb2         ;complemented decimal adjust for subtract (?9+6)
                                inc sb2
                                inc sb2
                                inc sb2
                                inc sb2
                                inc sb2
                        tdad6   dec ad2         ;operand 2 -1
                                inc sb2         ;complemented operand for subtract
                                lda sb2
                                sta sba2        ;copy as non zp operand
                                lda ad2
                                sta ada2        ;copy as non zp operand
                                sta adrl        ;new result since op1+carry=00+carry +op2=op2
                                inc adrh        ;result carry
                                bne tdad        ;iterate op2
                        tdad7
                                next_test
                        
                        ; decimal/binary switch test
                        ; tests CLD, SED, PLP, RTI to properly switch between decimal & binary opcode
                        ;   tables
                                clc
                                cld
                                php
                                lda #$55
                                adc #$55
                                cmp #$aa
                                trap_ne         ;expected binary result after cld
                                clc
                                sed
                                php
                                lda #$55
                                adc #$55
                                cmp #$10
                                trap_ne         ;expected decimal result after sed
                                cld
                                plp
                                lda #$55
                                adc #$55
                                cmp #$10
                                trap_ne         ;expected decimal result after plp D=1
                                plp
                                lda #$55
                                adc #$55
                                cmp #$aa
                                trap_ne         ;expected binary result after plp D=0
                                clc
                                lda #hi bin_rti_ret ;emulated interrupt for rti
                                pha
                                lda #lo bin_rti_ret
                                pha
                                php
                                sed
                                lda #hi dec_rti_ret ;emulated interrupt for rti
                                pha
                                lda #lo dec_rti_ret
                                pha
                                php
                                cld
                                rti
                        dec_rti_ret
                                lda #$55
                                adc #$55
                                cmp #$10
                                trap_ne         ;expected decimal result after rti D=1
                                rti
                        bin_rti_ret        
                                lda #$55
                                adc #$55
                                cmp #$aa
                                trap_ne         ;expected binary result after rti D=0
                            endif
                            
36a1 : ad0002                   lda test_case
36a4 : c929                     cmp #test_num
                                trap_ne         ;previous test is out of sequence
36a6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
36a8 : a9f0                     lda #$f0        ;mark opcode testing complete
36aa : 8d0002                   sta test_case
                                
                        ; final RAM integrity test
                        ;   verifies that none of the previous tests has altered RAM outside of the
                        ;   designated write areas.
                                check_ram
                       >            ;RAM check disabled - RAM size not set
                        
                        ; *** DEBUG INFO ***
                        ; to debug checksum errors uncomment check_ram in the next_test macro to
                        ; narrow down the responsible opcode.
                        ; may give false errors when monitor, OS or other background activity is
                        ; allowed during previous tests.
                        
                        
                        ; S U C C E S S ************************************************
                        ; -------------       
                                success         ;if you get here everything went well
36ad : 4cad36          >        jmp *           ;test passed, no errors
                        
                        ; -------------       
                        ; S U C C E S S ************************************************
36b0 : 4c0004                   jmp start       ;run again      
                        
                            if disable_decimal < 1
                        ; core subroutine of the decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, N V Z flags are ignored
                        ; iterates through all valid combinations of operands and carry input
                        ; uses increments/decrements to predict result & carry flag
                        chkdad
                        ; decimal ADC / SBC zp
                                php             ;save carry for subtract
                                lda ad1
                                adc ad2         ;perform add
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc sb2         ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad flags
                                plp
                        ; decimal ADC / SBC abs
                                php             ;save carry for subtract
                                lda ad1
                                adc ada2        ;perform add
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc sba2        ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC #
                                php             ;save carry for subtract
                                lda ad2
                                sta ex_adci+1   ;set ADC # operand
                                lda ad1
                                jsr ex_adci     ;execute ADC # in RAM
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda sb2
                                sta ex_sbci+1   ;set SBC # operand
                                lda ad1
                                jsr ex_sbci     ;execute SBC # in RAM
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC zp,x
                                php             ;save carry for subtract
                                lda ad1
                                adc 0,x         ;perform add
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc sb2-ad2,x   ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC abs,x
                                php             ;save carry for subtract
                                lda ad1
                                adc ada2-ad2,x  ;perform add
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc sba2-ad2,x  ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC abs,y
                                php             ;save carry for subtract
                                lda ad1
                                adc ada2-$ff,y  ;perform add
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc sba2-$ff,y  ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC (zp,x)
                                php             ;save carry for subtract
                                lda ad1
                                adc (lo adi2-ad2,x) ;perform add
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc (lo sbi2-ad2,x) ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC (abs),y
                                php             ;save carry for subtract
                                lda ad1
                                adc (adiy2),y   ;perform add
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc (sbiy2),y   ;perform subtract
                                php          
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                rts
                            endif
                        
                        ; core subroutine of the full binary add/subtract test
                        ; iterates through all combinations of operands and carry input
                        ; uses increments/decrements to predict result & result flags
36b3 : a511             chkadd  lda adrf        ;add V-flag if overflow
36b5 : 2983                     and #$83        ;keep N-----ZC / clear V
36b7 : 48                       pha
36b8 : a50d                     lda ad1         ;test sign unequal between operands
36ba : 450e                     eor ad2
36bc : 300a                     bmi ckad1       ;no overflow possible - operands have different sign
36be : a50d                     lda ad1         ;test sign equal between operands and result
36c0 : 450f                     eor adrl
36c2 : 1004                     bpl ckad1       ;no overflow occured - operand and result have same sign
36c4 : 68                       pla
36c5 : 0940                     ora #$40        ;set V
36c7 : 48                       pha
36c8 : 68               ckad1   pla
36c9 : 8511                     sta adrf        ;save expected flags
                        ; binary ADC / SBC zp
36cb : 08                       php             ;save carry for subtract
36cc : a50d                     lda ad1
36ce : 650e                     adc ad2         ;perform add
36d0 : 08                       php          
36d1 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
36d3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
36d5 : 68                       pla             ;check flags
36d6 : 29c3                     and #$c3        ;mask NV----ZC
36d8 : c511                     cmp adrf
                                trap_ne         ;bad flags
36da : d0fe            >        bne *           ;failed not equal (non zero)
                        
36dc : 28                       plp
36dd : 08                       php             ;save carry for next add
36de : a50d                     lda ad1
36e0 : e512                     sbc sb2         ;perform subtract
36e2 : 08                       php          
36e3 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
36e5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
36e7 : 68                       pla             ;check flags
36e8 : 29c3                     and #$c3        ;mask NV----ZC
36ea : c511                     cmp adrf
                                trap_ne         ;bad flags
36ec : d0fe            >        bne *           ;failed not equal (non zero)
                        
36ee : 28                       plp
                        ; binary ADC / SBC abs
36ef : 08                       php             ;save carry for subtract
36f0 : a50d                     lda ad1
36f2 : 6d0302                   adc ada2        ;perform add
36f5 : 08                       php          
36f6 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
36f8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
36fa : 68                       pla             ;check flags
36fb : 29c3                     and #$c3        ;mask NV----ZC
36fd : c511                     cmp adrf
                                trap_ne         ;bad flags
36ff : d0fe            >        bne *           ;failed not equal (non zero)
                        
3701 : 28                       plp
3702 : 08                       php             ;save carry for next add
3703 : a50d                     lda ad1
3705 : ed0402                   sbc sba2        ;perform subtract
3708 : 08                       php          
3709 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
370b : d0fe            >        bne *           ;failed not equal (non zero)
                        
370d : 68                       pla             ;check flags
370e : 29c3                     and #$c3        ;mask NV----ZC
3710 : c511                     cmp adrf
                                trap_ne         ;bad flags
3712 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3714 : 28                       plp
                        ; binary ADC / SBC #
3715 : 08                       php             ;save carry for subtract
3716 : a50e                     lda ad2
3718 : 8d1302                   sta ex_adci+1   ;set ADC # operand
371b : a50d                     lda ad1
371d : 201202                   jsr ex_adci     ;execute ADC # in RAM
3720 : 08                       php          
3721 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
3723 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3725 : 68                       pla             ;check flags
3726 : 29c3                     and #$c3        ;mask NV----ZC
3728 : c511                     cmp adrf
                                trap_ne         ;bad flags
372a : d0fe            >        bne *           ;failed not equal (non zero)
                        
372c : 28                       plp
372d : 08                       php             ;save carry for next add
372e : a512                     lda sb2
3730 : 8d1602                   sta ex_sbci+1   ;set SBC # operand
3733 : a50d                     lda ad1
3735 : 201502                   jsr ex_sbci     ;execute SBC # in RAM
3738 : 08                       php          
3739 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
373b : d0fe            >        bne *           ;failed not equal (non zero)
                        
373d : 68                       pla             ;check flags
373e : 29c3                     and #$c3        ;mask NV----ZC
3740 : c511                     cmp adrf
                                trap_ne         ;bad flags
3742 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3744 : 28                       plp
                        ; binary ADC / SBC zp,x
3745 : 08                       php             ;save carry for subtract
3746 : a50d                     lda ad1
3748 : 7500                     adc 0,x         ;perform add
374a : 08                       php          
374b : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
374d : d0fe            >        bne *           ;failed not equal (non zero)
                        
374f : 68                       pla             ;check flags
3750 : 29c3                     and #$c3        ;mask NV----ZC
3752 : c511                     cmp adrf
                                trap_ne         ;bad flags
3754 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3756 : 28                       plp
3757 : 08                       php             ;save carry for next add
3758 : a50d                     lda ad1
375a : f504                     sbc sb2-ad2,x   ;perform subtract
375c : 08                       php          
375d : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
375f : d0fe            >        bne *           ;failed not equal (non zero)
                        
3761 : 68                       pla             ;check flags
3762 : 29c3                     and #$c3        ;mask NV----ZC
3764 : c511                     cmp adrf
                                trap_ne         ;bad flags
3766 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3768 : 28                       plp
                        ; binary ADC / SBC abs,x
3769 : 08                       php             ;save carry for subtract
376a : a50d                     lda ad1
376c : 7df501                   adc ada2-ad2,x  ;perform add
376f : 08                       php          
3770 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
3772 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3774 : 68                       pla             ;check flags
3775 : 29c3                     and #$c3        ;mask NV----ZC
3777 : c511                     cmp adrf
                                trap_ne         ;bad flags
3779 : d0fe            >        bne *           ;failed not equal (non zero)
                        
377b : 28                       plp
377c : 08                       php             ;save carry for next add
377d : a50d                     lda ad1
377f : fdf601                   sbc sba2-ad2,x  ;perform subtract
3782 : 08                       php          
3783 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
3785 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3787 : 68                       pla             ;check flags
3788 : 29c3                     and #$c3        ;mask NV----ZC
378a : c511                     cmp adrf
                                trap_ne         ;bad flags
378c : d0fe            >        bne *           ;failed not equal (non zero)
                        
378e : 28                       plp
                        ; binary ADC / SBC abs,y
378f : 08                       php             ;save carry for subtract
3790 : a50d                     lda ad1
3792 : 790401                   adc ada2-$ff,y  ;perform add
3795 : 08                       php          
3796 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
3798 : d0fe            >        bne *           ;failed not equal (non zero)
                        
379a : 68                       pla             ;check flags
379b : 29c3                     and #$c3        ;mask NV----ZC
379d : c511                     cmp adrf
                                trap_ne         ;bad flags
379f : d0fe            >        bne *           ;failed not equal (non zero)
                        
37a1 : 28                       plp
37a2 : 08                       php             ;save carry for next add
37a3 : a50d                     lda ad1
37a5 : f90501                   sbc sba2-$ff,y  ;perform subtract
37a8 : 08                       php          
37a9 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
37ab : d0fe            >        bne *           ;failed not equal (non zero)
                        
37ad : 68                       pla             ;check flags
37ae : 29c3                     and #$c3        ;mask NV----ZC
37b0 : c511                     cmp adrf
                                trap_ne         ;bad flags
37b2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
37b4 : 28                       plp
                        ; binary ADC / SBC (zp,x)
37b5 : 08                       php             ;save carry for subtract
37b6 : a50d                     lda ad1
37b8 : 6146                     adc (lo adi2-ad2,x) ;perform add
37ba : 08                       php          
37bb : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
37bd : d0fe            >        bne *           ;failed not equal (non zero)
                        
37bf : 68                       pla             ;check flags
37c0 : 29c3                     and #$c3        ;mask NV----ZC
37c2 : c511                     cmp adrf
                                trap_ne         ;bad flags
37c4 : d0fe            >        bne *           ;failed not equal (non zero)
                        
37c6 : 28                       plp
37c7 : 08                       php             ;save carry for next add
37c8 : a50d                     lda ad1
37ca : e148                     sbc (lo sbi2-ad2,x) ;perform subtract
37cc : 08                       php          
37cd : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
37cf : d0fe            >        bne *           ;failed not equal (non zero)
                        
37d1 : 68                       pla             ;check flags
37d2 : 29c3                     and #$c3        ;mask NV----ZC
37d4 : c511                     cmp adrf
                                trap_ne         ;bad flags
37d6 : d0fe            >        bne *           ;failed not equal (non zero)
                        
37d8 : 28                       plp
                        ; binary ADC / SBC (abs),y
37d9 : 08                       php             ;save carry for subtract
37da : a50d                     lda ad1
37dc : 7158                     adc (adiy2),y   ;perform add
37de : 08                       php          
37df : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
37e1 : d0fe            >        bne *           ;failed not equal (non zero)
                        
37e3 : 68                       pla             ;check flags
37e4 : 29c3                     and #$c3        ;mask NV----ZC
37e6 : c511                     cmp adrf
                                trap_ne         ;bad flags
37e8 : d0fe            >        bne *           ;failed not equal (non zero)
                        
37ea : 28                       plp
37eb : 08                       php             ;save carry for next add
37ec : a50d                     lda ad1
37ee : f15a                     sbc (sbiy2),y   ;perform subtract
37f0 : 08                       php          
37f1 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
37f3 : d0fe            >        bne *           ;failed not equal (non zero)
                        
37f5 : 68                       pla             ;check flags
37f6 : 29c3                     and #$c3        ;mask NV----ZC
37f8 : c511                     cmp adrf
                                trap_ne         ;bad flags
37fa : d0fe            >        bne *           ;failed not equal (non zero)
                        
37fc : 28                       plp
37fd : 60                       rts
                        
                        ; target for the jump absolute test
37fe : 88                       dey
37ff : 88                       dey
3800 :                  test_far
3800 : 08                       php             ;either SP or Y count will fail, if we do not hit
3801 : 88                       dey
3802 : 88                       dey
3803 : 88                       dey
3804 : 28                       plp
                                trap_cs         ;flags loaded?
3805 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_vs
3807 : 70fe            >        bvs *           ;failed overflow set
                        
                                trap_mi
3809 : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_eq 
380b : f0fe            >        beq *           ;failed equal (zero)
                        
380d : c946                     cmp #'F'        ;registers loaded?
                                trap_ne
380f : d0fe            >        bne *           ;failed not equal (non zero)
                        
3811 : e041                     cpx #'A'
                                trap_ne        
3813 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3815 : c04f                     cpy #('R'-3)
                                trap_ne
3817 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3819 : 48                       pha             ;save a,x
381a : 8a                       txa
381b : 48                       pha
381c : ba                       tsx
381d : e0fd                     cpx #$fd        ;check SP
                                trap_ne
381f : d0fe            >        bne *           ;failed not equal (non zero)
                        
3821 : 68                       pla             ;restore x
3822 : aa                       tax
                                set_stat $ff
                       >            load_flag $ff
3823 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
3825 : 48              >            pha         ;use stack to load status
3826 : 28              >            plp
                        
3827 : 68                       pla             ;restore a
3828 : e8                       inx             ;return registers with modifications
3829 : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
382b : 4c3309                   jmp far_ret
                                
                        ; target for the jump indirect test
                                align
382e : 3738             ptr_tst_ind dw test_ind
3830 : 8809             ptr_ind_ret dw ind_ret
                                trap            ;runover protection
3832 : 4c3238          >        jmp *           ;failed anyway
                        
3835 : 88                       dey
3836 : 88                       dey
3837 :                  test_ind
3837 : 08                       php             ;either SP or Y count will fail, if we do not hit
3838 : 88                       dey
3839 : 88                       dey
383a : 88                       dey
383b : 28                       plp
                                trap_cs         ;flags loaded?
383c : b0fe            >        bcs *           ;failed carry set
                        
                                trap_vs
383e : 70fe            >        bvs *           ;failed overflow set
                        
                                trap_mi
3840 : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_eq 
3842 : f0fe            >        beq *           ;failed equal (zero)
                        
3844 : c949                     cmp #'I'        ;registers loaded?
                                trap_ne
3846 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3848 : e04e                     cpx #'N'
                                trap_ne        
384a : d0fe            >        bne *           ;failed not equal (non zero)
                        
384c : c041                     cpy #('D'-3)
                                trap_ne
384e : d0fe            >        bne *           ;failed not equal (non zero)
                        
3850 : 48                       pha             ;save a,x
3851 : 8a                       txa
3852 : 48                       pha
3853 : ba                       tsx
3854 : e0fd                     cpx #$fd        ;check SP
                                trap_ne
3856 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3858 : 68                       pla             ;restore x
3859 : aa                       tax
                                set_stat $ff
                       >            load_flag $ff
385a : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
385c : 48              >            pha         ;use stack to load status
385d : 28              >            plp
                        
385e : 68                       pla             ;restore a
385f : e8                       inx             ;return registers with modifications
3860 : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
3862 : 6c3038                   jmp (ptr_ind_ret)
                                trap            ;runover protection
3865 : 4c6538          >        jmp *           ;failed anyway
                        
3868 : 4c0004                   jmp start       ;catastrophic error - cannot continue
                        
                        ; target for the jump subroutine test
386b : 88                       dey
386c : 88                       dey
386d :                  test_jsr
386d : 08                       php             ;either SP or Y count will fail, if we do not hit
386e : 88                       dey
386f : 88                       dey
3870 : 88                       dey
3871 : 28                       plp
                                trap_cs         ;flags loaded?
3872 : b0fe            >        bcs *           ;failed carry set
                        
                                trap_vs
3874 : 70fe            >        bvs *           ;failed overflow set
                        
                                trap_mi
3876 : 30fe            >        bmi *           ;failed minus (bit 7 set)
                        
                                trap_eq 
3878 : f0fe            >        beq *           ;failed equal (zero)
                        
387a : c94a                     cmp #'J'        ;registers loaded?
                                trap_ne
387c : d0fe            >        bne *           ;failed not equal (non zero)
                        
387e : e053                     cpx #'S'
                                trap_ne        
3880 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3882 : c04f                     cpy #('R'-3)
                                trap_ne
3884 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3886 : 48                       pha             ;save a,x
3887 : 8a                       txa
3888 : 48                       pha       
3889 : ba                       tsx             ;sp -4? (return addr,a,x)
388a : e0fb                     cpx #$fb
                                trap_ne
388c : d0fe            >        bne *           ;failed not equal (non zero)
                        
388e : adff01                   lda $1ff        ;propper return on stack
3891 : c909                     cmp #hi(jsr_ret)
                                trap_ne
3893 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3895 : adfe01                   lda $1fe
3898 : c9be                     cmp #lo(jsr_ret)
                                trap_ne
389a : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                set_stat $ff
                       >            load_flag $ff
389c : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                       >
389e : 48              >            pha         ;use stack to load status
389f : 28              >            plp
                        
38a0 : 68                       pla             ;pull x,a
38a1 : aa                       tax
38a2 : 68                       pla
38a3 : e8                       inx             ;return registers with modifications
38a4 : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
38a6 : 60                       rts
                                trap            ;runover protection
38a7 : 4ca738          >        jmp *           ;failed anyway
                        
38aa : 4c0004                   jmp start       ;catastrophic error - cannot continue
                                
                        ;trap in case of unexpected IRQ, NMI, BRK, RESET - BRK test target
38ad :                  nmi_trap
                                trap            ;check stack for conditions at NMI
38ad : 4cad38          >        jmp *           ;failed anyway
                        
38b0 : 4c0004                   jmp start       ;catastrophic error - cannot continue
38b3 :                  res_trap
                                trap            ;unexpected RESET
38b3 : 4cb338          >        jmp *           ;failed anyway
                        
38b6 : 4c0004                   jmp start       ;catastrophic error - cannot continue
                                
38b9 : 88                       dey
38ba : 88                       dey
38bb :                  irq_trap                ;BRK test or unextpected BRK or IRQ
38bb : 08                       php             ;either SP or Y count will fail, if we do not hit
38bc : 88                       dey
38bd : 88                       dey
38be : 88                       dey
                                ;next traps could be caused by unexpected BRK or IRQ
                                ;check stack for BREAK and originating location
                                ;possible jump/branch into weeds (uninitialized space)
38bf : c9bd                     cmp #$ff-'B'    ;BRK pass 2 registers loaded?
38c1 : f046                     beq break2
38c3 : c942                     cmp #'B'        ;BRK pass 1 registers loaded?
                                trap_ne
38c5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
38c7 : e052                     cpx #'R'
                                trap_ne        
38c9 : d0fe            >        bne *           ;failed not equal (non zero)
                        
38cb : c048                     cpy #'K'-3
                                trap_ne
38cd : d0fe            >        bne *           ;failed not equal (non zero)
                        
38cf : 850a                     sta irq_a       ;save registers during break test
38d1 : 860b                     stx irq_x
38d3 : ba                       tsx             ;test break on stack
38d4 : bd0201                   lda $102,x
                                cmp_flag 0      ;break test should have B=1 & unused=1 on stack
38d7 : 0908            >            ora #decmode        ;ignore decimal mode bit
38d9 : c938            >            cmp #(0      |faod)&m8   ;expected flags + always on bits
                        
                                trap_ne         ; - no break flag on stack
38db : d0fe            >        bne *           ;failed not equal (non zero)
                        
38dd : 68                       pla
                                cmp_flag intdis ;should have added interrupt disable
38de : 0908            >            ora #decmode        ;ignore decimal mode bit
38e0 : c93c            >            cmp #(intdis |faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
38e2 : d0fe            >        bne *           ;failed not equal (non zero)
                        
38e4 : ba                       tsx
38e5 : e0fc                     cpx #$fc        ;sp -3? (return addr, flags)
                                trap_ne
38e7 : d0fe            >        bne *           ;failed not equal (non zero)
                        
38e9 : adff01                   lda $1ff        ;propper return on stack
38ec : c90a                     cmp #hi(brk_ret0)
                                trap_ne
38ee : d0fe            >        bne *           ;failed not equal (non zero)
                        
38f0 : adfe01                   lda $1fe
38f3 : c900                     cmp #lo(brk_ret0)
                                trap_ne
38f5 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                load_flag $ff
38f7 : a9ff            >            lda #$ff             ;allow test to change I-flag (no mask)
                        
38f9 : 48                       pha
38fa : a60b                     ldx irq_x
38fc : e8                       inx             ;return registers with modifications
38fd : a50a                     lda irq_a
38ff : 49aa                     eor #$aa
3901 : 28                       plp             ;N=1, V=1, Z=1, C=1 but original flags should be restored
3902 : 40                       rti
                                trap            ;runover protection
3903 : 4c0339          >        jmp *           ;failed anyway
                        
3906 : 4c0004                   jmp start       ;catastrophic error - cannot continue
                                
3909 :                  break2                  ;BRK pass 2        
3909 : e0ad                     cpx #$ff-'R'
                                trap_ne        
390b : d0fe            >        bne *           ;failed not equal (non zero)
                        
390d : c0b1                     cpy #$ff-'K'-3
                                trap_ne
390f : d0fe            >        bne *           ;failed not equal (non zero)
                        
3911 : 850a                     sta irq_a       ;save registers during break test
3913 : 860b                     stx irq_x
3915 : ba                       tsx             ;test break on stack
3916 : bd0201                   lda $102,x
                                cmp_flag $ff    ;break test should have B=1
3919 : 0908            >            ora #decmode        ;ignore decimal mode bit
391b : c9ff            >            cmp #($ff    |faod)&m8   ;expected flags + always on bits
                        
                                trap_ne         ; - no break flag on stack
391d : d0fe            >        bne *           ;failed not equal (non zero)
                        
391f : 68                       pla
3920 : 0908                     ora #decmode    ;ignore decmode cleared if 65c02
                                cmp_flag $ff    ;actual passed flags
3922 : 0908            >            ora #decmode        ;ignore decimal mode bit
3924 : c9ff            >            cmp #($ff    |faod)&m8   ;expected flags + always on bits
                        
                                trap_ne
3926 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3928 : ba                       tsx
3929 : e0fc                     cpx #$fc        ;sp -3? (return addr, flags)
                                trap_ne
392b : d0fe            >        bne *           ;failed not equal (non zero)
                        
392d : adff01                   lda $1ff        ;propper return on stack
3930 : c90a                     cmp #hi(brk_ret1)
                                trap_ne
3932 : d0fe            >        bne *           ;failed not equal (non zero)
                        
3934 : adfe01                   lda $1fe
3937 : c931                     cmp #lo(brk_ret1)
                                trap_ne
3939 : d0fe            >        bne *           ;failed not equal (non zero)
                        
                                load_flag intdis
393b : a904            >            lda #intdis             ;allow test to change I-flag (no mask)
                        
393d : 48                       pha      
393e : a60b                     ldx irq_x
3940 : e8                       inx             ;return registers with modifications
3941 : a50a                     lda irq_a
3943 : 49aa                     eor #$aa
3945 : 28                       plp             ;N=0, V=0, Z=0, C=0 but original flags should be restored
3946 : 40                       rti
                                trap            ;runover protection
3947 : 4c4739          >        jmp *           ;failed anyway
                        
394a : 4c0004                   jmp start       ;catastrophic error - cannot continue
                        
                            if report = 1
                                include "report.i65"
                            endif
                                
                        ;copy of data to initialize BSS segment
                            if load_data_direct != 1
                        zp_init
                        zps_    db  $80,1           ;additional shift pattern to test zero result & flag
                        zp1_    db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
                        zp7f_   db  $7f             ;test pattern for compare
                        ;logical zeropage operands
                        zpOR_   db  0,$1f,$71,$80   ;test pattern for OR
                        zpAN_   db  $0f,$ff,$7f,$80 ;test pattern for AND
                        zpEO_   db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
                        ind1_   dw  abs1            ;indirect pointer to pattern in absolute memory
                                dw  abs1+1
                                dw  abs1+2
                                dw  abs1+3
                                dw  abs7f
                        inw1_   dw  abs1-$f8        ;indirect pointer for wrap-test pattern
                        indt_   dw  abst            ;indirect pointer to store area in absolute memory
                                dw  abst+1
                                dw  abst+2
                                dw  abst+3
                        inwt_   dw  abst-$f8        ;indirect pointer for wrap-test store
                        indAN_  dw  absAN           ;indirect pointer to AND pattern in absolute memory
                                dw  absAN+1
                                dw  absAN+2
                                dw  absAN+3
                        indEO_  dw  absEO           ;indirect pointer to EOR pattern in absolute memory
                                dw  absEO+1
                                dw  absEO+2
                                dw  absEO+3
                        indOR_  dw  absOR           ;indirect pointer to OR pattern in absolute memory
                                dw  absOR+1
                                dw  absOR+2
                                dw  absOR+3
                        ;add/subtract indirect pointers
                        adi2_   dw  ada2            ;indirect pointer to operand 2 in absolute memory
                        sbi2_   dw  sba2            ;indirect pointer to complemented operand 2 (SBC)
                        adiy2_  dw  ada2-$ff        ;with offset for indirect indexed
                        sbiy2_  dw  sba2-$ff
                        zp_end
                            if (zp_end - zp_init) != (zp_bss_end - zp_bss)   
                                ;force assembler error if size is different   
                                ERROR ERROR ERROR   ;mismatch between bss and zeropage data
                            endif 
                        data_init
                        ex_and_ and #0              ;execute immediate opcodes
                                rts
                        ex_eor_ eor #0              ;execute immediate opcodes
                                rts
                        ex_ora_ ora #0              ;execute immediate opcodes
                                rts
                        ex_adc_ adc #0              ;execute immediate opcodes
                                rts
                        ex_sbc_ sbc #0              ;execute immediate opcodes
                                rts
                        ;zps    db  $80,1           ;additional shift patterns test zero result & flag
                        abs1_   db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
                        abs7f_  db  $7f             ;test pattern for compare
                        ;loads
                        fLDx_   db  fn,fn,0,fz              ;expected flags for load
                        ;shifts
                        rASL_                               ;expected result ASL & ROL -carry
                        rROL_   db  0,2,$86,$04,$82,0
                        rROLc_  db  1,3,$87,$05,$83,1       ;expected result ROL +carry
                        rLSR_                               ;expected result LSR & ROR -carry
                        rROR_   db  $40,0,$61,$41,$20,0
                        rRORc_  db  $c0,$80,$e1,$c1,$a0,$80 ;expected result ROR +carry
                        fASL_                               ;expected flags for shifts
                        fROL_   db  fzc,0,fnc,fc,fn,fz      ;no carry in
                        fROLc_  db  fc,0,fnc,fc,fn,0        ;carry in 
                        fLSR_
                        fROR_   db  0,fzc,fc,0,fc,fz        ;no carry in
                        fRORc_  db  fn,fnc,fnc,fn,fnc,fn    ;carry in
                        ;increments (decrements)
                        rINC_   db  $7f,$80,$ff,0,1         ;expected result for INC/DEC
                        fINC_   db  0,fn,fn,fz,0            ;expected flags for INC/DEC
                        ;logical memory operand
                        absOR_  db  0,$1f,$71,$80           ;test pattern for OR
                        absAN_  db  $0f,$ff,$7f,$80         ;test pattern for AND
                        absEO_  db  $ff,$0f,$8f,$8f         ;test pattern for EOR
                        ;logical accu operand
                        absORa_ db  0,$f1,$1f,0             ;test pattern for OR
                        absANa_ db  $f0,$ff,$ff,$ff         ;test pattern for AND
                        absEOa_ db  $ff,$f0,$f0,$0f         ;test pattern for EOR
                        ;logical results
                        absrlo_ db  0,$ff,$7f,$80
                        absflo_ db  fz,fn,0,fn
                        data_end
                            if (data_end - data_init) != (data_bss_end - data_bss)
                                ;force assembler error if size is different   
                                ERROR ERROR ERROR   ;mismatch between bss and data
                            endif 
                        
                        vec_init
                                dw  nmi_trap
                                dw  res_trap
                                dw  irq_trap
                        vec_bss equ $fffa
                            endif                   ;end of RAM init data
                            
                            if (load_data_direct = 1) & (ROM_vectors = 1)  
                                org $fffa       ;vectors
                                dw  nmi_trap
                                dw  res_trap
                                dw  irq_trap
                            endif
                        
3909 =                          end start
                                    
No errors in pass 2.
Wrote binary from address $0000 through $394c.
Total size 14669 bytes.
Program start address is at $0400 (1024).
